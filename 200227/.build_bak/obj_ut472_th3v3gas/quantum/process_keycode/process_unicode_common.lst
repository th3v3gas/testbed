   1               		.file	"process_unicode_common.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.unicode_input_mode_init,"ax",@progbits
  11               	.global	unicode_input_mode_init
  13               	unicode_input_mode_init:
  14               	.LFB109:
  15               		.file 1 "quantum/process_keycode/process_unicode_common.c"
   1:quantum/process_keycode/process_unicode_common.c **** /* Copyright 2017 Jack Humbert
   2:quantum/process_keycode/process_unicode_common.c ****  *
   3:quantum/process_keycode/process_unicode_common.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/process_keycode/process_unicode_common.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/process_keycode/process_unicode_common.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/process_keycode/process_unicode_common.c ****  * (at your option) any later version.
   7:quantum/process_keycode/process_unicode_common.c ****  *
   8:quantum/process_keycode/process_unicode_common.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/process_keycode/process_unicode_common.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/process_keycode/process_unicode_common.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/process_keycode/process_unicode_common.c ****  * GNU General Public License for more details.
  12:quantum/process_keycode/process_unicode_common.c ****  *
  13:quantum/process_keycode/process_unicode_common.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/process_keycode/process_unicode_common.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/process_keycode/process_unicode_common.c ****  */
  16:quantum/process_keycode/process_unicode_common.c **** 
  17:quantum/process_keycode/process_unicode_common.c **** #include "process_unicode_common.h"
  18:quantum/process_keycode/process_unicode_common.c **** #include "eeprom.h"
  19:quantum/process_keycode/process_unicode_common.c **** #include <ctype.h>
  20:quantum/process_keycode/process_unicode_common.c **** #include <string.h>
  21:quantum/process_keycode/process_unicode_common.c **** 
  22:quantum/process_keycode/process_unicode_common.c **** unicode_config_t unicode_config;
  23:quantum/process_keycode/process_unicode_common.c **** uint8_t          unicode_saved_mods;
  24:quantum/process_keycode/process_unicode_common.c **** 
  25:quantum/process_keycode/process_unicode_common.c **** #if UNICODE_SELECTED_MODES != -1
  26:quantum/process_keycode/process_unicode_common.c **** static uint8_t selected[]     = {UNICODE_SELECTED_MODES};
  27:quantum/process_keycode/process_unicode_common.c **** static uint8_t selected_count = sizeof selected / sizeof *selected;
  28:quantum/process_keycode/process_unicode_common.c **** static uint8_t selected_index;
  29:quantum/process_keycode/process_unicode_common.c **** #endif
  30:quantum/process_keycode/process_unicode_common.c **** 
  31:quantum/process_keycode/process_unicode_common.c **** void unicode_input_mode_init(void) {
  16               		.loc 1 31 36 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  32:quantum/process_keycode/process_unicode_common.c ****     unicode_config.raw = eeprom_read_byte(EECONFIG_UNICODEMODE);
  22               		.loc 1 32 5 view .LVU1
  23               		.loc 1 32 26 is_stmt 0 view .LVU2
  24 0000 8CE0      		ldi r24,lo8(12)
  25 0002 90E0      		ldi r25,0
  26 0004 0E94 0000 		call eeprom_read_byte
  27               	.LVL0:
  28 0008 90E0      		ldi r25,0
  29 000a B0E0      		ldi r27,0
  30 000c A0E0      		ldi r26,0
  31 000e 8093 0000 		sts unicode_config,r24
  32 0012 9093 0000 		sts unicode_config+1,r25
  33 0016 A093 0000 		sts unicode_config+2,r26
  34 001a B093 0000 		sts unicode_config+3,r27
  33:quantum/process_keycode/process_unicode_common.c **** #if UNICODE_SELECTED_MODES != -1
  34:quantum/process_keycode/process_unicode_common.c **** #    if UNICODE_CYCLE_PERSIST
  35:quantum/process_keycode/process_unicode_common.c ****     // Find input_mode in selected modes
  36:quantum/process_keycode/process_unicode_common.c ****     uint8_t i;
  37:quantum/process_keycode/process_unicode_common.c ****     for (i = 0; i < selected_count; i++) {
  38:quantum/process_keycode/process_unicode_common.c ****         if (selected[i] == unicode_config.input_mode) {
  39:quantum/process_keycode/process_unicode_common.c ****             selected_index = i;
  40:quantum/process_keycode/process_unicode_common.c ****             break;
  41:quantum/process_keycode/process_unicode_common.c ****         }
  42:quantum/process_keycode/process_unicode_common.c ****     }
  43:quantum/process_keycode/process_unicode_common.c ****     if (i == selected_count) {
  44:quantum/process_keycode/process_unicode_common.c ****         // Not found: input_mode isn't selected, change to one that is
  45:quantum/process_keycode/process_unicode_common.c ****         unicode_config.input_mode = selected[selected_index = 0];
  46:quantum/process_keycode/process_unicode_common.c ****     }
  47:quantum/process_keycode/process_unicode_common.c **** #    else
  48:quantum/process_keycode/process_unicode_common.c ****     // Always change to the first selected input mode
  49:quantum/process_keycode/process_unicode_common.c ****     unicode_config.input_mode = selected[selected_index = 0];
  50:quantum/process_keycode/process_unicode_common.c **** #    endif
  51:quantum/process_keycode/process_unicode_common.c **** #endif
  52:quantum/process_keycode/process_unicode_common.c ****     dprintf("Unicode input mode init to: %u\n", unicode_config.input_mode);
  35               		.loc 1 52 75 is_stmt 1 view .LVU3
  36               	/* epilogue start */
  53:quantum/process_keycode/process_unicode_common.c **** }
  37               		.loc 1 53 1 is_stmt 0 view .LVU4
  38 001e 0895      		ret
  39               		.cfi_endproc
  40               	.LFE109:
  42               		.section	.text.get_unicode_input_mode,"ax",@progbits
  43               	.global	get_unicode_input_mode
  45               	get_unicode_input_mode:
  46               	.LFB110:
  54:quantum/process_keycode/process_unicode_common.c **** 
  55:quantum/process_keycode/process_unicode_common.c **** uint8_t get_unicode_input_mode(void) { return unicode_config.input_mode; }
  47               		.loc 1 55 38 is_stmt 1 view -0
  48               		.cfi_startproc
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  53               		.loc 1 55 40 view .LVU6
  54               		.loc 1 55 1 is_stmt 0 view .LVU7
  55 0000 8091 0000 		lds r24,unicode_config
  56               	/* epilogue start */
  57 0004 0895      		ret
  58               		.cfi_endproc
  59               	.LFE110:
  61               		.section	.text.cycle_unicode_input_mode,"ax",@progbits
  62               	.global	cycle_unicode_input_mode
  64               	cycle_unicode_input_mode:
  65               	.LVL1:
  66               	.LFB112:
  56:quantum/process_keycode/process_unicode_common.c **** 
  57:quantum/process_keycode/process_unicode_common.c **** void set_unicode_input_mode(uint8_t mode) {
  58:quantum/process_keycode/process_unicode_common.c ****     unicode_config.input_mode = mode;
  59:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
  60:quantum/process_keycode/process_unicode_common.c ****     dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
  61:quantum/process_keycode/process_unicode_common.c **** }
  62:quantum/process_keycode/process_unicode_common.c **** 
  63:quantum/process_keycode/process_unicode_common.c **** void cycle_unicode_input_mode(uint8_t offset) {
  67               		.loc 1 63 47 is_stmt 1 view -0
  68               		.cfi_startproc
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  64:quantum/process_keycode/process_unicode_common.c **** #if UNICODE_SELECTED_MODES != -1
  65:quantum/process_keycode/process_unicode_common.c ****     selected_index            = (selected_index + offset) % selected_count;
  66:quantum/process_keycode/process_unicode_common.c ****     unicode_config.input_mode = selected[selected_index];
  67:quantum/process_keycode/process_unicode_common.c **** #    if UNICODE_CYCLE_PERSIST
  68:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
  69:quantum/process_keycode/process_unicode_common.c **** #    endif
  70:quantum/process_keycode/process_unicode_common.c ****     dprintf("Unicode input mode cycle to: %u\n", unicode_config.input_mode);
  71:quantum/process_keycode/process_unicode_common.c **** #endif
  72:quantum/process_keycode/process_unicode_common.c **** }
  73               		.loc 1 72 1 view .LVU9
  74               	/* epilogue start */
  75 0000 0895      		ret
  76               		.cfi_endproc
  77               	.LFE112:
  79               		.section	.text.persist_unicode_input_mode,"ax",@progbits
  80               	.global	persist_unicode_input_mode
  82               	persist_unicode_input_mode:
  83               	.LFB113:
  73:quantum/process_keycode/process_unicode_common.c **** 
  74:quantum/process_keycode/process_unicode_common.c **** void persist_unicode_input_mode(void) { eeprom_update_byte(EECONFIG_UNICODEMODE, unicode_config.inp
  84               		.loc 1 74 39 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  90               		.loc 1 74 41 view .LVU11
  91 0000 6091 0000 		lds r22,unicode_config
  92 0004 8CE0      		ldi r24,lo8(12)
  93 0006 90E0      		ldi r25,0
  94 0008 0C94 0000 		jmp eeprom_update_byte
  95               	.LVL2:
  96               		.cfi_endproc
  97               	.LFE113:
  99               		.section	.text.set_unicode_input_mode,"ax",@progbits
 100               	.global	set_unicode_input_mode
 102               	set_unicode_input_mode:
 103               	.LVL3:
 104               	.LFB111:
  57:quantum/process_keycode/process_unicode_common.c ****     unicode_config.input_mode = mode;
 105               		.loc 1 57 43 view -0
 106               		.cfi_startproc
 107               	/* prologue: function */
 108               	/* frame size = 0 */
 109               	/* stack size = 0 */
 110               	.L__stack_usage = 0
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 111               		.loc 1 58 5 view .LVU13
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 112               		.loc 1 58 31 is_stmt 0 view .LVU14
 113 0000 8093 0000 		sts unicode_config,r24
  59:quantum/process_keycode/process_unicode_common.c ****     dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
 114               		.loc 1 59 5 is_stmt 1 view .LVU15
 115 0004 0C94 0000 		jmp persist_unicode_input_mode
 116               	.LVL4:
  59:quantum/process_keycode/process_unicode_common.c ****     dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
 117               		.loc 1 59 5 is_stmt 0 view .LVU16
 118               		.cfi_endproc
 119               	.LFE111:
 121               		.section	.text.unicode_input_start,"ax",@progbits
 122               		.weak	unicode_input_start
 124               	unicode_input_start:
 125               	.LFB114:
  75:quantum/process_keycode/process_unicode_common.c **** 
  76:quantum/process_keycode/process_unicode_common.c **** __attribute__((weak)) void unicode_input_start(void) {
 126               		.loc 1 76 54 is_stmt 1 view -0
 127               		.cfi_startproc
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 0 */
 131               	.L__stack_usage = 0
  77:quantum/process_keycode/process_unicode_common.c ****     unicode_saved_mods = get_mods();  // Save current mods
 132               		.loc 1 77 5 view .LVU18
 133               		.loc 1 77 26 is_stmt 0 view .LVU19
 134 0000 0E94 0000 		call get_mods
 135               	.LVL5:
 136               		.loc 1 77 24 view .LVU20
 137 0004 8093 0000 		sts unicode_saved_mods,r24
  78:quantum/process_keycode/process_unicode_common.c ****     clear_mods();                     // Unregister mods to start from a clean state
 138               		.loc 1 78 5 is_stmt 1 view .LVU21
 139 0008 0E94 0000 		call clear_mods
 140               	.LVL6:
  79:quantum/process_keycode/process_unicode_common.c **** 
  80:quantum/process_keycode/process_unicode_common.c ****     switch (unicode_config.input_mode) {
 141               		.loc 1 80 5 view .LVU22
 142               		.loc 1 80 27 is_stmt 0 view .LVU23
 143 000c 8091 0000 		lds r24,unicode_config
 144               		.loc 1 80 5 view .LVU24
 145 0010 8130      		cpi r24,lo8(1)
 146 0012 01F0      		breq .L7
 147 0014 8823      		tst r24
 148 0016 01F0      		breq .L8
 149 0018 8230      		cpi r24,lo8(2)
 150 001a 01F0      		breq .L9
 151 001c 8430      		cpi r24,lo8(4)
 152 001e 01F0      		breq .L10
 153               	.L11:
  81:quantum/process_keycode/process_unicode_common.c ****         case UC_OSX:
  82:quantum/process_keycode/process_unicode_common.c ****             register_code(UNICODE_KEY_OSX);
  83:quantum/process_keycode/process_unicode_common.c ****             break;
  84:quantum/process_keycode/process_unicode_common.c ****         case UC_LNX:
  85:quantum/process_keycode/process_unicode_common.c ****             tap_code16(UNICODE_KEY_LNX);
  86:quantum/process_keycode/process_unicode_common.c ****             break;
  87:quantum/process_keycode/process_unicode_common.c ****         case UC_WIN:
  88:quantum/process_keycode/process_unicode_common.c ****             register_code(KC_LALT);
  89:quantum/process_keycode/process_unicode_common.c ****             tap_code(KC_PPLS);
  90:quantum/process_keycode/process_unicode_common.c ****             break;
  91:quantum/process_keycode/process_unicode_common.c ****         case UC_WINC:
  92:quantum/process_keycode/process_unicode_common.c ****             tap_code(UNICODE_KEY_WINC);
  93:quantum/process_keycode/process_unicode_common.c ****             tap_code(KC_U);
  94:quantum/process_keycode/process_unicode_common.c ****             break;
  95:quantum/process_keycode/process_unicode_common.c ****     }
  96:quantum/process_keycode/process_unicode_common.c **** 
  97:quantum/process_keycode/process_unicode_common.c ****     wait_ms(UNICODE_TYPE_DELAY);
 154               		.loc 1 97 5 is_stmt 1 view .LVU25
 155               	.LVL7:
 156               	.LBB4:
 157               	.LBI4:
 158               		.file 2 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
   1:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 159               		.loc 2 166 1 view .LVU26
 160               	.LBB5:
 167:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 161               		.loc 2 168 2 view .LVU27
 169:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 162               		.loc 2 172 2 view .LVU28
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 163               		.loc 2 173 2 view .LVU29
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 164               		.loc 2 174 2 view .LVU30
 175:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 165               		.loc 2 184 3 view .LVU31
 185:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 166               		.loc 2 187 2 view .LVU32
 167 0020 8FE3      		ldi r24,lo8(-25537)
 168 0022 9CE9      		ldi r25,hi8(-25537)
 169 0024 0197      	1:	sbiw r24,1
 170 0026 01F4      		brne 1b
 171 0028 00C0      		rjmp .
 172 002a 0000      		nop
 173               	.LVL8:
 174               	/* epilogue start */
 175               		.loc 2 187 2 is_stmt 0 view .LVU33
 176               	.LBE5:
 177               	.LBE4:
  98:quantum/process_keycode/process_unicode_common.c **** }
 178               		.loc 1 98 1 view .LVU34
 179 002c 0895      		ret
 180               	.L8:
  82:quantum/process_keycode/process_unicode_common.c ****             break;
 181               		.loc 1 82 13 is_stmt 1 view .LVU35
 182 002e 82EE      		ldi r24,lo8(-30)
 183 0030 0E94 0000 		call register_code
 184               	.LVL9:
  83:quantum/process_keycode/process_unicode_common.c ****         case UC_LNX:
 185               		.loc 1 83 13 view .LVU36
 186 0034 00C0      		rjmp .L11
 187               	.L7:
  85:quantum/process_keycode/process_unicode_common.c ****             break;
 188               		.loc 1 85 13 view .LVU37
 189 0036 88E1      		ldi r24,lo8(24)
 190 0038 93E0      		ldi r25,lo8(3)
 191 003a 0E94 0000 		call tap_code16
 192               	.LVL10:
  86:quantum/process_keycode/process_unicode_common.c ****         case UC_WIN:
 193               		.loc 1 86 13 view .LVU38
 194 003e 00C0      		rjmp .L11
 195               	.L9:
  88:quantum/process_keycode/process_unicode_common.c ****             tap_code(KC_PPLS);
 196               		.loc 1 88 13 view .LVU39
 197 0040 82EE      		ldi r24,lo8(-30)
 198 0042 0E94 0000 		call register_code
 199               	.LVL11:
  89:quantum/process_keycode/process_unicode_common.c ****             break;
 200               		.loc 1 89 13 view .LVU40
 201 0046 87E5      		ldi r24,lo8(87)
 202               	.L12:
  93:quantum/process_keycode/process_unicode_common.c ****             break;
 203               		.loc 1 93 13 is_stmt 0 view .LVU41
 204 0048 0E94 0000 		call tap_code
 205               	.LVL12:
  94:quantum/process_keycode/process_unicode_common.c ****     }
 206               		.loc 1 94 13 is_stmt 1 view .LVU42
 207 004c 00C0      		rjmp .L11
 208               	.L10:
  92:quantum/process_keycode/process_unicode_common.c ****             tap_code(KC_U);
 209               		.loc 1 92 13 view .LVU43
 210 004e 86EE      		ldi r24,lo8(-26)
 211 0050 0E94 0000 		call tap_code
 212               	.LVL13:
  93:quantum/process_keycode/process_unicode_common.c ****             break;
 213               		.loc 1 93 13 view .LVU44
 214 0054 88E1      		ldi r24,lo8(24)
 215 0056 00C0      		rjmp .L12
 216               		.cfi_endproc
 217               	.LFE114:
 219               		.section	.text.unicode_input_finish,"ax",@progbits
 220               		.weak	unicode_input_finish
 222               	unicode_input_finish:
 223               	.LFB115:
  99:quantum/process_keycode/process_unicode_common.c **** 
 100:quantum/process_keycode/process_unicode_common.c **** __attribute__((weak)) void unicode_input_finish(void) {
 224               		.loc 1 100 55 view -0
 225               		.cfi_startproc
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
 101:quantum/process_keycode/process_unicode_common.c ****     switch (unicode_config.input_mode) {
 230               		.loc 1 101 5 view .LVU46
 231               		.loc 1 101 27 is_stmt 0 view .LVU47
 232 0000 8091 0000 		lds r24,unicode_config
 233               		.loc 1 101 5 view .LVU48
 234 0004 8130      		cpi r24,lo8(1)
 235 0006 01F0      		breq .L14
 236 0008 8823      		tst r24
 237 000a 01F0      		breq .L15
 238 000c 8230      		cpi r24,lo8(2)
 239 000e 01F0      		breq .L15
 240 0010 8430      		cpi r24,lo8(4)
 241 0012 01F0      		breq .L16
 242               	.L17:
 102:quantum/process_keycode/process_unicode_common.c ****         case UC_OSX:
 103:quantum/process_keycode/process_unicode_common.c ****             unregister_code(UNICODE_KEY_OSX);
 104:quantum/process_keycode/process_unicode_common.c ****             break;
 105:quantum/process_keycode/process_unicode_common.c ****         case UC_LNX:
 106:quantum/process_keycode/process_unicode_common.c ****             tap_code(KC_SPC);
 107:quantum/process_keycode/process_unicode_common.c ****             break;
 108:quantum/process_keycode/process_unicode_common.c ****         case UC_WIN:
 109:quantum/process_keycode/process_unicode_common.c ****             unregister_code(KC_LALT);
 110:quantum/process_keycode/process_unicode_common.c ****             break;
 111:quantum/process_keycode/process_unicode_common.c ****         case UC_WINC:
 112:quantum/process_keycode/process_unicode_common.c ****             tap_code(KC_ENTER);
 113:quantum/process_keycode/process_unicode_common.c ****             break;
 114:quantum/process_keycode/process_unicode_common.c ****     }
 115:quantum/process_keycode/process_unicode_common.c **** 
 116:quantum/process_keycode/process_unicode_common.c ****     set_mods(unicode_saved_mods);  // Reregister previously set mods
 243               		.loc 1 116 5 is_stmt 1 view .LVU49
 244 0014 8091 0000 		lds r24,unicode_saved_mods
 245 0018 0C94 0000 		jmp set_mods
 246               	.LVL14:
 247               	.L15:
 103:quantum/process_keycode/process_unicode_common.c ****             break;
 248               		.loc 1 103 13 view .LVU50
 249 001c 82EE      		ldi r24,lo8(-30)
 250 001e 0E94 0000 		call unregister_code
 251               	.LVL15:
 104:quantum/process_keycode/process_unicode_common.c ****         case UC_LNX:
 252               		.loc 1 104 13 view .LVU51
 253 0022 00C0      		rjmp .L17
 254               	.L14:
 106:quantum/process_keycode/process_unicode_common.c ****             break;
 255               		.loc 1 106 13 view .LVU52
 256 0024 8CE2      		ldi r24,lo8(44)
 257               	.L24:
 112:quantum/process_keycode/process_unicode_common.c ****             break;
 258               		.loc 1 112 13 is_stmt 0 view .LVU53
 259 0026 0E94 0000 		call tap_code
 260               	.LVL16:
 113:quantum/process_keycode/process_unicode_common.c ****     }
 261               		.loc 1 113 13 is_stmt 1 view .LVU54
 262 002a 00C0      		rjmp .L17
 263               	.L16:
 112:quantum/process_keycode/process_unicode_common.c ****             break;
 264               		.loc 1 112 13 view .LVU55
 265 002c 88E2      		ldi r24,lo8(40)
 266 002e 00C0      		rjmp .L24
 267               		.cfi_endproc
 268               	.LFE115:
 270               		.section	.text.unicode_input_cancel,"ax",@progbits
 271               		.weak	unicode_input_cancel
 273               	unicode_input_cancel:
 274               	.LFB116:
 117:quantum/process_keycode/process_unicode_common.c **** }
 118:quantum/process_keycode/process_unicode_common.c **** 
 119:quantum/process_keycode/process_unicode_common.c **** __attribute__((weak)) void unicode_input_cancel(void) {
 275               		.loc 1 119 55 view -0
 276               		.cfi_startproc
 277               	/* prologue: function */
 278               	/* frame size = 0 */
 279               	/* stack size = 0 */
 280               	.L__stack_usage = 0
 120:quantum/process_keycode/process_unicode_common.c ****     switch (unicode_config.input_mode) {
 281               		.loc 1 120 5 view .LVU57
 282               		.loc 1 120 27 is_stmt 0 view .LVU58
 283 0000 8091 0000 		lds r24,unicode_config
 284               		.loc 1 120 5 view .LVU59
 285 0004 8130      		cpi r24,lo8(1)
 286 0006 01F0      		breq .L26
 287 0008 8823      		tst r24
 288 000a 01F0      		breq .L27
 289 000c 8230      		cpi r24,lo8(2)
 290 000e 01F0      		breq .L27
 291 0010 8430      		cpi r24,lo8(4)
 292 0012 01F4      		brne .L28
 293               	.L26:
 121:quantum/process_keycode/process_unicode_common.c ****         case UC_OSX:
 122:quantum/process_keycode/process_unicode_common.c ****             unregister_code(UNICODE_KEY_OSX);
 123:quantum/process_keycode/process_unicode_common.c ****             break;
 124:quantum/process_keycode/process_unicode_common.c ****         case UC_LNX:
 125:quantum/process_keycode/process_unicode_common.c ****         case UC_WINC:
 126:quantum/process_keycode/process_unicode_common.c ****             tap_code(KC_ESC);
 294               		.loc 1 126 13 is_stmt 1 view .LVU60
 295 0014 89E2      		ldi r24,lo8(41)
 296 0016 0E94 0000 		call tap_code
 297               	.LVL17:
 127:quantum/process_keycode/process_unicode_common.c ****             break;
 298               		.loc 1 127 13 view .LVU61
 299 001a 00C0      		rjmp .L28
 300               	.L27:
 122:quantum/process_keycode/process_unicode_common.c ****             break;
 301               		.loc 1 122 13 view .LVU62
 302 001c 82EE      		ldi r24,lo8(-30)
 303 001e 0E94 0000 		call unregister_code
 304               	.LVL18:
 123:quantum/process_keycode/process_unicode_common.c ****         case UC_LNX:
 305               		.loc 1 123 13 view .LVU63
 306               	.L28:
 128:quantum/process_keycode/process_unicode_common.c ****         case UC_WIN:
 129:quantum/process_keycode/process_unicode_common.c ****             unregister_code(KC_LALT);
 130:quantum/process_keycode/process_unicode_common.c ****             break;
 131:quantum/process_keycode/process_unicode_common.c ****     }
 132:quantum/process_keycode/process_unicode_common.c **** 
 133:quantum/process_keycode/process_unicode_common.c ****     set_mods(unicode_saved_mods);  // Reregister previously set mods
 307               		.loc 1 133 5 view .LVU64
 308 0022 8091 0000 		lds r24,unicode_saved_mods
 309 0026 0C94 0000 		jmp set_mods
 310               	.LVL19:
 311               		.cfi_endproc
 312               	.LFE116:
 314               		.section	.text.hex_to_keycode,"ax",@progbits
 315               		.weak	hex_to_keycode
 317               	hex_to_keycode:
 318               	.LVL20:
 319               	.LFB117:
 134:quantum/process_keycode/process_unicode_common.c **** }
 135:quantum/process_keycode/process_unicode_common.c **** 
 136:quantum/process_keycode/process_unicode_common.c **** __attribute__((weak)) uint16_t hex_to_keycode(uint8_t hex) {
 320               		.loc 1 136 60 view -0
 321               		.cfi_startproc
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
 137:quantum/process_keycode/process_unicode_common.c ****     if (hex == 0x0) {
 326               		.loc 1 137 5 view .LVU66
 327               		.loc 1 137 8 is_stmt 0 view .LVU67
 328 0000 8823      		tst r24
 329 0002 01F0      		breq .L44
 138:quantum/process_keycode/process_unicode_common.c ****         return KC_0;
 139:quantum/process_keycode/process_unicode_common.c ****     } else if (hex < 0xA) {
 330               		.loc 1 139 12 is_stmt 1 view .LVU68
 331 0004 90E0      		ldi r25,0
 332               		.loc 1 139 15 is_stmt 0 view .LVU69
 333 0006 8A30      		cpi r24,lo8(10)
 334 0008 00F4      		brsh .L43
 140:quantum/process_keycode/process_unicode_common.c ****         return KC_1 + (hex - 0x1);
 335               		.loc 1 140 9 is_stmt 1 view .LVU70
 336               		.loc 1 140 21 is_stmt 0 view .LVU71
 337 000a 4D96      		adiw r24,29
 338               	.LVL21:
 339               		.loc 1 140 21 view .LVU72
 340 000c 0895      		ret
 341               	.LVL22:
 342               	.L43:
 141:quantum/process_keycode/process_unicode_common.c ****     } else {
 142:quantum/process_keycode/process_unicode_common.c ****         return KC_A + (hex - 0xA);
 343               		.loc 1 142 9 is_stmt 1 view .LVU73
 344               		.loc 1 142 21 is_stmt 0 view .LVU74
 345 000e 0697      		sbiw r24,6
 346               	.LVL23:
 347               		.loc 1 142 21 view .LVU75
 348 0010 0895      		ret
 349               	.LVL24:
 350               	.L44:
 138:quantum/process_keycode/process_unicode_common.c ****     } else if (hex < 0xA) {
 351               		.loc 1 138 16 view .LVU76
 352 0012 87E2      		ldi r24,lo8(39)
 353 0014 90E0      		ldi r25,0
 354               	.LVL25:
 355               	/* epilogue start */
 143:quantum/process_keycode/process_unicode_common.c ****     }
 144:quantum/process_keycode/process_unicode_common.c **** }
 356               		.loc 1 144 1 view .LVU77
 357 0016 0895      		ret
 358               		.cfi_endproc
 359               	.LFE117:
 361               		.section	.text.register_hex,"ax",@progbits
 362               	.global	register_hex
 364               	register_hex:
 365               	.LVL26:
 366               	.LFB118:
 145:quantum/process_keycode/process_unicode_common.c **** 
 146:quantum/process_keycode/process_unicode_common.c **** void register_hex(uint16_t hex) {
 367               		.loc 1 146 33 is_stmt 1 view -0
 368               		.cfi_startproc
 369               		.loc 1 146 33 is_stmt 0 view .LVU79
 370 0000 0F93      		push r16
 371               	.LCFI0:
 372               		.cfi_def_cfa_offset 3
 373               		.cfi_offset 16, -2
 374 0002 1F93      		push r17
 375               	.LCFI1:
 376               		.cfi_def_cfa_offset 4
 377               		.cfi_offset 17, -3
 378 0004 CF93      		push r28
 379               	.LCFI2:
 380               		.cfi_def_cfa_offset 5
 381               		.cfi_offset 28, -4
 382 0006 DF93      		push r29
 383               	.LCFI3:
 384               		.cfi_def_cfa_offset 6
 385               		.cfi_offset 29, -5
 386               	/* prologue: function */
 387               	/* frame size = 0 */
 388               	/* stack size = 4 */
 389               	.L__stack_usage = 4
 390 0008 8C01      		movw r16,r24
 147:quantum/process_keycode/process_unicode_common.c ****     for (int i = 3; i >= 0; i--) {
 391               		.loc 1 147 5 is_stmt 1 view .LVU80
 392               	.LBB6:
 393               		.loc 1 147 10 view .LVU81
 394               	.LVL27:
 395               		.loc 1 147 10 is_stmt 0 view .LVU82
 396               	.LBE6:
 146:quantum/process_keycode/process_unicode_common.c ****     for (int i = 3; i >= 0; i--) {
 397               		.loc 1 146 33 view .LVU83
 398 000a CCE0      		ldi r28,lo8(12)
 399 000c D0E0      		ldi r29,0
 400               	.LVL28:
 401               	.L46:
 402               	.LBB8:
 403               	.LBB7:
 148:quantum/process_keycode/process_unicode_common.c ****         uint8_t digit = ((hex >> (i * 4)) & 0xF);
 404               		.loc 1 148 9 is_stmt 1 discriminator 3 view .LVU84
 149:quantum/process_keycode/process_unicode_common.c ****         tap_code(hex_to_keycode(digit));
 405               		.loc 1 149 9 discriminator 3 view .LVU85
 148:quantum/process_keycode/process_unicode_common.c ****         uint8_t digit = ((hex >> (i * 4)) & 0xF);
 406               		.loc 1 148 31 is_stmt 0 discriminator 3 view .LVU86
 407 000e C801      		movw r24,r16
 408 0010 0C2E      		mov r0,r28
 409 0012 00C0      		rjmp 2f
 410               		1:
 411 0014 9695      		lsr r25
 412 0016 8795      		ror r24
 413               		2:
 414 0018 0A94      		dec r0
 415 001a 02F4      		brpl 1b
 416               		.loc 1 149 18 discriminator 3 view .LVU87
 417 001c 8F70      		andi r24,lo8(15)
 418 001e 0E94 0000 		call hex_to_keycode
 419               	.LVL29:
 420               		.loc 1 149 9 discriminator 3 view .LVU88
 421 0022 0E94 0000 		call tap_code
 422               	.LVL30:
 423               		.loc 1 149 9 discriminator 3 view .LVU89
 424 0026 2497      		sbiw r28,4
 425               	.LVL31:
 426               		.loc 1 149 9 discriminator 3 view .LVU90
 427               	.LBE7:
 147:quantum/process_keycode/process_unicode_common.c ****         uint8_t digit = ((hex >> (i * 4)) & 0xF);
 428               		.loc 1 147 5 discriminator 3 view .LVU91
 429 0028 CC3F      		cpi r28,-4
 430 002a 8FEF      		ldi r24,-1
 431 002c D807      		cpc r29,r24
 432 002e 01F4      		brne .L46
 433               	/* epilogue start */
 434               	.LBE8:
 150:quantum/process_keycode/process_unicode_common.c ****     }
 151:quantum/process_keycode/process_unicode_common.c **** }
 435               		.loc 1 151 1 view .LVU92
 436 0030 DF91      		pop r29
 437 0032 CF91      		pop r28
 438               	.LVL32:
 439               		.loc 1 151 1 view .LVU93
 440 0034 1F91      		pop r17
 441 0036 0F91      		pop r16
 442               	.LVL33:
 443               		.loc 1 151 1 view .LVU94
 444 0038 0895      		ret
 445               		.cfi_endproc
 446               	.LFE118:
 448               		.section	.rodata.send_unicode_hex_string.str1.1,"aMS",@progbits,1
 449               	.LC0:
 450 0000 2000      		.string	" "
 451               		.section	.text.send_unicode_hex_string,"ax",@progbits
 452               	.global	send_unicode_hex_string
 454               	send_unicode_hex_string:
 455               	.LVL34:
 456               	.LFB119:
 152:quantum/process_keycode/process_unicode_common.c **** 
 153:quantum/process_keycode/process_unicode_common.c **** void send_unicode_hex_string(const char *str) {
 457               		.loc 1 153 47 is_stmt 1 view -0
 458               		.cfi_startproc
 459               		.loc 1 153 47 is_stmt 0 view .LVU96
 460 0000 6F92      		push r6
 461               	.LCFI4:
 462               		.cfi_def_cfa_offset 3
 463               		.cfi_offset 6, -2
 464 0002 7F92      		push r7
 465               	.LCFI5:
 466               		.cfi_def_cfa_offset 4
 467               		.cfi_offset 7, -3
 468 0004 8F92      		push r8
 469               	.LCFI6:
 470               		.cfi_def_cfa_offset 5
 471               		.cfi_offset 8, -4
 472 0006 9F92      		push r9
 473               	.LCFI7:
 474               		.cfi_def_cfa_offset 6
 475               		.cfi_offset 9, -5
 476 0008 AF92      		push r10
 477               	.LCFI8:
 478               		.cfi_def_cfa_offset 7
 479               		.cfi_offset 10, -6
 480 000a BF92      		push r11
 481               	.LCFI9:
 482               		.cfi_def_cfa_offset 8
 483               		.cfi_offset 11, -7
 484 000c CF92      		push r12
 485               	.LCFI10:
 486               		.cfi_def_cfa_offset 9
 487               		.cfi_offset 12, -8
 488 000e DF92      		push r13
 489               	.LCFI11:
 490               		.cfi_def_cfa_offset 10
 491               		.cfi_offset 13, -9
 492 0010 EF92      		push r14
 493               	.LCFI12:
 494               		.cfi_def_cfa_offset 11
 495               		.cfi_offset 14, -10
 496 0012 FF92      		push r15
 497               	.LCFI13:
 498               		.cfi_def_cfa_offset 12
 499               		.cfi_offset 15, -11
 500 0014 0F93      		push r16
 501               	.LCFI14:
 502               		.cfi_def_cfa_offset 13
 503               		.cfi_offset 16, -12
 504 0016 1F93      		push r17
 505               	.LCFI15:
 506               		.cfi_def_cfa_offset 14
 507               		.cfi_offset 17, -13
 508 0018 CF93      		push r28
 509               	.LCFI16:
 510               		.cfi_def_cfa_offset 15
 511               		.cfi_offset 28, -14
 512 001a DF93      		push r29
 513               	.LCFI17:
 514               		.cfi_def_cfa_offset 16
 515               		.cfi_offset 29, -15
 516 001c CDB7      		in r28,__SP_L__
 517 001e DEB7      		in r29,__SP_H__
 518               	.LCFI18:
 519               		.cfi_def_cfa_register 28
 520               	/* prologue: function */
 521               	/* frame size = 0 */
 522               	/* stack size = 14 */
 523               	.L__stack_usage = 14
 154:quantum/process_keycode/process_unicode_common.c ****     if (!str) {
 155:quantum/process_keycode/process_unicode_common.c ****         return;
 156:quantum/process_keycode/process_unicode_common.c ****     }
 157:quantum/process_keycode/process_unicode_common.c **** 
 158:quantum/process_keycode/process_unicode_common.c ****     while (*str) {
 159:quantum/process_keycode/process_unicode_common.c ****         // Find the next code point (token) in the string
 160:quantum/process_keycode/process_unicode_common.c ****         for (; *str == ' '; str++)
 161:quantum/process_keycode/process_unicode_common.c ****             ;
 162:quantum/process_keycode/process_unicode_common.c ****         size_t n = strcspn(str, " ");  // Length of the current token
 163:quantum/process_keycode/process_unicode_common.c ****         char   code_point[n + 1];
 164:quantum/process_keycode/process_unicode_common.c ****         strncpy(code_point, str, n);
 165:quantum/process_keycode/process_unicode_common.c ****         code_point[n] = '\0';  // Make sure it's null-terminated
 166:quantum/process_keycode/process_unicode_common.c **** 
 167:quantum/process_keycode/process_unicode_common.c ****         // Normalize the code point: make all hex digits lowercase
 168:quantum/process_keycode/process_unicode_common.c ****         for (char *p = code_point; *p; p++) {
 169:quantum/process_keycode/process_unicode_common.c ****             *p = tolower((unsigned char)*p);
 170:quantum/process_keycode/process_unicode_common.c ****         }
 171:quantum/process_keycode/process_unicode_common.c **** 
 172:quantum/process_keycode/process_unicode_common.c ****         // Send the code point as a Unicode input string
 173:quantum/process_keycode/process_unicode_common.c ****         unicode_input_start();
 174:quantum/process_keycode/process_unicode_common.c ****         send_string(code_point);
 175:quantum/process_keycode/process_unicode_common.c ****         unicode_input_finish();
 176:quantum/process_keycode/process_unicode_common.c **** 
 177:quantum/process_keycode/process_unicode_common.c ****         str += n;  // Move to the first ' ' (or '\0') after the current token
 178:quantum/process_keycode/process_unicode_common.c ****     }
 179:quantum/process_keycode/process_unicode_common.c **** }
 524               		.loc 1 179 1 view .LVU97
 525 0020 6DB6      		in r6,__SP_L__
 526 0022 7EB6      		in r7,__SP_H__
 154:quantum/process_keycode/process_unicode_common.c ****     if (!str) {
 527               		.loc 1 154 5 is_stmt 1 view .LVU98
 154:quantum/process_keycode/process_unicode_common.c ****     if (!str) {
 528               		.loc 1 154 8 is_stmt 0 view .LVU99
 529 0024 0097      		sbiw r24,0
 530 0026 01F0      		breq .+2
 531 0028 00C0      		rjmp .L50
 532               	.L48:
 533               		.loc 1 179 1 view .LVU100
 534 002a 0FB6      		in __tmp_reg__,__SREG__
 535 002c F894      		cli
 536 002e 7EBE      		out __SP_H__,r7
 537 0030 0FBE      		out __SREG__,__tmp_reg__
 538 0032 6DBE      		out __SP_L__,r6
 539               	/* epilogue start */
 540 0034 DF91      		pop r29
 541 0036 CF91      		pop r28
 542 0038 1F91      		pop r17
 543 003a 0F91      		pop r16
 544 003c FF90      		pop r15
 545 003e EF90      		pop r14
 546 0040 DF90      		pop r13
 547 0042 CF90      		pop r12
 548 0044 BF90      		pop r11
 549 0046 AF90      		pop r10
 550 0048 9F90      		pop r9
 551 004a 8F90      		pop r8
 552 004c 7F90      		pop r7
 553 004e 6F90      		pop r6
 554 0050 0895      		ret
 555               	.LVL35:
 556               	.L51:
 557               		.loc 1 179 1 view .LVU101
 558 0052 7F01      		movw r14,r30
 559               	.LVL36:
 560               	.LBB9:
 160:quantum/process_keycode/process_unicode_common.c ****             ;
 561               		.loc 1 160 9 discriminator 1 view .LVU102
 562 0054 8191      		ld r24,Z+
 563 0056 8032      		cpi r24,lo8(32)
 564 0058 01F0      		breq .L51
 162:quantum/process_keycode/process_unicode_common.c ****         char   code_point[n + 1];
 565               		.loc 1 162 9 is_stmt 1 view .LVU103
 162:quantum/process_keycode/process_unicode_common.c ****         char   code_point[n + 1];
 566               		.loc 1 162 20 is_stmt 0 view .LVU104
 567 005a 60E0      		ldi r22,lo8(.LC0)
 568 005c 70E0      		ldi r23,hi8(.LC0)
 569 005e C701      		movw r24,r14
 570 0060 0E94 0000 		call strcspn
 571               	.LVL37:
 572 0064 8C01      		movw r16,r24
 573               	.LVL38:
 163:quantum/process_keycode/process_unicode_common.c ****         strncpy(code_point, str, n);
 574               		.loc 1 163 9 is_stmt 1 view .LVU105
 575 0066 8DB6      		in r8,__SP_L__
 576 0068 9EB6      		in r9,__SP_H__
 577               	.LVL39:
 163:quantum/process_keycode/process_unicode_common.c ****         strncpy(code_point, str, n);
 578               		.loc 1 163 29 is_stmt 0 view .LVU106
 579 006a 0196      		adiw r24,1
 163:quantum/process_keycode/process_unicode_common.c ****         strncpy(code_point, str, n);
 580               		.loc 1 163 16 view .LVU107
 581 006c 2DB7      		in r18,__SP_L__
 582 006e 3EB7      		in r19,__SP_H__
 583 0070 281B      		sub r18,r24
 584 0072 390B      		sbc r19,r25
 585 0074 0FB6      		in __tmp_reg__,__SREG__
 586 0076 F894      		cli
 587 0078 3EBF      		out __SP_H__,r19
 588 007a 0FBE      		out __SREG__,__tmp_reg__
 589 007c 2DBF      		out __SP_L__,r18
 590 007e 8DB7      		in r24,__SP_L__
 591 0080 9EB7      		in r25,__SP_H__
 592 0082 0196      		adiw r24,1
 593 0084 6C01      		movw r12,r24
 594               	.LVL40:
 164:quantum/process_keycode/process_unicode_common.c ****         code_point[n] = '\0';  // Make sure it's null-terminated
 595               		.loc 1 164 9 is_stmt 1 view .LVU108
 596 0086 A801      		movw r20,r16
 597 0088 B701      		movw r22,r14
 598 008a 0E94 0000 		call strncpy
 599               	.LVL41:
 165:quantum/process_keycode/process_unicode_common.c **** 
 600               		.loc 1 165 9 view .LVU109
 165:quantum/process_keycode/process_unicode_common.c **** 
 601               		.loc 1 165 23 is_stmt 0 view .LVU110
 602 008e F601      		movw r30,r12
 603 0090 E00F      		add r30,r16
 604 0092 F11F      		adc r31,r17
 605 0094 1082      		st Z,__zero_reg__
 168:quantum/process_keycode/process_unicode_common.c ****             *p = tolower((unsigned char)*p);
 606               		.loc 1 168 9 is_stmt 1 view .LVU111
 607               	.LBB10:
 168:quantum/process_keycode/process_unicode_common.c ****             *p = tolower((unsigned char)*p);
 608               		.loc 1 168 14 view .LVU112
 609               	.LVL42:
 168:quantum/process_keycode/process_unicode_common.c ****             *p = tolower((unsigned char)*p);
 610               		.loc 1 168 14 is_stmt 0 view .LVU113
 611 0096 5601      		movw r10,r12
 612               	.LVL43:
 613               	.L52:
 168:quantum/process_keycode/process_unicode_common.c ****             *p = tolower((unsigned char)*p);
 614               		.loc 1 168 36 discriminator 1 view .LVU114
 615 0098 F501      		movw r30,r10
 616 009a 8191      		ld r24,Z+
 617 009c 5F01      		movw r10,r30
 618               	.LVL44:
 168:quantum/process_keycode/process_unicode_common.c ****             *p = tolower((unsigned char)*p);
 619               		.loc 1 168 9 discriminator 1 view .LVU115
 620 009e 8111      		cpse r24,__zero_reg__
 621 00a0 00C0      		rjmp .L53
 622               	.LBE10:
 173:quantum/process_keycode/process_unicode_common.c ****         send_string(code_point);
 623               		.loc 1 173 9 is_stmt 1 view .LVU116
 624 00a2 0E94 0000 		call unicode_input_start
 625               	.LVL45:
 174:quantum/process_keycode/process_unicode_common.c ****         unicode_input_finish();
 626               		.loc 1 174 9 view .LVU117
 627 00a6 C601      		movw r24,r12
 628 00a8 0E94 0000 		call send_string
 629               	.LVL46:
 175:quantum/process_keycode/process_unicode_common.c **** 
 630               		.loc 1 175 9 view .LVU118
 631 00ac 0E94 0000 		call unicode_input_finish
 632               	.LVL47:
 177:quantum/process_keycode/process_unicode_common.c ****     }
 633               		.loc 1 177 9 view .LVU119
 177:quantum/process_keycode/process_unicode_common.c ****     }
 634               		.loc 1 177 13 is_stmt 0 view .LVU120
 635 00b0 C701      		movw r24,r14
 636 00b2 800F      		add r24,r16
 637 00b4 911F      		adc r25,r17
 638               	.LVL48:
 177:quantum/process_keycode/process_unicode_common.c ****     }
 639               		.loc 1 177 13 view .LVU121
 640 00b6 0FB6      		in __tmp_reg__,__SREG__
 641 00b8 F894      		cli
 642 00ba 9EBE      		out __SP_H__,r9
 643 00bc 0FBE      		out __SREG__,__tmp_reg__
 644 00be 8DBE      		out __SP_L__,r8
 645               	.LVL49:
 646               	.L50:
 177:quantum/process_keycode/process_unicode_common.c ****     }
 647               		.loc 1 177 13 view .LVU122
 648               	.LBE9:
 158:quantum/process_keycode/process_unicode_common.c ****         // Find the next code point (token) in the string
 649               		.loc 1 158 11 view .LVU123
 650 00c0 FC01      		movw r30,r24
 651 00c2 2081      		ld r18,Z
 652 00c4 2111      		cpse r18,__zero_reg__
 653 00c6 00C0      		rjmp .L51
 158:quantum/process_keycode/process_unicode_common.c ****         // Find the next code point (token) in the string
 654               		.loc 1 158 11 view .LVU124
 655 00c8 00C0      		rjmp .L48
 656               	.LVL50:
 657               	.L53:
 658               	.LBB12:
 659               	.LBB11:
 169:quantum/process_keycode/process_unicode_common.c ****         }
 660               		.loc 1 169 13 is_stmt 1 discriminator 3 view .LVU125
 169:quantum/process_keycode/process_unicode_common.c ****         }
 661               		.loc 1 169 18 is_stmt 0 discriminator 3 view .LVU126
 662 00ca 90E0      		ldi r25,0
 663 00cc 0E94 0000 		call tolower
 664               	.LVL51:
 169:quantum/process_keycode/process_unicode_common.c ****         }
 665               		.loc 1 169 16 discriminator 3 view .LVU127
 666 00d0 F501      		movw r30,r10
 667 00d2 3197      		sbiw r30,1
 668 00d4 8083      		st Z,r24
 669               	.LVL52:
 169:quantum/process_keycode/process_unicode_common.c ****         }
 670               		.loc 1 169 16 discriminator 3 view .LVU128
 671 00d6 00C0      		rjmp .L52
 672               	.LBE11:
 673               	.LBE12:
 674               		.cfi_endproc
 675               	.LFE119:
 677               		.section	.text.decode_utf8,"ax",@progbits
 678               	.global	decode_utf8
 680               	decode_utf8:
 681               	.LVL53:
 682               	.LFB120:
 180:quantum/process_keycode/process_unicode_common.c **** 
 181:quantum/process_keycode/process_unicode_common.c **** // Borrowed from https://nullprogram.com/blog/2017/10/06/
 182:quantum/process_keycode/process_unicode_common.c **** const char *decode_utf8(const char *str, int32_t *code_point) {
 683               		.loc 1 182 63 is_stmt 1 view -0
 684               		.cfi_startproc
 685               		.loc 1 182 63 is_stmt 0 view .LVU130
 686 0000 0F93      		push r16
 687               	.LCFI19:
 688               		.cfi_def_cfa_offset 3
 689               		.cfi_offset 16, -2
 690 0002 1F93      		push r17
 691               	.LCFI20:
 692               		.cfi_def_cfa_offset 4
 693               		.cfi_offset 17, -3
 694               	/* prologue: function */
 695               	/* frame size = 0 */
 696               	/* stack size = 2 */
 697               	.L__stack_usage = 2
 698 0004 FC01      		movw r30,r24
 699 0006 DB01      		movw r26,r22
 183:quantum/process_keycode/process_unicode_common.c ****     const char *next;
 700               		.loc 1 183 5 is_stmt 1 view .LVU131
 184:quantum/process_keycode/process_unicode_common.c **** 
 185:quantum/process_keycode/process_unicode_common.c ****     if (str[0] < 0x80) {  // U+0000-007F
 701               		.loc 1 185 5 view .LVU132
 702               		.loc 1 185 12 is_stmt 0 view .LVU133
 703 0008 4081      		ld r20,Z
 186:quantum/process_keycode/process_unicode_common.c ****         *code_point = str[0];
 704               		.loc 1 186 26 view .LVU134
 705 000a 50E0      		ldi r21,0
 706 000c 70E0      		ldi r23,0
 707 000e 60E0      		ldi r22,0
 708               	.LVL54:
 185:quantum/process_keycode/process_unicode_common.c ****         *code_point = str[0];
 709               		.loc 1 185 8 view .LVU135
 710 0010 47FF      		sbrs r20,7
 711 0012 00C0      		rjmp .L69
 187:quantum/process_keycode/process_unicode_common.c ****         next        = str + 1;
 188:quantum/process_keycode/process_unicode_common.c ****     } else if ((str[0] & 0xE0) == 0xC0) {  // U+0080-07FF
 712               		.loc 1 188 12 is_stmt 1 view .LVU136
 713               		.loc 1 188 15 is_stmt 0 view .LVU137
 714 0014 842F      		mov r24,r20
 715               	.LVL55:
 716               		.loc 1 188 15 view .LVU138
 717 0016 807E      		andi r24,lo8(-32)
 718 0018 803C      		cpi r24,lo8(-64)
 719 001a 01F4      		brne .L65
 189:quantum/process_keycode/process_unicode_common.c ****         *code_point = ((int32_t)(str[0] & 0x1F) << 6) | ((int32_t)(str[1] & 0x3F) << 0);
 720               		.loc 1 189 9 is_stmt 1 view .LVU139
 721               		.loc 1 189 41 is_stmt 0 view .LVU140
 722 001c 50E0      		ldi r21,0
 723 001e 70E0      		ldi r23,0
 724 0020 60E0      		ldi r22,0
 725               		.loc 1 189 49 view .LVU141
 726 0022 26E0      		ldi r18,6
 727               		1:
 728 0024 440F      		lsl r20
 729 0026 551F      		rol r21
 730 0028 661F      		rol r22
 731 002a 771F      		rol r23
 732 002c 2A95      		dec r18
 733 002e 01F4      		brne 1b
 734 0030 407C      		andi r20,192
 735 0032 5770      		andi r21,7
 736 0034 6627      		clr r22
 737 0036 7727      		clr r23
 738               		.loc 1 189 83 view .LVU142
 739 0038 8181      		ldd r24,Z+1
 740 003a 8F73      		andi r24,lo8(63)
 741               		.loc 1 189 55 view .LVU143
 742 003c 482B      		or r20,r24
 743               		.loc 1 189 21 view .LVU144
 744 003e 4D93      		st X+,r20
 745 0040 5D93      		st X+,r21
 746 0042 6D93      		st X+,r22
 747 0044 7C93      		st X,r23
 748 0046 1397      		sbiw r26,3
 190:quantum/process_keycode/process_unicode_common.c ****         next        = str + 2;
 749               		.loc 1 190 9 is_stmt 1 view .LVU145
 750               		.loc 1 190 21 is_stmt 0 view .LVU146
 751 0048 3296      		adiw r30,2
 752               	.LVL56:
 753               	.L64:
 191:quantum/process_keycode/process_unicode_common.c ****     } else if ((str[0] & 0xF0) == 0xE0) {  // U+0800-FFFF
 192:quantum/process_keycode/process_unicode_common.c ****         *code_point = ((int32_t)(str[0] & 0x0F) << 12) | ((int32_t)(str[1] & 0x3F) << 6) | ((int32_
 193:quantum/process_keycode/process_unicode_common.c ****         next        = str + 3;
 194:quantum/process_keycode/process_unicode_common.c ****     } else if ((str[0] & 0xF8) == 0xF0 && (str[0] <= 0xF4)) {  // U+10000-10FFFF
 195:quantum/process_keycode/process_unicode_common.c ****         // Skip for now - register_hex() only takes a uint16
 196:quantum/process_keycode/process_unicode_common.c ****         //*code_point = ((int32_t)(str[0] & 0x07) << 18) | ((int32_t)(str[1] & 0x3F) << 12) | ((int
 197:quantum/process_keycode/process_unicode_common.c ****         *code_point = -1;
 198:quantum/process_keycode/process_unicode_common.c ****         next        = str + 4;
 199:quantum/process_keycode/process_unicode_common.c ****     } else {
 200:quantum/process_keycode/process_unicode_common.c ****         *code_point = -1;
 201:quantum/process_keycode/process_unicode_common.c ****         next        = str + 1;
 202:quantum/process_keycode/process_unicode_common.c ****     }
 203:quantum/process_keycode/process_unicode_common.c **** 
 204:quantum/process_keycode/process_unicode_common.c ****     // part of a UTF-16 surrogate pair - invalid
 205:quantum/process_keycode/process_unicode_common.c ****     if (*code_point >= 0xD800 && *code_point <= 0xDFFF) {
 754               		.loc 1 205 5 is_stmt 1 view .LVU147
 755               		.loc 1 205 31 is_stmt 0 view .LVU148
 756 004a 4D91      		ld r20,X+
 757 004c 5D91      		ld r21,X+
 758 004e 6D91      		ld r22,X+
 759 0050 7C91      		ld r23,X
 760 0052 1397      		sbiw r26,3
 761 0054 585D      		subi r21,-40
 762 0056 6109      		sbc r22,__zero_reg__
 763 0058 7109      		sbc r23,__zero_reg__
 764               		.loc 1 205 8 view .LVU149
 765 005a 4115      		cp r20,__zero_reg__
 766 005c 5840      		sbci r21,8
 767 005e 6105      		cpc r22,__zero_reg__
 768 0060 7105      		cpc r23,__zero_reg__
 769 0062 00F4      		brsh .L62
 206:quantum/process_keycode/process_unicode_common.c ****         *code_point = -1;
 770               		.loc 1 206 9 is_stmt 1 view .LVU150
 771               		.loc 1 206 21 is_stmt 0 view .LVU151
 772 0064 4FEF      		ldi r20,lo8(-1)
 773 0066 5FEF      		ldi r21,lo8(-1)
 774 0068 BA01      		movw r22,r20
 775 006a 4D93      		st X+,r20
 776 006c 5D93      		st X+,r21
 777 006e 6D93      		st X+,r22
 778 0070 7C93      		st X,r23
 779 0072 1397      		sbiw r26,3
 207:quantum/process_keycode/process_unicode_common.c ****     }
 208:quantum/process_keycode/process_unicode_common.c **** 
 209:quantum/process_keycode/process_unicode_common.c ****     return next;
 780               		.loc 1 209 5 is_stmt 1 view .LVU152
 781               	.L62:
 210:quantum/process_keycode/process_unicode_common.c **** }
 782               		.loc 1 210 1 is_stmt 0 view .LVU153
 783 0074 CF01      		movw r24,r30
 784               	/* epilogue start */
 785 0076 1F91      		pop r17
 786 0078 0F91      		pop r16
 787 007a 0895      		ret
 788               	.LVL57:
 789               	.L65:
 191:quantum/process_keycode/process_unicode_common.c ****         *code_point = ((int32_t)(str[0] & 0x0F) << 12) | ((int32_t)(str[1] & 0x3F) << 6) | ((int32_
 790               		.loc 1 191 12 is_stmt 1 view .LVU154
 191:quantum/process_keycode/process_unicode_common.c ****         *code_point = ((int32_t)(str[0] & 0x0F) << 12) | ((int32_t)(str[1] & 0x3F) << 6) | ((int32_
 791               		.loc 1 191 15 is_stmt 0 view .LVU155
 792 007c 842F      		mov r24,r20
 793 007e 807F      		andi r24,lo8(-16)
 794 0080 803E      		cpi r24,lo8(-32)
 795 0082 01F4      		brne .L66
 192:quantum/process_keycode/process_unicode_common.c ****         next        = str + 3;
 796               		.loc 1 192 9 is_stmt 1 view .LVU156
 192:quantum/process_keycode/process_unicode_common.c ****         next        = str + 3;
 797               		.loc 1 192 76 is_stmt 0 view .LVU157
 798 0084 0181      		ldd r16,Z+1
 799 0086 10E0      		ldi r17,0
 800 0088 30E0      		ldi r19,0
 801 008a 20E0      		ldi r18,0
 192:quantum/process_keycode/process_unicode_common.c ****         next        = str + 3;
 802               		.loc 1 192 84 view .LVU158
 803 008c 86E0      		ldi r24,6
 804               		1:
 805 008e 000F      		lsl r16
 806 0090 111F      		rol r17
 807 0092 221F      		rol r18
 808 0094 331F      		rol r19
 809 0096 8A95      		dec r24
 810 0098 01F4      		brne 1b
 811 009a 007C      		andi r16,192
 812 009c 1F70      		andi r17,15
 813 009e 2227      		clr r18
 814 00a0 3327      		clr r19
 192:quantum/process_keycode/process_unicode_common.c ****         next        = str + 3;
 815               		.loc 1 192 41 view .LVU159
 816 00a2 50E0      		ldi r21,0
 817 00a4 70E0      		ldi r23,0
 818 00a6 60E0      		ldi r22,0
 192:quantum/process_keycode/process_unicode_common.c ****         next        = str + 3;
 819               		.loc 1 192 49 view .LVU160
 820 00a8 9CE0      		ldi r25,12
 821               		1:
 822 00aa 440F      		lsl r20
 823 00ac 551F      		rol r21
 824 00ae 661F      		rol r22
 825 00b0 771F      		rol r23
 826 00b2 9A95      		dec r25
 827 00b4 01F4      		brne 1b
 828 00b6 6627      		clr r22
 829 00b8 7727      		clr r23
 192:quantum/process_keycode/process_unicode_common.c ****         next        = str + 3;
 830               		.loc 1 192 56 view .LVU161
 831 00ba 402B      		or r20,r16
 832 00bc 512B      		or r21,r17
 833 00be 622B      		or r22,r18
 834 00c0 732B      		or r23,r19
 192:quantum/process_keycode/process_unicode_common.c ****         next        = str + 3;
 835               		.loc 1 192 118 view .LVU162
 836 00c2 8281      		ldd r24,Z+2
 837 00c4 8F73      		andi r24,lo8(63)
 192:quantum/process_keycode/process_unicode_common.c ****         next        = str + 3;
 838               		.loc 1 192 90 view .LVU163
 839 00c6 482B      		or r20,r24
 192:quantum/process_keycode/process_unicode_common.c ****         next        = str + 3;
 840               		.loc 1 192 21 view .LVU164
 841 00c8 4D93      		st X+,r20
 842 00ca 5D93      		st X+,r21
 843 00cc 6D93      		st X+,r22
 844 00ce 7C93      		st X,r23
 845 00d0 1397      		sbiw r26,3
 193:quantum/process_keycode/process_unicode_common.c ****     } else if ((str[0] & 0xF8) == 0xF0 && (str[0] <= 0xF4)) {  // U+10000-10FFFF
 846               		.loc 1 193 9 is_stmt 1 view .LVU165
 193:quantum/process_keycode/process_unicode_common.c ****     } else if ((str[0] & 0xF8) == 0xF0 && (str[0] <= 0xF4)) {  // U+10000-10FFFF
 847               		.loc 1 193 21 is_stmt 0 view .LVU166
 848 00d2 3396      		adiw r30,3
 849               	.LVL58:
 193:quantum/process_keycode/process_unicode_common.c ****     } else if ((str[0] & 0xF8) == 0xF0 && (str[0] <= 0xF4)) {  // U+10000-10FFFF
 850               		.loc 1 193 21 view .LVU167
 851 00d4 00C0      		rjmp .L64
 852               	.LVL59:
 853               	.L66:
 194:quantum/process_keycode/process_unicode_common.c ****         // Skip for now - register_hex() only takes a uint16
 854               		.loc 1 194 12 is_stmt 1 view .LVU168
 194:quantum/process_keycode/process_unicode_common.c ****         // Skip for now - register_hex() only takes a uint16
 855               		.loc 1 194 15 is_stmt 0 view .LVU169
 856 00d6 842F      		mov r24,r20
 857 00d8 887F      		andi r24,lo8(-8)
 858 00da 803F      		cpi r24,lo8(-16)
 859 00dc 01F4      		brne .L67
 194:quantum/process_keycode/process_unicode_common.c ****         // Skip for now - register_hex() only takes a uint16
 860               		.loc 1 194 40 discriminator 1 view .LVU170
 861 00de 453F      		cpi r20,lo8(-11)
 862 00e0 00F4      		brsh .L67
 197:quantum/process_keycode/process_unicode_common.c ****         next        = str + 4;
 863               		.loc 1 197 9 is_stmt 1 view .LVU171
 197:quantum/process_keycode/process_unicode_common.c ****         next        = str + 4;
 864               		.loc 1 197 21 is_stmt 0 view .LVU172
 865 00e2 4FEF      		ldi r20,lo8(-1)
 866 00e4 5FEF      		ldi r21,lo8(-1)
 867 00e6 BA01      		movw r22,r20
 868 00e8 4D93      		st X+,r20
 869 00ea 5D93      		st X+,r21
 870 00ec 6D93      		st X+,r22
 871 00ee 7C93      		st X,r23
 872 00f0 1397      		sbiw r26,3
 198:quantum/process_keycode/process_unicode_common.c ****     } else {
 873               		.loc 1 198 9 is_stmt 1 view .LVU173
 198:quantum/process_keycode/process_unicode_common.c ****     } else {
 874               		.loc 1 198 21 is_stmt 0 view .LVU174
 875 00f2 3496      		adiw r30,4
 876               	.LVL60:
 198:quantum/process_keycode/process_unicode_common.c ****     } else {
 877               		.loc 1 198 21 view .LVU175
 878 00f4 00C0      		rjmp .L64
 879               	.LVL61:
 880               	.L67:
 200:quantum/process_keycode/process_unicode_common.c ****         next        = str + 1;
 881               		.loc 1 200 9 is_stmt 1 view .LVU176
 200:quantum/process_keycode/process_unicode_common.c ****         next        = str + 1;
 882               		.loc 1 200 21 is_stmt 0 view .LVU177
 883 00f6 4FEF      		ldi r20,lo8(-1)
 884 00f8 5FEF      		ldi r21,lo8(-1)
 885 00fa BA01      		movw r22,r20
 886               	.L69:
 887 00fc 4D93      		st X+,r20
 888 00fe 5D93      		st X+,r21
 889 0100 6D93      		st X+,r22
 890 0102 7C93      		st X,r23
 891 0104 1397      		sbiw r26,3
 201:quantum/process_keycode/process_unicode_common.c ****     }
 892               		.loc 1 201 9 is_stmt 1 view .LVU178
 201:quantum/process_keycode/process_unicode_common.c ****     }
 893               		.loc 1 201 21 is_stmt 0 view .LVU179
 894 0106 3196      		adiw r30,1
 895               	.LVL62:
 201:quantum/process_keycode/process_unicode_common.c ****     }
 896               		.loc 1 201 21 view .LVU180
 897 0108 00C0      		rjmp .L64
 898               		.cfi_endproc
 899               	.LFE120:
 901               		.section	.text.send_unicode_string,"ax",@progbits
 902               	.global	send_unicode_string
 904               	send_unicode_string:
 905               	.LVL63:
 906               	.LFB121:
 211:quantum/process_keycode/process_unicode_common.c **** 
 212:quantum/process_keycode/process_unicode_common.c **** void send_unicode_string(const char *str) {
 907               		.loc 1 212 43 is_stmt 1 view -0
 908               		.cfi_startproc
 909               		.loc 1 212 43 is_stmt 0 view .LVU182
 910 0000 0F93      		push r16
 911               	.LCFI21:
 912               		.cfi_def_cfa_offset 3
 913               		.cfi_offset 16, -2
 914 0002 1F93      		push r17
 915               	.LCFI22:
 916               		.cfi_def_cfa_offset 4
 917               		.cfi_offset 17, -3
 918 0004 CF93      		push r28
 919               	.LCFI23:
 920               		.cfi_def_cfa_offset 5
 921               		.cfi_offset 28, -4
 922 0006 DF93      		push r29
 923               	.LCFI24:
 924               		.cfi_def_cfa_offset 6
 925               		.cfi_offset 29, -5
 926 0008 00D0      		rcall .
 927 000a 00D0      		rcall .
 928               	.LCFI25:
 929               		.cfi_def_cfa_offset 10
 930 000c CDB7      		in r28,__SP_L__
 931 000e DEB7      		in r29,__SP_H__
 932               	.LCFI26:
 933               		.cfi_def_cfa_register 28
 934               	/* prologue: function */
 935               	/* frame size = 4 */
 936               	/* stack size = 8 */
 937               	.L__stack_usage = 8
 938 0010 8C01      		movw r16,r24
 213:quantum/process_keycode/process_unicode_common.c ****     if (!str) {
 939               		.loc 1 213 5 is_stmt 1 view .LVU183
 940               		.loc 1 213 8 is_stmt 0 view .LVU184
 941 0012 892B      		or r24,r25
 942 0014 01F0      		breq .L70
 214:quantum/process_keycode/process_unicode_common.c ****         return;
 215:quantum/process_keycode/process_unicode_common.c ****     }
 216:quantum/process_keycode/process_unicode_common.c **** 
 217:quantum/process_keycode/process_unicode_common.c ****     int32_t code_point = 0;
 943               		.loc 1 217 5 is_stmt 1 view .LVU185
 944               		.loc 1 217 13 is_stmt 0 view .LVU186
 945 0016 1982      		std Y+1,__zero_reg__
 946 0018 1A82      		std Y+2,__zero_reg__
 947 001a 1B82      		std Y+3,__zero_reg__
 948 001c 1C82      		std Y+4,__zero_reg__
 218:quantum/process_keycode/process_unicode_common.c **** 
 219:quantum/process_keycode/process_unicode_common.c ****     while (*str) {
 949               		.loc 1 219 5 is_stmt 1 view .LVU187
 950               	.LVL64:
 951               	.L72:
 952               		.loc 1 219 11 is_stmt 0 view .LVU188
 953 001e F801      		movw r30,r16
 954 0020 8081      		ld r24,Z
 955 0022 8111      		cpse r24,__zero_reg__
 956 0024 00C0      		rjmp .L74
 957               	.L70:
 958               	/* epilogue start */
 220:quantum/process_keycode/process_unicode_common.c ****         str = decode_utf8(str, &code_point);
 221:quantum/process_keycode/process_unicode_common.c **** 
 222:quantum/process_keycode/process_unicode_common.c ****         if (code_point >= 0) {
 223:quantum/process_keycode/process_unicode_common.c ****             unicode_input_start();
 224:quantum/process_keycode/process_unicode_common.c ****             register_hex(code_point);
 225:quantum/process_keycode/process_unicode_common.c ****             unicode_input_finish();
 226:quantum/process_keycode/process_unicode_common.c ****         }
 227:quantum/process_keycode/process_unicode_common.c ****     }
 228:quantum/process_keycode/process_unicode_common.c **** }
 959               		.loc 1 228 1 view .LVU189
 960 0026 0F90      		pop __tmp_reg__
 961 0028 0F90      		pop __tmp_reg__
 962 002a 0F90      		pop __tmp_reg__
 963 002c 0F90      		pop __tmp_reg__
 964 002e DF91      		pop r29
 965 0030 CF91      		pop r28
 966 0032 1F91      		pop r17
 967 0034 0F91      		pop r16
 968               	.LVL65:
 969               		.loc 1 228 1 view .LVU190
 970 0036 0895      		ret
 971               	.LVL66:
 972               	.L74:
 220:quantum/process_keycode/process_unicode_common.c ****         str = decode_utf8(str, &code_point);
 973               		.loc 1 220 9 is_stmt 1 view .LVU191
 220:quantum/process_keycode/process_unicode_common.c ****         str = decode_utf8(str, &code_point);
 974               		.loc 1 220 15 is_stmt 0 view .LVU192
 975 0038 BE01      		movw r22,r28
 976 003a 6F5F      		subi r22,-1
 977 003c 7F4F      		sbci r23,-1
 978 003e C801      		movw r24,r16
 979 0040 0E94 0000 		call decode_utf8
 980               	.LVL67:
 981 0044 8C01      		movw r16,r24
 982               	.LVL68:
 222:quantum/process_keycode/process_unicode_common.c ****             unicode_input_start();
 983               		.loc 1 222 9 is_stmt 1 view .LVU193
 222:quantum/process_keycode/process_unicode_common.c ****             unicode_input_start();
 984               		.loc 1 222 12 is_stmt 0 view .LVU194
 985 0046 8981      		ldd r24,Y+1
 986 0048 9A81      		ldd r25,Y+2
 987 004a AB81      		ldd r26,Y+3
 988 004c BC81      		ldd r27,Y+4
 989 004e B7FD      		sbrc r27,7
 990 0050 00C0      		rjmp .L72
 223:quantum/process_keycode/process_unicode_common.c ****             register_hex(code_point);
 991               		.loc 1 223 13 is_stmt 1 view .LVU195
 992 0052 0E94 0000 		call unicode_input_start
 993               	.LVL69:
 224:quantum/process_keycode/process_unicode_common.c ****             unicode_input_finish();
 994               		.loc 1 224 13 view .LVU196
 995 0056 8981      		ldd r24,Y+1
 996 0058 9A81      		ldd r25,Y+2
 997 005a 0E94 0000 		call register_hex
 998               	.LVL70:
 225:quantum/process_keycode/process_unicode_common.c ****         }
 999               		.loc 1 225 13 view .LVU197
 1000 005e 0E94 0000 		call unicode_input_finish
 1001               	.LVL71:
 1002 0062 00C0      		rjmp .L72
 1003               		.cfi_endproc
 1004               	.LFE121:
 1006               		.section	.text.process_unicode_common,"ax",@progbits
 1007               	.global	process_unicode_common
 1009               	process_unicode_common:
 1010               	.LVL72:
 1011               	.LFB122:
 229:quantum/process_keycode/process_unicode_common.c **** 
 230:quantum/process_keycode/process_unicode_common.c **** bool process_unicode_common(uint16_t keycode, keyrecord_t *record) {
 1012               		.loc 1 230 68 view -0
 1013               		.cfi_startproc
 1014               		.loc 1 230 68 is_stmt 0 view .LVU199
 1015 0000 0F93      		push r16
 1016               	.LCFI27:
 1017               		.cfi_def_cfa_offset 3
 1018               		.cfi_offset 16, -2
 1019 0002 1F93      		push r17
 1020               	.LCFI28:
 1021               		.cfi_def_cfa_offset 4
 1022               		.cfi_offset 17, -3
 1023 0004 CF93      		push r28
 1024               	.LCFI29:
 1025               		.cfi_def_cfa_offset 5
 1026               		.cfi_offset 28, -4
 1027 0006 DF93      		push r29
 1028               	.LCFI30:
 1029               		.cfi_def_cfa_offset 6
 1030               		.cfi_offset 29, -5
 1031               	/* prologue: function */
 1032               	/* frame size = 0 */
 1033               	/* stack size = 4 */
 1034               	.L__stack_usage = 4
 1035 0008 EC01      		movw r28,r24
 1036 000a 8B01      		movw r16,r22
 231:quantum/process_keycode/process_unicode_common.c ****     if (record->event.pressed) {
 1037               		.loc 1 231 5 is_stmt 1 view .LVU200
 1038               		.loc 1 231 8 is_stmt 0 view .LVU201
 1039 000c FB01      		movw r30,r22
 1040 000e 8281      		ldd r24,Z+2
 1041               	.LVL73:
 1042               		.loc 1 231 8 view .LVU202
 1043 0010 8823      		tst r24
 1044 0012 01F0      		breq .L77
 232:quantum/process_keycode/process_unicode_common.c ****         switch (keycode) {
 1045               		.loc 1 232 9 is_stmt 1 view .LVU203
 1046 0014 C33E      		cpi r28,-29
 1047 0016 FCE5      		ldi r31,92
 1048 0018 DF07      		cpc r29,r31
 1049 001a 01F0      		breq .L78
 1050 001c 00F4      		brsh .L79
 1051 001e C13E      		cpi r28,-31
 1052 0020 ECE5      		ldi r30,92
 1053 0022 DE07      		cpc r29,r30
 1054 0024 01F0      		breq .L80
 1055               	.LBB23:
 1056               	.LBB24:
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 1057               		.loc 1 58 31 is_stmt 0 view .LVU204
 1058 0026 81E0      		ldi r24,lo8(1)
 1059               	.LBE24:
 1060               	.LBE23:
 1061               		.loc 1 232 9 view .LVU205
 1062 0028 C23E      		cpi r28,-30
 1063 002a FCE5      		ldi r31,92
 1064 002c DF07      		cpc r29,r31
 1065 002e 01F0      		breq .L87
 1066               	.LVL74:
 1067               	.L77:
 233:quantum/process_keycode/process_unicode_common.c ****             case UNICODE_MODE_FORWARD:
 234:quantum/process_keycode/process_unicode_common.c ****                 cycle_unicode_input_mode(+1);
 235:quantum/process_keycode/process_unicode_common.c ****                 break;
 236:quantum/process_keycode/process_unicode_common.c ****             case UNICODE_MODE_REVERSE:
 237:quantum/process_keycode/process_unicode_common.c ****                 cycle_unicode_input_mode(-1);
 238:quantum/process_keycode/process_unicode_common.c ****                 break;
 239:quantum/process_keycode/process_unicode_common.c **** 
 240:quantum/process_keycode/process_unicode_common.c ****             case UNICODE_MODE_OSX:
 241:quantum/process_keycode/process_unicode_common.c ****                 set_unicode_input_mode(UC_OSX);
 242:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_OSX)
 243:quantum/process_keycode/process_unicode_common.c ****                 static float song_osx[][2] = UNICODE_SONG_OSX;
 244:quantum/process_keycode/process_unicode_common.c ****                 PLAY_SONG(song_osx);
 245:quantum/process_keycode/process_unicode_common.c **** #endif
 246:quantum/process_keycode/process_unicode_common.c ****                 break;
 247:quantum/process_keycode/process_unicode_common.c ****             case UNICODE_MODE_LNX:
 248:quantum/process_keycode/process_unicode_common.c ****                 set_unicode_input_mode(UC_LNX);
 249:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_LNX)
 250:quantum/process_keycode/process_unicode_common.c ****                 static float song_lnx[][2] = UNICODE_SONG_LNX;
 251:quantum/process_keycode/process_unicode_common.c ****                 PLAY_SONG(song_lnx);
 252:quantum/process_keycode/process_unicode_common.c **** #endif
 253:quantum/process_keycode/process_unicode_common.c ****                 break;
 254:quantum/process_keycode/process_unicode_common.c ****             case UNICODE_MODE_WIN:
 255:quantum/process_keycode/process_unicode_common.c ****                 set_unicode_input_mode(UC_WIN);
 256:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_WIN)
 257:quantum/process_keycode/process_unicode_common.c ****                 static float song_win[][2] = UNICODE_SONG_WIN;
 258:quantum/process_keycode/process_unicode_common.c ****                 PLAY_SONG(song_win);
 259:quantum/process_keycode/process_unicode_common.c **** #endif
 260:quantum/process_keycode/process_unicode_common.c ****                 break;
 261:quantum/process_keycode/process_unicode_common.c ****             case UNICODE_MODE_BSD:
 262:quantum/process_keycode/process_unicode_common.c ****                 set_unicode_input_mode(UC_BSD);
 263:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_BSD)
 264:quantum/process_keycode/process_unicode_common.c ****                 static float song_bsd[][2] = UNICODE_SONG_BSD;
 265:quantum/process_keycode/process_unicode_common.c ****                 PLAY_SONG(song_bsd);
 266:quantum/process_keycode/process_unicode_common.c **** #endif
 267:quantum/process_keycode/process_unicode_common.c ****                 break;
 268:quantum/process_keycode/process_unicode_common.c ****             case UNICODE_MODE_WINC:
 269:quantum/process_keycode/process_unicode_common.c ****                 set_unicode_input_mode(UC_WINC);
 270:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_WINC)
 271:quantum/process_keycode/process_unicode_common.c ****                 static float song_winc[][2] = UNICODE_SONG_WINC;
 272:quantum/process_keycode/process_unicode_common.c ****                 PLAY_SONG(song_winc);
 273:quantum/process_keycode/process_unicode_common.c **** #endif
 274:quantum/process_keycode/process_unicode_common.c ****                 break;
 275:quantum/process_keycode/process_unicode_common.c ****         }
 276:quantum/process_keycode/process_unicode_common.c ****     }
 277:quantum/process_keycode/process_unicode_common.c **** #if defined(UNICODE_ENABLE)
 278:quantum/process_keycode/process_unicode_common.c ****     return process_unicode(keycode, record);
 1068               		.loc 1 278 5 is_stmt 1 view .LVU206
 1069               		.loc 1 278 12 is_stmt 0 view .LVU207
 1070 0030 B801      		movw r22,r16
 1071 0032 CE01      		movw r24,r28
 1072               	/* epilogue start */
 279:quantum/process_keycode/process_unicode_common.c **** #elif defined(UNICODEMAP_ENABLE)
 280:quantum/process_keycode/process_unicode_common.c ****     return process_unicodemap(keycode, record);
 281:quantum/process_keycode/process_unicode_common.c **** #elif defined(UCIS_ENABLE)
 282:quantum/process_keycode/process_unicode_common.c ****     return process_ucis(keycode, record);
 283:quantum/process_keycode/process_unicode_common.c **** #else
 284:quantum/process_keycode/process_unicode_common.c ****     return true;
 285:quantum/process_keycode/process_unicode_common.c **** #endif
 286:quantum/process_keycode/process_unicode_common.c **** }
 1073               		.loc 1 286 1 view .LVU208
 1074 0034 DF91      		pop r29
 1075 0036 CF91      		pop r28
 1076               	.LVL75:
 1077               		.loc 1 286 1 view .LVU209
 1078 0038 1F91      		pop r17
 1079 003a 0F91      		pop r16
 1080               	.LVL76:
 278:quantum/process_keycode/process_unicode_common.c **** #elif defined(UNICODEMAP_ENABLE)
 1081               		.loc 1 278 12 view .LVU210
 1082 003c 0C94 0000 		jmp process_unicode
 1083               	.LVL77:
 1084               	.L79:
 232:quantum/process_keycode/process_unicode_common.c ****             case UNICODE_MODE_FORWARD:
 1085               		.loc 1 232 9 view .LVU211
 1086 0040 C43E      		cpi r28,-28
 1087 0042 8CE5      		ldi r24,92
 1088 0044 D807      		cpc r29,r24
 1089 0046 01F0      		breq .L82
 1090               	.LBB25:
 1091               	.LBB26:
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 1092               		.loc 1 58 31 view .LVU212
 1093 0048 84E0      		ldi r24,lo8(4)
 1094               	.LBE26:
 1095               	.LBE25:
 232:quantum/process_keycode/process_unicode_common.c ****             case UNICODE_MODE_FORWARD:
 1096               		.loc 1 232 9 view .LVU213
 1097 004a C53E      		cpi r28,-27
 1098 004c ECE5      		ldi r30,92
 1099 004e DE07      		cpc r29,r30
 1100 0050 01F4      		brne .L77
 1101               	.L87:
 1102               	.LBB29:
 1103               	.LBB27:
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 1104               		.loc 1 58 31 view .LVU214
 1105 0052 8093 0000 		sts unicode_config,r24
 1106 0056 00C0      		rjmp .L88
 1107               	.L80:
 1108               	.LBE27:
 1109               	.LBE29:
 241:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_OSX)
 1110               		.loc 1 241 17 is_stmt 1 view .LVU215
 1111               	.LVL78:
 1112               	.LBB30:
 1113               	.LBI30:
  57:quantum/process_keycode/process_unicode_common.c ****     unicode_config.input_mode = mode;
 1114               		.loc 1 57 6 view .LVU216
 1115               	.LBB31:
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 1116               		.loc 1 58 5 view .LVU217
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 1117               		.loc 1 58 31 is_stmt 0 view .LVU218
 1118 0058 1092 0000 		sts unicode_config,__zero_reg__
  59:quantum/process_keycode/process_unicode_common.c ****     dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
 1119               		.loc 1 59 5 is_stmt 1 view .LVU219
 1120               	.LVL79:
 1121               	.L88:
  59:quantum/process_keycode/process_unicode_common.c ****     dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
 1122               		.loc 1 59 5 is_stmt 0 view .LVU220
 1123               	.LBE31:
 1124               	.LBE30:
 1125               	.LBB32:
 1126               	.LBB28:
  59:quantum/process_keycode/process_unicode_common.c ****     dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
 1127               		.loc 1 59 5 is_stmt 1 view .LVU221
 1128 005c 0E94 0000 		call persist_unicode_input_mode
 1129               	.LVL80:
  60:quantum/process_keycode/process_unicode_common.c **** }
 1130               		.loc 1 60 74 view .LVU222
 1131 0060 00C0      		rjmp .L77
 1132               	.L78:
  60:quantum/process_keycode/process_unicode_common.c **** }
 1133               		.loc 1 60 74 is_stmt 0 view .LVU223
 1134               	.LBE28:
 1135               	.LBE32:
 255:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_WIN)
 1136               		.loc 1 255 17 is_stmt 1 view .LVU224
 1137               	.LVL81:
 1138               	.LBB33:
 1139               	.LBI33:
  57:quantum/process_keycode/process_unicode_common.c ****     unicode_config.input_mode = mode;
 1140               		.loc 1 57 6 view .LVU225
 1141               	.LBB34:
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 1142               		.loc 1 58 5 view .LVU226
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 1143               		.loc 1 58 31 is_stmt 0 view .LVU227
 1144 0062 82E0      		ldi r24,lo8(2)
 1145 0064 00C0      		rjmp .L87
 1146               	.LVL82:
 1147               	.L82:
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 1148               		.loc 1 58 31 view .LVU228
 1149               	.LBE34:
 1150               	.LBE33:
 262:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_BSD)
 1151               		.loc 1 262 17 is_stmt 1 view .LVU229
 1152               	.LBB35:
 1153               	.LBI35:
  57:quantum/process_keycode/process_unicode_common.c ****     unicode_config.input_mode = mode;
 1154               		.loc 1 57 6 view .LVU230
 1155               	.LBB36:
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 1156               		.loc 1 58 5 view .LVU231
  58:quantum/process_keycode/process_unicode_common.c ****     persist_unicode_input_mode();
 1157               		.loc 1 58 31 is_stmt 0 view .LVU232
 1158 0066 83E0      		ldi r24,lo8(3)
 1159 0068 00C0      		rjmp .L87
 1160               	.LBE36:
 1161               	.LBE35:
 1162               		.cfi_endproc
 1163               	.LFE122:
 1165               		.comm	unicode_saved_mods,1,1
 1166               		.comm	unicode_config,4,1
 1167               		.text
 1168               	.Letext0:
 1169               		.file 3 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 1170               		.file 4 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 1171               		.file 5 "tmk_core/common/keyboard.h"
 1172               		.file 6 "tmk_core/common/action.h"
 1173               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1174               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1175               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1176               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1177               		.file 11 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
 1178               		.file 12 "tmk_core/common/report.h"
 1179               		.file 13 "tmk_core/common/host.h"
 1180               		.file 14 "tmk_core/common/debug.h"
 1181               		.file 15 "quantum/keycode_config.h"
 1182               		.file 16 "tmk_core/common/keycode.h"
 1183               		.file 17 "quantum/quantum_keycodes.h"
 1184               		.file 18 "quantum/keymap.h"
 1185               		.file 19 "./quantum/color.h"
 1186               		.file 20 "quantum/rgblight.h"
 1187               		.file 21 "tmk_core/common/action_layer.h"
 1188               		.file 22 "tmk_core/common/timer.h"
 1189               		.file 23 "tmk_core/common/action_util.h"
 1190               		.file 24 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
 1191               		.file 25 "quantum/process_keycode/process_tap_dance.h"
 1192               		.file 26 "quantum/quantum.h"
 1193               		.file 27 "quantum/process_keycode/process_unicode_common.h"
 1194               		.file 28 "quantum/process_keycode/process_unicode.h"
 1195               		.file 29 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
 1196               		.file 30 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
 1197               		.file 31 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
DEFINED SYMBOLS
                            *ABS*:00000000 process_unicode_common.c
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:2      *ABS*:0000003e __SP_H__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:3      *ABS*:0000003d __SP_L__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:4      *ABS*:0000003f __SREG__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:6      *ABS*:00000001 __zero_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:13     .text.unicode_input_mode_init:00000000 unicode_input_mode_init
                            *COM*:00000004 unicode_config
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:45     .text.get_unicode_input_mode:00000000 get_unicode_input_mode
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:64     .text.cycle_unicode_input_mode:00000000 cycle_unicode_input_mode
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:82     .text.persist_unicode_input_mode:00000000 persist_unicode_input_mode
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:102    .text.set_unicode_input_mode:00000000 set_unicode_input_mode
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:124    .text.unicode_input_start:00000000 unicode_input_start
                            *COM*:00000001 unicode_saved_mods
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:222    .text.unicode_input_finish:00000000 unicode_input_finish
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:273    .text.unicode_input_cancel:00000000 unicode_input_cancel
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:317    .text.hex_to_keycode:00000000 hex_to_keycode
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:364    .text.register_hex:00000000 register_hex
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:454    .text.send_unicode_hex_string:00000000 send_unicode_hex_string
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:680    .text.decode_utf8:00000000 decode_utf8
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:904    .text.send_unicode_string:00000000 send_unicode_string
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccslX7D1.s:1009   .text.process_unicode_common:00000000 process_unicode_common

UNDEFINED SYMBOLS
eeprom_read_byte
eeprom_update_byte
get_mods
clear_mods
register_code
tap_code16
tap_code
set_mods
unregister_code
strcspn
strncpy
send_string
tolower
process_unicode
__do_copy_data
__do_clear_bss
