
/* TEMP
*	,-------------------------------------------------------------------------.
*	|     |     |     |     |     |     |     |     |     |     |     |       |
*	|-------------------------------------------------------------------------+
*	|      |     |     |     |     |     |     |     |     |     |     |      |
*	|-------------------------------------------------------------------------+
*	|       |     |     |     |     |     |     |     |     |     |     |     |
*	|-------------------------------------------------------------------------+
*	|     |     |     |     |      |     @     |      |     |     |     |     |
*	`-------------------------------------------------------------------------'

	[_THUMB2] = LAYOUT(KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
		KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
		KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
		KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_AT, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS),
*/

enum custom_keycodes {
  TD_TMP01, //tap dance
  M_GUIL0 = SAFE_RANGE, //macros
};



TAP DANCE
void td08_finished (qk_tap_dance_state_t *state, void *user_data); //(ref:TD_TMP01)
void td08_reset (qk_tap_dance_state_t *state, void *user_data);
int cur_dance (qk_tap_dance_state_t *state) {
  if (state->count == 1) {
    if (state->interrupted || !state->pressed) { return SINGLE_TAP; }
      else { return SINGLE_HOLD; }
  }
  if (state->count == 2) { return DOUBLE_SINGLE_TAP; }
  else { return 3; }
}
// (ref:TD_TMP01)

void td08_finished (qk_tap_dance_state_t *state, void *user_date) {
  td_state = cur_dance(state);
  switch (td_state) {
    case SINGLE_TAP:

      break;
    case SINGLE_HOLD:

      break;
    case DOUBLE_SINGLE_TAP:

  }
}
void td08_reset (qk_tap_dance_state_t *state, void *user_data) {
  switch (td_state) {
    case SINGLE_TAP:

      break;
    case SINGLE_HOLD:

      break;
    case DOUBLE_SINGLE_TAP:

  }
}

qk_tap_dance_action_t tap_dance_actions[] = {
  [TD_TMP01] = ACTION_TAP_DANCE_FN_ADVANCED_TIME(NULL, td08_finished, td08_reset, 160),
};
