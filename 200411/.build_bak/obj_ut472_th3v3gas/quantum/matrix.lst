   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init,"ax",@progbits
  11               	.global	matrix_init
  13               	matrix_init:
  14               	.LFB114:
  15               		.file 1 "quantum/matrix.c"
   1:quantum/matrix.c **** /*
   2:quantum/matrix.c **** Copyright 2012-2018 Jun Wako, Jack Humbert, Yiancar
   3:quantum/matrix.c **** 
   4:quantum/matrix.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/matrix.c **** it under the terms of the GNU General Public License as published by
   6:quantum/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/matrix.c **** (at your option) any later version.
   8:quantum/matrix.c **** 
   9:quantum/matrix.c **** This program is distributed in the hope that it will be useful,
  10:quantum/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/matrix.c **** GNU General Public License for more details.
  13:quantum/matrix.c **** 
  14:quantum/matrix.c **** You should have received a copy of the GNU General Public License
  15:quantum/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/matrix.c **** */
  17:quantum/matrix.c **** #include <stdint.h>
  18:quantum/matrix.c **** #include <stdbool.h>
  19:quantum/matrix.c **** #include "util.h"
  20:quantum/matrix.c **** #include "matrix.h"
  21:quantum/matrix.c **** #include "debounce.h"
  22:quantum/matrix.c **** #include "quantum.h"
  23:quantum/matrix.c **** 
  24:quantum/matrix.c **** #ifdef DIRECT_PINS
  25:quantum/matrix.c **** static pin_t direct_pins[MATRIX_ROWS][MATRIX_COLS] = DIRECT_PINS;
  26:quantum/matrix.c **** #elif (DIODE_DIRECTION == ROW2COL) || (DIODE_DIRECTION == COL2ROW)
  27:quantum/matrix.c **** static const pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  28:quantum/matrix.c **** static const pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  29:quantum/matrix.c **** #endif
  30:quantum/matrix.c **** 
  31:quantum/matrix.c **** /* matrix state(1:on, 0:off) */
  32:quantum/matrix.c **** extern matrix_row_t raw_matrix[MATRIX_ROWS];  // raw values
  33:quantum/matrix.c **** extern matrix_row_t matrix[MATRIX_ROWS];      // debounced values
  34:quantum/matrix.c **** 
  35:quantum/matrix.c **** // matrix code
  36:quantum/matrix.c **** 
  37:quantum/matrix.c **** #ifdef DIRECT_PINS
  38:quantum/matrix.c **** 
  39:quantum/matrix.c **** static void init_pins(void) {
  40:quantum/matrix.c ****     for (int row = 0; row < MATRIX_ROWS; row++) {
  41:quantum/matrix.c ****         for (int col = 0; col < MATRIX_COLS; col++) {
  42:quantum/matrix.c ****             pin_t pin = direct_pins[row][col];
  43:quantum/matrix.c ****             if (pin != NO_PIN) {
  44:quantum/matrix.c ****                 setPinInputHigh(pin);
  45:quantum/matrix.c ****             }
  46:quantum/matrix.c ****         }
  47:quantum/matrix.c ****     }
  48:quantum/matrix.c **** }
  49:quantum/matrix.c **** 
  50:quantum/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row) {
  51:quantum/matrix.c ****     matrix_row_t last_row_value = current_matrix[current_row];
  52:quantum/matrix.c ****     current_matrix[current_row] = 0;
  53:quantum/matrix.c **** 
  54:quantum/matrix.c ****     for (uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
  55:quantum/matrix.c ****         pin_t pin = direct_pins[current_row][col_index];
  56:quantum/matrix.c ****         if (pin != NO_PIN) {
  57:quantum/matrix.c ****             current_matrix[current_row] |= readPin(pin) ? 0 : (MATRIX_ROW_SHIFTER << col_index);
  58:quantum/matrix.c ****         }
  59:quantum/matrix.c ****     }
  60:quantum/matrix.c **** 
  61:quantum/matrix.c ****     return (last_row_value != current_matrix[current_row]);
  62:quantum/matrix.c **** }
  63:quantum/matrix.c **** 
  64:quantum/matrix.c **** #elif defined(DIODE_DIRECTION)
  65:quantum/matrix.c **** #    if (DIODE_DIRECTION == COL2ROW)
  66:quantum/matrix.c **** 
  67:quantum/matrix.c **** static void select_row(uint8_t row) {
  68:quantum/matrix.c ****     setPinOutput(row_pins[row]);
  69:quantum/matrix.c ****     writePinLow(row_pins[row]);
  70:quantum/matrix.c **** }
  71:quantum/matrix.c **** 
  72:quantum/matrix.c **** static void unselect_row(uint8_t row) { setPinInputHigh(row_pins[row]); }
  73:quantum/matrix.c **** 
  74:quantum/matrix.c **** static void unselect_rows(void) {
  75:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
  76:quantum/matrix.c ****         setPinInputHigh(row_pins[x]);
  77:quantum/matrix.c ****     }
  78:quantum/matrix.c **** }
  79:quantum/matrix.c **** 
  80:quantum/matrix.c **** static void init_pins(void) {
  81:quantum/matrix.c ****     unselect_rows();
  82:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_COLS; x++) {
  83:quantum/matrix.c ****         setPinInputHigh(col_pins[x]);
  84:quantum/matrix.c ****     }
  85:quantum/matrix.c **** }
  86:quantum/matrix.c **** 
  87:quantum/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row) {
  88:quantum/matrix.c ****     // Store last value of row prior to reading
  89:quantum/matrix.c ****     matrix_row_t last_row_value = current_matrix[current_row];
  90:quantum/matrix.c **** 
  91:quantum/matrix.c ****     // Clear data in matrix row
  92:quantum/matrix.c ****     current_matrix[current_row] = 0;
  93:quantum/matrix.c **** 
  94:quantum/matrix.c ****     // Select row and wait for row selecton to stabilize
  95:quantum/matrix.c ****     select_row(current_row);
  96:quantum/matrix.c ****     matrix_io_delay();
  97:quantum/matrix.c **** 
  98:quantum/matrix.c ****     // For each col...
  99:quantum/matrix.c ****     for (uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
 100:quantum/matrix.c ****         // Select the col pin to read (active low)
 101:quantum/matrix.c ****         uint8_t pin_state = readPin(col_pins[col_index]);
 102:quantum/matrix.c **** 
 103:quantum/matrix.c ****         // Populate the matrix row with the state of the col pin
 104:quantum/matrix.c ****         current_matrix[current_row] |= pin_state ? 0 : (MATRIX_ROW_SHIFTER << col_index);
 105:quantum/matrix.c ****     }
 106:quantum/matrix.c **** 
 107:quantum/matrix.c ****     // Unselect row
 108:quantum/matrix.c ****     unselect_row(current_row);
 109:quantum/matrix.c **** 
 110:quantum/matrix.c ****     return (last_row_value != current_matrix[current_row]);
 111:quantum/matrix.c **** }
 112:quantum/matrix.c **** 
 113:quantum/matrix.c **** #    elif (DIODE_DIRECTION == ROW2COL)
 114:quantum/matrix.c **** 
 115:quantum/matrix.c **** static void select_col(uint8_t col) {
 116:quantum/matrix.c ****     setPinOutput(col_pins[col]);
 117:quantum/matrix.c ****     writePinLow(col_pins[col]);
 118:quantum/matrix.c **** }
 119:quantum/matrix.c **** 
 120:quantum/matrix.c **** static void unselect_col(uint8_t col) { setPinInputHigh(col_pins[col]); }
 121:quantum/matrix.c **** 
 122:quantum/matrix.c **** static void unselect_cols(void) {
 123:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_COLS; x++) {
 124:quantum/matrix.c ****         setPinInputHigh(col_pins[x]);
 125:quantum/matrix.c ****     }
 126:quantum/matrix.c **** }
 127:quantum/matrix.c **** 
 128:quantum/matrix.c **** static void init_pins(void) {
 129:quantum/matrix.c ****     unselect_cols();
 130:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
 131:quantum/matrix.c ****         setPinInputHigh(row_pins[x]);
 132:quantum/matrix.c ****     }
 133:quantum/matrix.c **** }
 134:quantum/matrix.c **** 
 135:quantum/matrix.c **** static bool read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col) {
 136:quantum/matrix.c ****     bool matrix_changed = false;
 137:quantum/matrix.c **** 
 138:quantum/matrix.c ****     // Select col and wait for col selecton to stabilize
 139:quantum/matrix.c ****     select_col(current_col);
 140:quantum/matrix.c ****     matrix_io_delay();
 141:quantum/matrix.c **** 
 142:quantum/matrix.c ****     // For each row...
 143:quantum/matrix.c ****     for (uint8_t row_index = 0; row_index < MATRIX_ROWS; row_index++) {
 144:quantum/matrix.c ****         // Store last value of row prior to reading
 145:quantum/matrix.c ****         matrix_row_t last_row_value = current_matrix[row_index];
 146:quantum/matrix.c **** 
 147:quantum/matrix.c ****         // Check row pin state
 148:quantum/matrix.c ****         if (readPin(row_pins[row_index]) == 0) {
 149:quantum/matrix.c ****             // Pin LO, set col bit
 150:quantum/matrix.c ****             current_matrix[row_index] |= (MATRIX_ROW_SHIFTER << current_col);
 151:quantum/matrix.c ****         } else {
 152:quantum/matrix.c ****             // Pin HI, clear col bit
 153:quantum/matrix.c ****             current_matrix[row_index] &= ~(MATRIX_ROW_SHIFTER << current_col);
 154:quantum/matrix.c ****         }
 155:quantum/matrix.c **** 
 156:quantum/matrix.c ****         // Determine if the matrix changed state
 157:quantum/matrix.c ****         if ((last_row_value != current_matrix[row_index]) && !(matrix_changed)) {
 158:quantum/matrix.c ****             matrix_changed = true;
 159:quantum/matrix.c ****         }
 160:quantum/matrix.c ****     }
 161:quantum/matrix.c **** 
 162:quantum/matrix.c ****     // Unselect col
 163:quantum/matrix.c ****     unselect_col(current_col);
 164:quantum/matrix.c **** 
 165:quantum/matrix.c ****     return matrix_changed;
 166:quantum/matrix.c **** }
 167:quantum/matrix.c **** 
 168:quantum/matrix.c **** #    else
 169:quantum/matrix.c **** #        error DIODE_DIRECTION must be one of COL2ROW or ROW2COL!
 170:quantum/matrix.c **** #    endif
 171:quantum/matrix.c **** #else
 172:quantum/matrix.c **** #    error DIODE_DIRECTION is not defined!
 173:quantum/matrix.c **** #endif
 174:quantum/matrix.c **** 
 175:quantum/matrix.c **** void matrix_init(void) {
  16               		.loc 1 175 24 view -0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
 176:quantum/matrix.c ****     // initialize key pins
 177:quantum/matrix.c ****     init_pins();
  30               		.loc 1 177 5 view .LVU1
  31               	.LBB11:
  32               	.LBI11:
  80:quantum/matrix.c ****     unselect_rows();
  33               		.loc 1 80 13 view .LVU2
  34               	.LBE11:
  81:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_COLS; x++) {
  35               		.loc 1 81 5 view .LVU3
  36               	.LBB15:
  37               	.LBB12:
  38               	.LBI12:
  74:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
  39               		.loc 1 74 13 view .LVU4
  40               	.LVL0:
  74:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
  41               		.loc 1 74 13 is_stmt 0 view .LVU5
  42 0004 A0E0      		ldi r26,lo8(row_pins)
  43 0006 B0E0      		ldi r27,hi8(row_pins)
  44 0008 40E0      		ldi r20,lo8(row_pins+4)
  45 000a 50E0      		ldi r21,hi8(row_pins+4)
  46               	.LBB13:
  76:quantum/matrix.c ****     }
  47               		.loc 1 76 9 view .LVU6
  48 000c C1E0      		ldi r28,lo8(1)
  49 000e D0E0      		ldi r29,0
  50               	.LVL1:
  51               	.L2:
  76:quantum/matrix.c ****     }
  52               		.loc 1 76 9 is_stmt 1 view .LVU7
  53 0010 8D91      		ld r24,X+
  54               	.LVL2:
  76:quantum/matrix.c ****     }
  55               		.loc 1 76 9 is_stmt 0 view .LVU8
  56 0012 E82F      		mov r30,r24
  57 0014 E295      		swap r30
  58 0016 EF70      		andi r30,lo8(15)
  59 0018 F0E0      		ldi r31,0
  60 001a 61A1      		ldd r22,Z+33
  61 001c 8F70      		andi r24,lo8(15)
  62 001e 9E01      		movw r18,r28
  63 0020 00C0      		rjmp 2f
  64               		1:
  65 0022 220F      		lsl r18
  66               		2:
  67 0024 8A95      		dec r24
  68 0026 02F4      		brpl 1b
  69 0028 922F      		mov r25,r18
  70 002a 9095      		com r25
  71 002c 9623      		and r25,r22
  72 002e 91A3      		std Z+33,r25
  73 0030 82A1      		ldd r24,Z+34
  74 0032 822B      		or r24,r18
  75 0034 82A3      		std Z+34,r24
  76               	.LVL3:
  75:quantum/matrix.c ****         setPinInputHigh(row_pins[x]);
  77               		.loc 1 75 5 view .LVU9
  78 0036 4A17      		cp r20,r26
  79 0038 5B07      		cpc r21,r27
  80 003a 01F4      		brne .L2
  81 003c A0E0      		ldi r26,lo8(col_pins)
  82 003e B0E0      		ldi r27,hi8(col_pins)
  83               	.LVL4:
  75:quantum/matrix.c ****         setPinInputHigh(row_pins[x]);
  84               		.loc 1 75 5 view .LVU10
  85 0040 40E0      		ldi r20,lo8(col_pins+12)
  86 0042 50E0      		ldi r21,hi8(col_pins+12)
  87               	.LBE13:
  88               	.LBE12:
  89               	.LBB14:
  83:quantum/matrix.c ****     }
  90               		.loc 1 83 9 view .LVU11
  91 0044 C1E0      		ldi r28,lo8(1)
  92 0046 D0E0      		ldi r29,0
  93               	.L3:
  94               	.LVL5:
  83:quantum/matrix.c ****     }
  95               		.loc 1 83 9 is_stmt 1 view .LVU12
  96 0048 8D91      		ld r24,X+
  97               	.LVL6:
  83:quantum/matrix.c ****     }
  98               		.loc 1 83 9 is_stmt 0 view .LVU13
  99 004a E82F      		mov r30,r24
 100 004c E295      		swap r30
 101 004e EF70      		andi r30,lo8(15)
 102 0050 F0E0      		ldi r31,0
 103 0052 61A1      		ldd r22,Z+33
 104 0054 8F70      		andi r24,lo8(15)
 105 0056 9E01      		movw r18,r28
 106 0058 00C0      		rjmp 2f
 107               		1:
 108 005a 220F      		lsl r18
 109               		2:
 110 005c 8A95      		dec r24
 111 005e 02F4      		brpl 1b
 112 0060 922F      		mov r25,r18
 113 0062 9095      		com r25
 114 0064 9623      		and r25,r22
 115 0066 91A3      		std Z+33,r25
 116 0068 82A1      		ldd r24,Z+34
 117 006a 822B      		or r24,r18
 118 006c 82A3      		std Z+34,r24
 119               	.LVL7:
  82:quantum/matrix.c ****         setPinInputHigh(col_pins[x]);
 120               		.loc 1 82 5 view .LVU14
 121 006e 4A17      		cp r20,r26
 122 0070 5B07      		cpc r21,r27
 123 0072 01F4      		brne .L3
 124               	.LVL8:
  82:quantum/matrix.c ****         setPinInputHigh(col_pins[x]);
 125               		.loc 1 82 5 view .LVU15
 126               	.LBE14:
 127               	.LBE15:
 128               	.LBB16:
 178:quantum/matrix.c **** 
 179:quantum/matrix.c ****     // initialize matrix state: all keys off
 180:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 181:quantum/matrix.c ****         raw_matrix[i] = 0;
 129               		.loc 1 181 9 is_stmt 1 view .LVU16
 130               		.loc 1 181 23 is_stmt 0 view .LVU17
 131 0074 1092 0000 		sts raw_matrix+1,__zero_reg__
 132 0078 1092 0000 		sts raw_matrix,__zero_reg__
 182:quantum/matrix.c ****         matrix[i]     = 0;
 133               		.loc 1 182 9 is_stmt 1 view .LVU18
 134               		.loc 1 182 23 is_stmt 0 view .LVU19
 135 007c 1092 0000 		sts matrix+1,__zero_reg__
 136 0080 1092 0000 		sts matrix,__zero_reg__
 137               	.LVL9:
 181:quantum/matrix.c ****         matrix[i]     = 0;
 138               		.loc 1 181 9 is_stmt 1 view .LVU20
 181:quantum/matrix.c ****         matrix[i]     = 0;
 139               		.loc 1 181 23 is_stmt 0 view .LVU21
 140 0084 1092 0000 		sts raw_matrix+2+1,__zero_reg__
 141 0088 1092 0000 		sts raw_matrix+2,__zero_reg__
 142               		.loc 1 182 9 is_stmt 1 view .LVU22
 143               		.loc 1 182 23 is_stmt 0 view .LVU23
 144 008c 1092 0000 		sts matrix+2+1,__zero_reg__
 145 0090 1092 0000 		sts matrix+2,__zero_reg__
 146               	.LVL10:
 181:quantum/matrix.c ****         matrix[i]     = 0;
 147               		.loc 1 181 9 is_stmt 1 view .LVU24
 181:quantum/matrix.c ****         matrix[i]     = 0;
 148               		.loc 1 181 23 is_stmt 0 view .LVU25
 149 0094 1092 0000 		sts raw_matrix+4+1,__zero_reg__
 150 0098 1092 0000 		sts raw_matrix+4,__zero_reg__
 151               		.loc 1 182 9 is_stmt 1 view .LVU26
 152               		.loc 1 182 23 is_stmt 0 view .LVU27
 153 009c 1092 0000 		sts matrix+4+1,__zero_reg__
 154 00a0 1092 0000 		sts matrix+4,__zero_reg__
 155               	.LVL11:
 181:quantum/matrix.c ****         matrix[i]     = 0;
 156               		.loc 1 181 9 is_stmt 1 view .LVU28
 181:quantum/matrix.c ****         matrix[i]     = 0;
 157               		.loc 1 181 23 is_stmt 0 view .LVU29
 158 00a4 1092 0000 		sts raw_matrix+6+1,__zero_reg__
 159 00a8 1092 0000 		sts raw_matrix+6,__zero_reg__
 160               		.loc 1 182 9 is_stmt 1 view .LVU30
 161               		.loc 1 182 23 is_stmt 0 view .LVU31
 162 00ac 1092 0000 		sts matrix+6+1,__zero_reg__
 163 00b0 1092 0000 		sts matrix+6,__zero_reg__
 164               	.LVL12:
 165               		.loc 1 182 23 view .LVU32
 166               	.LBE16:
 183:quantum/matrix.c ****     }
 184:quantum/matrix.c **** 
 185:quantum/matrix.c ****     debounce_init(MATRIX_ROWS);
 167               		.loc 1 185 5 is_stmt 1 view .LVU33
 168 00b4 84E0      		ldi r24,lo8(4)
 169 00b6 0E94 0000 		call debounce_init
 170               	.LVL13:
 186:quantum/matrix.c **** 
 187:quantum/matrix.c ****     matrix_init_quantum();
 171               		.loc 1 187 5 view .LVU34
 172               	/* epilogue start */
 188:quantum/matrix.c **** }
 173               		.loc 1 188 1 is_stmt 0 view .LVU35
 174 00ba DF91      		pop r29
 175 00bc CF91      		pop r28
 187:quantum/matrix.c **** }
 176               		.loc 1 187 5 view .LVU36
 177 00be 0C94 0000 		jmp matrix_init_quantum
 178               	.LVL14:
 179               		.cfi_endproc
 180               	.LFE114:
 182               		.section	.text.matrix_scan,"ax",@progbits
 183               	.global	matrix_scan
 185               	matrix_scan:
 186               	.LFB115:
 189:quantum/matrix.c **** 
 190:quantum/matrix.c **** uint8_t matrix_scan(void) {
 187               		.loc 1 190 27 is_stmt 1 view -0
 188               		.cfi_startproc
 189 0000 4F92      		push r4
 190               	.LCFI2:
 191               		.cfi_def_cfa_offset 3
 192               		.cfi_offset 4, -2
 193 0002 5F92      		push r5
 194               	.LCFI3:
 195               		.cfi_def_cfa_offset 4
 196               		.cfi_offset 5, -3
 197 0004 6F92      		push r6
 198               	.LCFI4:
 199               		.cfi_def_cfa_offset 5
 200               		.cfi_offset 6, -4
 201 0006 7F92      		push r7
 202               	.LCFI5:
 203               		.cfi_def_cfa_offset 6
 204               		.cfi_offset 7, -5
 205 0008 8F92      		push r8
 206               	.LCFI6:
 207               		.cfi_def_cfa_offset 7
 208               		.cfi_offset 8, -6
 209 000a 9F92      		push r9
 210               	.LCFI7:
 211               		.cfi_def_cfa_offset 8
 212               		.cfi_offset 9, -7
 213 000c AF92      		push r10
 214               	.LCFI8:
 215               		.cfi_def_cfa_offset 9
 216               		.cfi_offset 10, -8
 217 000e BF92      		push r11
 218               	.LCFI9:
 219               		.cfi_def_cfa_offset 10
 220               		.cfi_offset 11, -9
 221 0010 CF92      		push r12
 222               	.LCFI10:
 223               		.cfi_def_cfa_offset 11
 224               		.cfi_offset 12, -10
 225 0012 DF92      		push r13
 226               	.LCFI11:
 227               		.cfi_def_cfa_offset 12
 228               		.cfi_offset 13, -11
 229 0014 EF92      		push r14
 230               	.LCFI12:
 231               		.cfi_def_cfa_offset 13
 232               		.cfi_offset 14, -12
 233 0016 FF92      		push r15
 234               	.LCFI13:
 235               		.cfi_def_cfa_offset 14
 236               		.cfi_offset 15, -13
 237 0018 0F93      		push r16
 238               	.LCFI14:
 239               		.cfi_def_cfa_offset 15
 240               		.cfi_offset 16, -14
 241 001a 1F93      		push r17
 242               	.LCFI15:
 243               		.cfi_def_cfa_offset 16
 244               		.cfi_offset 17, -15
 245 001c CF93      		push r28
 246               	.LCFI16:
 247               		.cfi_def_cfa_offset 17
 248               		.cfi_offset 28, -16
 249 001e DF93      		push r29
 250               	.LCFI17:
 251               		.cfi_def_cfa_offset 18
 252               		.cfi_offset 29, -17
 253               	/* prologue: function */
 254               	/* frame size = 0 */
 255               	/* stack size = 16 */
 256               	.L__stack_usage = 16
 191:quantum/matrix.c ****     bool changed = false;
 257               		.loc 1 191 5 view .LVU38
 258               	.LVL15:
 192:quantum/matrix.c **** 
 193:quantum/matrix.c **** #if defined(DIRECT_PINS) || (DIODE_DIRECTION == COL2ROW)
 194:quantum/matrix.c ****     // Set row, read cols
 195:quantum/matrix.c ****     for (uint8_t current_row = 0; current_row < MATRIX_ROWS; current_row++) {
 259               		.loc 1 195 5 view .LVU39
 260               	.LBB26:
 261               		.loc 1 195 10 view .LVU40
 262               		.loc 1 195 10 is_stmt 0 view .LVU41
 263 0020 00E0      		ldi r16,lo8(raw_matrix)
 264 0022 10E0      		ldi r17,hi8(raw_matrix)
 265 0024 90E0      		ldi r25,lo8(row_pins)
 266 0026 C92E      		mov r12,r25
 267 0028 90E0      		ldi r25,hi8(row_pins)
 268 002a D92E      		mov r13,r25
 269               	.LBE26:
 191:quantum/matrix.c ****     bool changed = false;
 270               		.loc 1 191 10 view .LVU42
 271 002c 912C      		mov r9,__zero_reg__
 272               	.LBB44:
 273               	.LBB27:
 274               	.LBB28:
 275               	.LBB29:
 276               	.LBB30:
  68:quantum/matrix.c ****     writePinLow(row_pins[row]);
 277               		.loc 1 68 5 view .LVU43
 278 002e AA24      		clr r10
 279 0030 A394      		inc r10
 280 0032 B12C      		mov r11,__zero_reg__
 281               	.LVL16:
 282               	.L10:
  68:quantum/matrix.c ****     writePinLow(row_pins[row]);
 283               		.loc 1 68 5 view .LVU44
 284               	.LBE30:
 285               	.LBE29:
 286               	.LBE28:
 287               	.LBE27:
 196:quantum/matrix.c ****         changed |= read_cols_on_row(raw_matrix, current_row);
 288               		.loc 1 196 9 is_stmt 1 view .LVU45
 289               	.LBB42:
 290               	.LBI27:
  87:quantum/matrix.c ****     // Store last value of row prior to reading
 291               		.loc 1 87 13 view .LVU46
 292               	.LBB40:
  89:quantum/matrix.c **** 
 293               		.loc 1 89 5 view .LVU47
  89:quantum/matrix.c **** 
 294               		.loc 1 89 18 is_stmt 0 view .LVU48
 295 0034 D801      		movw r26,r16
 296 0036 6D90      		ld r6,X+
 297 0038 7C90      		ld r7,X
 298               	.LVL17:
  92:quantum/matrix.c **** 
 299               		.loc 1 92 5 is_stmt 1 view .LVU49
  92:quantum/matrix.c **** 
 300               		.loc 1 92 33 is_stmt 0 view .LVU50
 301 003a F801      		movw r30,r16
 302 003c 1192      		st Z+,__zero_reg__
 303 003e 1192      		st Z+,__zero_reg__
 304 0040 8F01      		movw r16,r30
  95:quantum/matrix.c ****     matrix_io_delay();
 305               		.loc 1 95 5 is_stmt 1 view .LVU51
 306               	.LVL18:
 307               	.LBB32:
 308               	.LBI29:
  67:quantum/matrix.c ****     setPinOutput(row_pins[row]);
 309               		.loc 1 67 13 view .LVU52
 310               	.LBB31:
  68:quantum/matrix.c ****     writePinLow(row_pins[row]);
 311               		.loc 1 68 5 view .LVU53
 312 0042 D601      		movw r26,r12
 313 0044 8D91      		ld r24,X+
 314 0046 6D01      		movw r12,r26
 315               	.LVL19:
  68:quantum/matrix.c ****     writePinLow(row_pins[row]);
 316               		.loc 1 68 5 is_stmt 0 view .LVU54
 317 0048 C82F      		mov r28,r24
 318 004a C295      		swap r28
 319 004c CF70      		andi r28,lo8(15)
 320 004e D0E0      		ldi r29,0
 321 0050 99A1      		ldd r25,Y+33
 322 0052 8F70      		andi r24,lo8(15)
 323 0054 7501      		movw r14,r10
 324 0056 00C0      		rjmp 2f
 325               		1:
 326 0058 EE0C      		lsl r14
 327               		2:
 328 005a 8A95      		dec r24
 329 005c 02F4      		brpl 1b
 330 005e 892F      		mov r24,r25
 331 0060 8E29      		or r24,r14
 332 0062 89A3      		std Y+33,r24
  69:quantum/matrix.c **** }
 333               		.loc 1 69 5 is_stmt 1 view .LVU55
 334 0064 8AA1      		ldd r24,Y+34
 335 0066 8E2C      		mov r8,r14
 336 0068 8094      		com r8
 337 006a 8821      		and r24,r8
 338 006c 8AA3      		std Y+34,r24
 339               	.LVL20:
  69:quantum/matrix.c **** }
 340               		.loc 1 69 5 is_stmt 0 view .LVU56
 341               	.LBE31:
 342               	.LBE32:
  96:quantum/matrix.c **** 
 343               		.loc 1 96 5 is_stmt 1 view .LVU57
 344 006e 0E94 0000 		call matrix_io_delay
 345               	.LVL21:
  99:quantum/matrix.c ****         // Select the col pin to read (active low)
 346               		.loc 1 99 5 view .LVU58
 347               	.LBB33:
  99:quantum/matrix.c ****         // Select the col pin to read (active low)
 348               		.loc 1 99 10 view .LVU59
  99:quantum/matrix.c ****         // Select the col pin to read (active low)
 349               		.loc 1 99 10 is_stmt 0 view .LVU60
 350 0072 80E0      		ldi r24,lo8(col_pins)
 351 0074 482E      		mov r4,r24
 352 0076 80E0      		ldi r24,hi8(col_pins)
 353 0078 582E      		mov r5,r24
 354               	.LBE33:
  96:quantum/matrix.c **** 
 355               		.loc 1 96 5 view .LVU61
 356 007a 30E0      		ldi r19,0
 357 007c 20E0      		ldi r18,0
 358 007e F801      		movw r30,r16
 359 0080 3297      		sbiw r30,2
 360               	.LVL22:
 361               	.L8:
 362               	.LBB36:
 363               	.LBB34:
 101:quantum/matrix.c **** 
 364               		.loc 1 101 9 is_stmt 1 view .LVU62
 101:quantum/matrix.c **** 
 365               		.loc 1 101 29 is_stmt 0 view .LVU63
 366 0082 D201      		movw r26,r4
 367 0084 6D91      		ld r22,X+
 368 0086 2D01      		movw r4,r26
 369 0088 862F      		mov r24,r22
 370 008a 8295      		swap r24
 371 008c 8F70      		andi r24,lo8(15)
 372 008e 90E0      		ldi r25,0
 373 0090 DC01      		movw r26,r24
 374 0092 9096      		adiw r26,32
 375 0094 8C91      		ld r24,X
 376               	.LVL23:
 104:quantum/matrix.c ****     }
 377               		.loc 1 104 9 is_stmt 1 view .LVU64
 104:quantum/matrix.c ****     }
 378               		.loc 1 104 37 is_stmt 0 view .LVU65
 379 0096 4081      		ld r20,Z
 380 0098 5181      		ldd r21,Z+1
 101:quantum/matrix.c **** 
 381               		.loc 1 101 29 view .LVU66
 382 009a 90E0      		ldi r25,0
 383 009c 6F70      		andi r22,lo8(15)
 384               	.LVL24:
 101:quantum/matrix.c **** 
 385               		.loc 1 101 29 view .LVU67
 386 009e 00C0      		rjmp 2f
 387               		1:
 388 00a0 9595      		asr r25
 389 00a2 8795      		ror r24
 390               		2:
 391 00a4 6A95      		dec r22
 392 00a6 02F4      		brpl 1b
 393               	.LVL25:
 104:quantum/matrix.c ****     }
 394               		.loc 1 104 54 view .LVU68
 395 00a8 80FD      		sbrc r24,0
 396 00aa 00C0      		rjmp .L11
 397 00ac C501      		movw r24,r10
 398 00ae 022E      		mov r0,r18
 399 00b0 00C0      		rjmp 2f
 400               		1:
 401 00b2 880F      		lsl r24
 402 00b4 991F      		rol r25
 403               		2:
 404 00b6 0A94      		dec r0
 405 00b8 02F4      		brpl 1b
 406               	.L7:
 104:quantum/matrix.c ****     }
 407               		.loc 1 104 37 view .LVU69
 408 00ba 842B      		or r24,r20
 409 00bc 952B      		or r25,r21
 410 00be 9183      		std Z+1,r25
 411 00c0 8083      		st Z,r24
 412               	.LVL26:
 104:quantum/matrix.c ****     }
 413               		.loc 1 104 37 view .LVU70
 414 00c2 2F5F      		subi r18,-1
 415 00c4 3F4F      		sbci r19,-1
 416               	.LVL27:
 104:quantum/matrix.c ****     }
 417               		.loc 1 104 37 view .LVU71
 418               	.LBE34:
  99:quantum/matrix.c ****         // Select the col pin to read (active low)
 419               		.loc 1 99 5 view .LVU72
 420 00c6 2C30      		cpi r18,12
 421 00c8 3105      		cpc r19,__zero_reg__
 422 00ca 01F4      		brne .L8
 423               	.LBE36:
 108:quantum/matrix.c **** 
 424               		.loc 1 108 5 is_stmt 1 view .LVU73
 425               	.LVL28:
 426               	.LBB37:
 427               	.LBI37:
  72:quantum/matrix.c **** 
 428               		.loc 1 72 13 view .LVU74
 429               	.LBB38:
  72:quantum/matrix.c **** 
 430               		.loc 1 72 41 view .LVU75
 431 00cc 89A1      		ldd r24,Y+33
 432 00ce 8822      		and r8,r24
 433 00d0 89A2      		std Y+33,r8
 434 00d2 8AA1      		ldd r24,Y+34
 435 00d4 E82A      		or r14,r24
 436 00d6 EAA2      		std Y+34,r14
 437               	.LVL29:
  72:quantum/matrix.c **** 
 438               		.loc 1 72 41 is_stmt 0 view .LVU76
 439               	.LBE38:
 440               	.LBE37:
 110:quantum/matrix.c **** }
 441               		.loc 1 110 5 is_stmt 1 view .LVU77
 110:quantum/matrix.c **** }
 442               		.loc 1 110 28 is_stmt 0 view .LVU78
 443 00d8 81E0      		ldi r24,lo8(1)
 444 00da 2081      		ld r18,Z
 445 00dc 3181      		ldd r19,Z+1
 446 00de 2615      		cp r18,r6
 447 00e0 3705      		cpc r19,r7
 448 00e2 01F4      		brne .L9
 449 00e4 80E0      		ldi r24,0
 450               	.L9:
 451               	.LBE40:
 452               	.LBE42:
 453               		.loc 1 196 17 view .LVU79
 454 00e6 982A      		or r9,r24
 455               	.LVL30:
 195:quantum/matrix.c ****         changed |= read_cols_on_row(raw_matrix, current_row);
 456               		.loc 1 195 5 view .LVU80
 457 00e8 B0E0      		ldi r27,hi8(raw_matrix+8)
 458 00ea 0030      		cpi r16,lo8(raw_matrix+8)
 459 00ec 1B07      		cpc r17,r27
 460 00ee 01F0      		breq .+2
 461 00f0 00C0      		rjmp .L10
 462               	.LBE44:
 197:quantum/matrix.c ****     }
 198:quantum/matrix.c **** #elif (DIODE_DIRECTION == ROW2COL)
 199:quantum/matrix.c ****     // Set col, read rows
 200:quantum/matrix.c ****     for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++) {
 201:quantum/matrix.c ****         changed |= read_rows_on_col(raw_matrix, current_col);
 202:quantum/matrix.c ****     }
 203:quantum/matrix.c **** #endif
 204:quantum/matrix.c **** 
 205:quantum/matrix.c ****     debounce(raw_matrix, matrix, MATRIX_ROWS, changed);
 463               		.loc 1 205 5 is_stmt 1 view .LVU81
 464 00f2 292D      		mov r18,r9
 465 00f4 44E0      		ldi r20,lo8(4)
 466 00f6 60E0      		ldi r22,lo8(matrix)
 467 00f8 70E0      		ldi r23,hi8(matrix)
 468 00fa 80E0      		ldi r24,lo8(raw_matrix)
 469 00fc 90E0      		ldi r25,hi8(raw_matrix)
 470 00fe 0E94 0000 		call debounce
 471               	.LVL31:
 206:quantum/matrix.c **** 
 207:quantum/matrix.c ****     matrix_scan_quantum();
 472               		.loc 1 207 5 view .LVU82
 473 0102 0E94 0000 		call matrix_scan_quantum
 474               	.LVL32:
 208:quantum/matrix.c ****     return (uint8_t)changed;
 475               		.loc 1 208 5 view .LVU83
 209:quantum/matrix.c **** }
 476               		.loc 1 209 1 is_stmt 0 view .LVU84
 477 0106 892D      		mov r24,r9
 478               	/* epilogue start */
 479 0108 DF91      		pop r29
 480 010a CF91      		pop r28
 481 010c 1F91      		pop r17
 482 010e 0F91      		pop r16
 483 0110 FF90      		pop r15
 484 0112 EF90      		pop r14
 485 0114 DF90      		pop r13
 486 0116 CF90      		pop r12
 487               	.LVL33:
 488               		.loc 1 209 1 view .LVU85
 489 0118 BF90      		pop r11
 490 011a AF90      		pop r10
 491 011c 9F90      		pop r9
 492               	.LVL34:
 493               		.loc 1 209 1 view .LVU86
 494 011e 8F90      		pop r8
 495 0120 7F90      		pop r7
 496 0122 6F90      		pop r6
 497 0124 5F90      		pop r5
 498 0126 4F90      		pop r4
 499 0128 0895      		ret
 500               	.LVL35:
 501               	.L11:
 502               	.LBB45:
 503               	.LBB43:
 504               	.LBB41:
 505               	.LBB39:
 506               	.LBB35:
 104:quantum/matrix.c ****     }
 507               		.loc 1 104 54 view .LVU87
 508 012a 90E0      		ldi r25,0
 509 012c 80E0      		ldi r24,0
 510 012e 00C0      		rjmp .L7
 511               	.LBE35:
 512               	.LBE39:
 513               	.LBE41:
 514               	.LBE43:
 515               	.LBE45:
 516               		.cfi_endproc
 517               	.LFE115:
 519               		.section	.rodata.col_pins,"a"
 522               	col_pins:
 523 0000 64        		.byte	100
 524 0001 65        		.byte	101
 525 0002 37        		.byte	55
 526 0003 36        		.byte	54
 527 0004 35        		.byte	53
 528 0005 34        		.byte	52
 529 0006 33        		.byte	51
 530 0007 32        		.byte	50
 531 0008 31        		.byte	49
 532 0009 30        		.byte	48
 533 000a 96        		.byte	-106
 534 000b 95        		.byte	-107
 535               		.section	.rodata.row_pins,"a"
 538               	row_pins:
 539 0000 91        		.byte	-111
 540 0001 92        		.byte	-110
 541 0002 93        		.byte	-109
 542 0003 94        		.byte	-108
 543               		.text
 544               	.Letext0:
 545               		.file 2 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 546               		.file 3 "tmk_core/common/matrix.h"
 547               		.file 4 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 548               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 549               		.file 6 "tmk_core/common/action.h"
 550               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 551               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 552               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 553               		.file 10 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
 554               		.file 11 "tmk_core/common/report.h"
 555               		.file 12 "tmk_core/common/host.h"
 556               		.file 13 "tmk_core/common/debug.h"
 557               		.file 14 "quantum/keycode_config.h"
 558               		.file 15 "quantum/keymap.h"
 559               		.file 16 "./quantum/color.h"
 560               		.file 17 "quantum/rgblight.h"
 561               		.file 18 "tmk_core/common/action_layer.h"
 562               		.file 19 "tmk_core/common/timer.h"
 563               		.file 20 "tmk_core/common/action_util.h"
 564               		.file 21 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
 565               		.file 22 "quantum/process_keycode/process_tap_dance.h"
 566               		.file 23 "quantum/quantum.h"
 567               		.file 24 "quantum/debounce.h"
DEFINED SYMBOLS
                            *ABS*:00000000 matrix.c
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cckMK3Ng.s:2      *ABS*:0000003e __SP_H__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cckMK3Ng.s:3      *ABS*:0000003d __SP_L__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cckMK3Ng.s:4      *ABS*:0000003f __SREG__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cckMK3Ng.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cckMK3Ng.s:6      *ABS*:00000001 __zero_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cckMK3Ng.s:13     .text.matrix_init:00000000 matrix_init
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cckMK3Ng.s:538    .rodata.row_pins:00000000 row_pins
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cckMK3Ng.s:522    .rodata.col_pins:00000000 col_pins
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cckMK3Ng.s:185    .text.matrix_scan:00000000 matrix_scan

UNDEFINED SYMBOLS
raw_matrix
matrix
debounce_init
matrix_init_quantum
matrix_io_delay
debounce
matrix_scan_quantum
__do_copy_data
