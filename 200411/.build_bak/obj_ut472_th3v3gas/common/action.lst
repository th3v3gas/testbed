   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "tmk_core/common/action.c"
   1:tmk_core/common/action.c **** /*
   2:tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action.c **** 
   4:tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action.c **** (at your option) any later version.
   8:tmk_core/common/action.c **** 
   9:tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action.c **** GNU General Public License for more details.
  13:tmk_core/common/action.c **** 
  14:tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action.c **** */
  17:tmk_core/common/action.c **** #include "host.h"
  18:tmk_core/common/action.c **** #include "keycode.h"
  19:tmk_core/common/action.c **** #include "keyboard.h"
  20:tmk_core/common/action.c **** #include "mousekey.h"
  21:tmk_core/common/action.c **** #include "command.h"
  22:tmk_core/common/action.c **** #include "led.h"
  23:tmk_core/common/action.c **** #include "action_layer.h"
  24:tmk_core/common/action.c **** #include "action_tapping.h"
  25:tmk_core/common/action.c **** #include "action_macro.h"
  26:tmk_core/common/action.c **** #include "action_util.h"
  27:tmk_core/common/action.c **** #include "action.h"
  28:tmk_core/common/action.c **** #include "wait.h"
  29:tmk_core/common/action.c **** 
  30:tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
  31:tmk_core/common/action.c **** #    include "backlight.h"
  32:tmk_core/common/action.c **** #endif
  33:tmk_core/common/action.c **** 
  34:tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  35:tmk_core/common/action.c **** #    include "debug.h"
  36:tmk_core/common/action.c **** #else
  37:tmk_core/common/action.c **** #    include "nodebug.h"
  38:tmk_core/common/action.c **** #endif
  39:tmk_core/common/action.c **** 
  40:tmk_core/common/action.c **** int tp_buttons;
  41:tmk_core/common/action.c **** 
  42:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  43:tmk_core/common/action.c **** int retro_tapping_counter = 0;
  44:tmk_core/common/action.c **** #endif
  45:tmk_core/common/action.c **** 
  46:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  47:tmk_core/common/action.c **** #    include <fauxclicky.h>
  48:tmk_core/common/action.c **** #endif
  49:tmk_core/common/action.c **** 
  50:tmk_core/common/action.c **** #ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
  51:tmk_core/common/action.c **** __attribute__((weak)) bool get_ignore_mod_tap_interrupt(uint16_t keycode) { return false; }
  52:tmk_core/common/action.c **** #endif
  53:tmk_core/common/action.c **** 
  54:tmk_core/common/action.c **** #ifndef TAP_CODE_DELAY
  55:tmk_core/common/action.c **** #    define TAP_CODE_DELAY 0
  56:tmk_core/common/action.c **** #endif
  57:tmk_core/common/action.c **** #ifndef TAP_HOLD_CAPS_DELAY
  58:tmk_core/common/action.c **** #    define TAP_HOLD_CAPS_DELAY 80
  59:tmk_core/common/action.c **** #endif
  60:tmk_core/common/action.c **** /** \brief Called to execute an action.
  61:tmk_core/common/action.c ****  *
  62:tmk_core/common/action.c ****  * FIXME: Needs documentation.
  63:tmk_core/common/action.c ****  */
  64:tmk_core/common/action.c **** void action_exec(keyevent_t event) {
  16               		.loc 1 64 36 view -0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  65:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  48               		.loc 1 65 5 view .LVU1
  66:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  67:tmk_core/common/action.c ****         dprint("EVENT: ");
  68:tmk_core/common/action.c ****         debug_event(event);
  69:tmk_core/common/action.c ****         dprintln();
  49               		.loc 1 69 19 view .LVU2
  70:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  71:tmk_core/common/action.c ****         retro_tapping_counter++;
  72:tmk_core/common/action.c **** #endif
  73:tmk_core/common/action.c ****     }
  74:tmk_core/common/action.c **** 
  75:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  76:tmk_core/common/action.c ****     if (IS_PRESSED(event)) {
  77:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_PRESS;
  78:tmk_core/common/action.c ****     }
  79:tmk_core/common/action.c ****     if (IS_RELEASED(event)) {
  80:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_RELEASE;
  81:tmk_core/common/action.c ****     }
  82:tmk_core/common/action.c ****     fauxclicky_check();
  83:tmk_core/common/action.c **** #endif
  84:tmk_core/common/action.c **** 
  85:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  86:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  87:tmk_core/common/action.c ****         process_hand_swap(&event);
  88:tmk_core/common/action.c ****     }
  89:tmk_core/common/action.c **** #endif
  90:tmk_core/common/action.c **** 
  91:tmk_core/common/action.c ****     keyrecord_t record = {.event = event};
  50               		.loc 1 91 5 view .LVU3
  51               		.loc 1 91 17 is_stmt 0 view .LVU4
  52 001e 1E82      		std Y+6,__zero_reg__
  53 0020 1D82      		std Y+5,__zero_reg__
  54 0022 85E0      		ldi r24,lo8(5)
  55 0024 FE01      		movw r30,r28
  56 0026 3796      		adiw r30,7
  57 0028 DE01      		movw r26,r28
  58 002a 1196      		adiw r26,1
  59               		0:
  60 002c 0190      		ld r0,Z+
  61 002e 0D92      		st X+,r0
  62 0030 8A95      		dec r24
  63 0032 01F4      		brne 0b
  92:tmk_core/common/action.c **** 
  93:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
  94:tmk_core/common/action.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  95:tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
  96:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
  97:tmk_core/common/action.c ****     }
  98:tmk_core/common/action.c ****     if (has_oneshot_mods_timed_out()) {
  99:tmk_core/common/action.c ****         clear_oneshot_mods();
 100:tmk_core/common/action.c ****     }
 101:tmk_core/common/action.c **** #    endif
 102:tmk_core/common/action.c **** #endif
 103:tmk_core/common/action.c **** 
 104:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 105:tmk_core/common/action.c ****     action_tapping_process(record);
  64               		.loc 1 105 5 is_stmt 1 view .LVU5
  65 0034 4981      		ldd r20,Y+1
  66               	.LVL1:
  67               		.loc 1 105 5 is_stmt 0 view .LVU6
  68 0036 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70               		.loc 1 105 5 view .LVU7
  71 0038 6B81      		ldd r22,Y+3
  72 003a 7C81      		ldd r23,Y+4
  73 003c 8D81      		ldd r24,Y+5
  74 003e 9E81      		ldd r25,Y+6
  75               	/* epilogue start */
 106:tmk_core/common/action.c **** #else
 107:tmk_core/common/action.c ****     process_record(&record);
 108:tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
 109:tmk_core/common/action.c ****         dprint("processed: ");
 110:tmk_core/common/action.c ****         debug_record(record);
 111:tmk_core/common/action.c ****         dprintln();
 112:tmk_core/common/action.c ****     }
 113:tmk_core/common/action.c **** #endif
 114:tmk_core/common/action.c **** }
  76               		.loc 1 114 1 view .LVU8
  77 0040 2B96      		adiw r28,11
  78 0042 0FB6      		in __tmp_reg__,__SREG__
  79 0044 F894      		cli
  80 0046 DEBF      		out __SP_H__,r29
  81 0048 0FBE      		out __SREG__,__tmp_reg__
  82 004a CDBF      		out __SP_L__,r28
  83 004c DF91      		pop r29
  84 004e CF91      		pop r28
 105:tmk_core/common/action.c **** #else
  85               		.loc 1 105 5 view .LVU9
  86 0050 0C94 0000 		jmp action_tapping_process
  87               	.LVL3:
  88               		.cfi_endproc
  89               	.LFE103:
  91               		.section	.text.process_record_quantum,"ax",@progbits
  92               		.weak	process_record_quantum
  94               	process_record_quantum:
  95               	.LVL4:
  96               	.LFB105:
 115:tmk_core/common/action.c **** 
 116:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 117:tmk_core/common/action.c **** bool swap_hands = false;
 118:tmk_core/common/action.c **** bool swap_held  = false;
 119:tmk_core/common/action.c **** 
 120:tmk_core/common/action.c **** /** \brief Process Hand Swap
 121:tmk_core/common/action.c ****  *
 122:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 123:tmk_core/common/action.c ****  */
 124:tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
 125:tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
 126:tmk_core/common/action.c **** 
 127:tmk_core/common/action.c ****     keypos_t         pos     = event->key;
 128:tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1 << pos.col;
 129:tmk_core/common/action.c ****     bool             do_swap = event->pressed ? swap_hands : swap_state[pos.row] & (col_bit);
 130:tmk_core/common/action.c **** 
 131:tmk_core/common/action.c ****     if (do_swap) {
 132:tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
 133:tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
 134:tmk_core/common/action.c ****     } else {
 135:tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 136:tmk_core/common/action.c ****     }
 137:tmk_core/common/action.c **** }
 138:tmk_core/common/action.c **** #endif
 139:tmk_core/common/action.c **** 
 140:tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 141:tmk_core/common/action.c **** bool disable_action_cache = false;
 142:tmk_core/common/action.c **** 
 143:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) {
 144:tmk_core/common/action.c ****     disable_action_cache = true;
 145:tmk_core/common/action.c ****     process_record(record);
 146:tmk_core/common/action.c ****     disable_action_cache = false;
 147:tmk_core/common/action.c **** }
 148:tmk_core/common/action.c **** #else
 149:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) { process_record(record); }
 150:tmk_core/common/action.c **** #endif
 151:tmk_core/common/action.c **** 
 152:tmk_core/common/action.c **** __attribute__((weak)) bool process_record_quantum(keyrecord_t *record) { return true; }
  97               		.loc 1 152 72 is_stmt 1 view -0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
 103               		.loc 1 152 74 view .LVU11
 104               		.loc 1 152 1 is_stmt 0 view .LVU12
 105 0000 81E0      		ldi r24,lo8(1)
 106               	.LVL5:
 107               	/* epilogue start */
 108               		.loc 1 152 1 view .LVU13
 109 0002 0895      		ret
 110               		.cfi_endproc
 111               	.LFE105:
 113               		.section	.text.process_record_tap_hint,"ax",@progbits
 114               	.global	process_record_tap_hint
 116               	process_record_tap_hint:
 117               	.LVL6:
 118               	.LFB106:
 153:tmk_core/common/action.c **** 
 154:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 155:tmk_core/common/action.c **** /** \brief Allows for handling tap-hold actions immediately instead of waiting for TAPPING_TERM or 
 156:tmk_core/common/action.c ****  *
 157:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 158:tmk_core/common/action.c ****  */
 159:tmk_core/common/action.c **** void process_record_tap_hint(keyrecord_t *record) {
 119               		.loc 1 159 51 is_stmt 1 view -0
 120               		.cfi_startproc
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 0 */
 124               	.L__stack_usage = 0
 160:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
 125               		.loc 1 160 5 view .LVU15
 126               		.loc 1 160 23 is_stmt 0 view .LVU16
 127 0000 FC01      		movw r30,r24
 128 0002 8081      		ld r24,Z
 129 0004 9181      		ldd r25,Z+1
 130               	.LVL7:
 131               		.loc 1 160 23 view .LVU17
 132 0006 0C94 0000 		jmp layer_switch_get_action
 133               	.LVL8:
 134               		.loc 1 160 23 view .LVU18
 135               		.cfi_endproc
 136               	.LFE106:
 138               		.section	.text.register_code,"ax",@progbits
 139               	.global	register_code
 141               	register_code:
 142               	.LVL9:
 143               	.LFB109:
 161:tmk_core/common/action.c **** 
 162:tmk_core/common/action.c ****     switch (action.kind.id) {
 163:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 164:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 165:tmk_core/common/action.c ****             switch (action.swap.code) {
 166:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 167:tmk_core/common/action.c ****                 default:
 168:tmk_core/common/action.c ****                     swap_hands = !swap_hands;
 169:tmk_core/common/action.c ****                     swap_held  = true;
 170:tmk_core/common/action.c ****             }
 171:tmk_core/common/action.c ****             break;
 172:tmk_core/common/action.c **** #    endif
 173:tmk_core/common/action.c ****     }
 174:tmk_core/common/action.c **** }
 175:tmk_core/common/action.c **** #endif
 176:tmk_core/common/action.c **** 
 177:tmk_core/common/action.c **** /** \brief Take a key event (key press or key release) and processes it.
 178:tmk_core/common/action.c ****  *
 179:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 180:tmk_core/common/action.c ****  */
 181:tmk_core/common/action.c **** void process_record(keyrecord_t *record) {
 182:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 183:tmk_core/common/action.c ****         return;
 184:tmk_core/common/action.c ****     }
 185:tmk_core/common/action.c **** 
 186:tmk_core/common/action.c ****     if (!process_record_quantum(record)) return;
 187:tmk_core/common/action.c **** 
 188:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 189:tmk_core/common/action.c ****     dprint("ACTION: ");
 190:tmk_core/common/action.c ****     debug_action(action);
 191:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 192:tmk_core/common/action.c ****     dprint(" layer_state: ");
 193:tmk_core/common/action.c ****     layer_debug();
 194:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 195:tmk_core/common/action.c ****     default_layer_debug();
 196:tmk_core/common/action.c **** #endif
 197:tmk_core/common/action.c ****     dprintln();
 198:tmk_core/common/action.c **** 
 199:tmk_core/common/action.c ****     process_action(record, action);
 200:tmk_core/common/action.c **** }
 201:tmk_core/common/action.c **** 
 202:tmk_core/common/action.c **** /** \brief Take an action and processes it.
 203:tmk_core/common/action.c ****  *
 204:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 205:tmk_core/common/action.c ****  */
 206:tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action) {
 207:tmk_core/common/action.c ****     keyevent_t event = record->event;
 208:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 209:tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 210:tmk_core/common/action.c **** #endif
 211:tmk_core/common/action.c **** 
 212:tmk_core/common/action.c ****     if (event.pressed) {
 213:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 214:tmk_core/common/action.c ****         clear_weak_mods();
 215:tmk_core/common/action.c ****     }
 216:tmk_core/common/action.c **** 
 217:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 218:tmk_core/common/action.c ****     bool do_release_oneshot = false;
 219:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 220:tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 221:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 222:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 223:tmk_core/common/action.c ****     }
 224:tmk_core/common/action.c **** #endif
 225:tmk_core/common/action.c **** 
 226:tmk_core/common/action.c ****     switch (action.kind.id) {
 227:tmk_core/common/action.c ****         /* Key and Mods */
 228:tmk_core/common/action.c ****         case ACT_LMODS:
 229:tmk_core/common/action.c ****         case ACT_RMODS: {
 230:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS) ? action.key.mods : action.key.mods << 4;
 231:tmk_core/common/action.c ****             if (event.pressed) {
 232:tmk_core/common/action.c ****                 if (mods) {
 233:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 234:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 235:tmk_core/common/action.c ****                         // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSFT).
 236:tmk_core/common/action.c ****                         // Same applies for some keys like KC_MEH which are declared as MEH(KC_NO).
 237:tmk_core/common/action.c ****                         add_mods(mods);
 238:tmk_core/common/action.c ****                     } else {
 239:tmk_core/common/action.c ****                         add_weak_mods(mods);
 240:tmk_core/common/action.c ****                     }
 241:tmk_core/common/action.c ****                     send_keyboard_report();
 242:tmk_core/common/action.c ****                 }
 243:tmk_core/common/action.c ****                 register_code(action.key.code);
 244:tmk_core/common/action.c ****             } else {
 245:tmk_core/common/action.c ****                 unregister_code(action.key.code);
 246:tmk_core/common/action.c ****                 if (mods) {
 247:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 248:tmk_core/common/action.c ****                         del_mods(mods);
 249:tmk_core/common/action.c ****                     } else {
 250:tmk_core/common/action.c ****                         del_weak_mods(mods);
 251:tmk_core/common/action.c ****                     }
 252:tmk_core/common/action.c ****                     send_keyboard_report();
 253:tmk_core/common/action.c ****                 }
 254:tmk_core/common/action.c ****             }
 255:tmk_core/common/action.c ****         } break;
 256:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 257:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 258:tmk_core/common/action.c ****         case ACT_RMODS_TAP: {
 259:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ? action.key.mods : action.key.mods <<
 260:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 261:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 262:tmk_core/common/action.c ****                 case MODS_ONESHOT:
 263:tmk_core/common/action.c ****                     // Oneshot modifier
 264:tmk_core/common/action.c ****                     if (event.pressed) {
 265:tmk_core/common/action.c ****                         if (tap_count == 0) {
 266:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 267:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 268:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 269:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 270:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 271:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 272:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 273:tmk_core/common/action.c ****                             dprint("MODS_TAP: Toggling oneshot");
 274:tmk_core/common/action.c ****                             clear_oneshot_mods();
 275:tmk_core/common/action.c ****                             set_oneshot_locked_mods(mods);
 276:tmk_core/common/action.c ****                             register_mods(mods);
 277:tmk_core/common/action.c **** #        endif
 278:tmk_core/common/action.c ****                         } else {
 279:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 280:tmk_core/common/action.c ****                         }
 281:tmk_core/common/action.c ****                     } else {
 282:tmk_core/common/action.c ****                         if (tap_count == 0) {
 283:tmk_core/common/action.c ****                             clear_oneshot_mods();
 284:tmk_core/common/action.c ****                             unregister_mods(mods);
 285:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 286:tmk_core/common/action.c ****                             // Retain Oneshot mods
 287:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 288:tmk_core/common/action.c ****                             if (mods & get_mods()) {
 289:tmk_core/common/action.c ****                                 clear_oneshot_locked_mods();
 290:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 291:tmk_core/common/action.c ****                                 unregister_mods(mods);
 292:tmk_core/common/action.c ****                             }
 293:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 294:tmk_core/common/action.c ****                             // Toggle Oneshot Layer
 295:tmk_core/common/action.c **** #        endif
 296:tmk_core/common/action.c ****                         } else {
 297:tmk_core/common/action.c ****                             clear_oneshot_mods();
 298:tmk_core/common/action.c ****                             unregister_mods(mods);
 299:tmk_core/common/action.c ****                         }
 300:tmk_core/common/action.c ****                     }
 301:tmk_core/common/action.c ****                     break;
 302:tmk_core/common/action.c **** #    endif
 303:tmk_core/common/action.c ****                 case MODS_TAP_TOGGLE:
 304:tmk_core/common/action.c ****                     if (event.pressed) {
 305:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 306:tmk_core/common/action.c ****                             register_mods(mods);
 307:tmk_core/common/action.c ****                         }
 308:tmk_core/common/action.c ****                     } else {
 309:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 310:tmk_core/common/action.c ****                             unregister_mods(mods);
 311:tmk_core/common/action.c ****                         }
 312:tmk_core/common/action.c ****                     }
 313:tmk_core/common/action.c ****                     break;
 314:tmk_core/common/action.c ****                 default:
 315:tmk_core/common/action.c ****                     if (event.pressed) {
 316:tmk_core/common/action.c ****                         if (tap_count > 0) {
 317:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 318:tmk_core/common/action.c ****                             if (
 319:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 320:tmk_core/common/action.c ****                                 !get_ignore_mod_tap_interrupt(get_event_keycode(record->event)) &&
 321:tmk_core/common/action.c **** #        endif
 322:tmk_core/common/action.c ****                                 record->tap.interrupted) {
 323:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 324:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 325:tmk_core/common/action.c ****                                 record->tap.count = 0;
 326:tmk_core/common/action.c ****                                 register_mods(mods);
 327:tmk_core/common/action.c ****                             } else
 328:tmk_core/common/action.c **** #    endif
 329:tmk_core/common/action.c ****                             {
 330:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: register_code\n");
 331:tmk_core/common/action.c ****                                 register_code(action.key.code);
 332:tmk_core/common/action.c ****                             }
 333:tmk_core/common/action.c ****                         } else {
 334:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 335:tmk_core/common/action.c ****                             register_mods(mods);
 336:tmk_core/common/action.c ****                         }
 337:tmk_core/common/action.c ****                     } else {
 338:tmk_core/common/action.c ****                         if (tap_count > 0) {
 339:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 340:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 341:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 342:tmk_core/common/action.c ****                             }
 343:tmk_core/common/action.c ****                             unregister_code(action.key.code);
 344:tmk_core/common/action.c ****                         } else {
 345:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 346:tmk_core/common/action.c ****                             unregister_mods(mods);
 347:tmk_core/common/action.c ****                         }
 348:tmk_core/common/action.c ****                     }
 349:tmk_core/common/action.c ****                     break;
 350:tmk_core/common/action.c ****             }
 351:tmk_core/common/action.c ****         } break;
 352:tmk_core/common/action.c **** #endif
 353:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 354:tmk_core/common/action.c ****         /* other HID usage */
 355:tmk_core/common/action.c ****         case ACT_USAGE:
 356:tmk_core/common/action.c ****             switch (action.usage.page) {
 357:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 358:tmk_core/common/action.c ****                     if (event.pressed) {
 359:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 360:tmk_core/common/action.c ****                     } else {
 361:tmk_core/common/action.c ****                         host_system_send(0);
 362:tmk_core/common/action.c ****                     }
 363:tmk_core/common/action.c ****                     break;
 364:tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 365:tmk_core/common/action.c ****                     if (event.pressed) {
 366:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 367:tmk_core/common/action.c ****                     } else {
 368:tmk_core/common/action.c ****                         host_consumer_send(0);
 369:tmk_core/common/action.c ****                     }
 370:tmk_core/common/action.c ****                     break;
 371:tmk_core/common/action.c ****             }
 372:tmk_core/common/action.c ****             break;
 373:tmk_core/common/action.c **** #endif
 374:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 375:tmk_core/common/action.c ****         /* Mouse key */
 376:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 377:tmk_core/common/action.c ****             if (event.pressed) {
 378:tmk_core/common/action.c ****                 switch (action.key.code) {
 379:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 380:tmk_core/common/action.c ****                         tp_buttons |= (1 << 0);
 381:tmk_core/common/action.c ****                         break;
 382:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 383:tmk_core/common/action.c ****                         tp_buttons |= (1 << 1);
 384:tmk_core/common/action.c ****                         break;
 385:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 386:tmk_core/common/action.c ****                         tp_buttons |= (1 << 2);
 387:tmk_core/common/action.c ****                         break;
 388:tmk_core/common/action.c ****                     default:
 389:tmk_core/common/action.c ****                         break;
 390:tmk_core/common/action.c ****                 }
 391:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 392:tmk_core/common/action.c ****                 mousekey_send();
 393:tmk_core/common/action.c ****             } else {
 394:tmk_core/common/action.c ****                 switch (action.key.code) {
 395:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 396:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 0);
 397:tmk_core/common/action.c ****                         break;
 398:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 399:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 1);
 400:tmk_core/common/action.c ****                         break;
 401:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 402:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 2);
 403:tmk_core/common/action.c ****                         break;
 404:tmk_core/common/action.c ****                     default:
 405:tmk_core/common/action.c ****                         break;
 406:tmk_core/common/action.c ****                 }
 407:tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 408:tmk_core/common/action.c ****                 mousekey_send();
 409:tmk_core/common/action.c ****             }
 410:tmk_core/common/action.c ****             break;
 411:tmk_core/common/action.c **** #endif
 412:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 413:tmk_core/common/action.c ****         case ACT_LAYER:
 414:tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 415:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 416:tmk_core/common/action.c ****                 if (!event.pressed) {
 417:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 418:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 419:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 420:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 421:tmk_core/common/action.c ****                         case OP_BIT_AND:
 422:tmk_core/common/action.c ****                             default_layer_and(bits | mask);
 423:tmk_core/common/action.c ****                             break;
 424:tmk_core/common/action.c ****                         case OP_BIT_OR:
 425:tmk_core/common/action.c ****                             default_layer_or(bits | mask);
 426:tmk_core/common/action.c ****                             break;
 427:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 428:tmk_core/common/action.c ****                             default_layer_xor(bits | mask);
 429:tmk_core/common/action.c ****                             break;
 430:tmk_core/common/action.c ****                         case OP_BIT_SET:
 431:tmk_core/common/action.c ****                             default_layer_set(bits | mask);
 432:tmk_core/common/action.c ****                             break;
 433:tmk_core/common/action.c ****                     }
 434:tmk_core/common/action.c ****                 }
 435:tmk_core/common/action.c ****             } else {
 436:tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 437:tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) : (action.layer_bitop.on & O
 438:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 439:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 440:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 441:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 442:tmk_core/common/action.c ****                         case OP_BIT_AND:
 443:tmk_core/common/action.c ****                             layer_and(bits | mask);
 444:tmk_core/common/action.c ****                             break;
 445:tmk_core/common/action.c ****                         case OP_BIT_OR:
 446:tmk_core/common/action.c ****                             layer_or(bits | mask);
 447:tmk_core/common/action.c ****                             break;
 448:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 449:tmk_core/common/action.c ****                             layer_xor(bits | mask);
 450:tmk_core/common/action.c ****                             break;
 451:tmk_core/common/action.c ****                         case OP_BIT_SET:
 452:tmk_core/common/action.c ****                             layer_state_set(bits | mask);
 453:tmk_core/common/action.c ****                             break;
 454:tmk_core/common/action.c ****                     }
 455:tmk_core/common/action.c ****                 }
 456:tmk_core/common/action.c ****             }
 457:tmk_core/common/action.c ****             break;
 458:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 459:tmk_core/common/action.c ****             if (event.pressed) {
 460:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 461:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 462:tmk_core/common/action.c ****             } else {
 463:tmk_core/common/action.c ****                 unregister_mods(action.layer_mods.mods);
 464:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 465:tmk_core/common/action.c ****             }
 466:tmk_core/common/action.c ****             break;
 467:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 468:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 469:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 470:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 471:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 472:tmk_core/common/action.c ****                     /* tap toggle */
 473:tmk_core/common/action.c ****                     if (event.pressed) {
 474:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 475:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 476:tmk_core/common/action.c ****                         }
 477:tmk_core/common/action.c ****                     } else {
 478:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 479:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 480:tmk_core/common/action.c ****                         }
 481:tmk_core/common/action.c ****                     }
 482:tmk_core/common/action.c ****                     break;
 483:tmk_core/common/action.c ****                 case OP_ON_OFF:
 484:tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) : layer_off(action.layer_tap.val
 485:tmk_core/common/action.c ****                     break;
 486:tmk_core/common/action.c ****                 case OP_OFF_ON:
 487:tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) : layer_on(action.layer_tap.val
 488:tmk_core/common/action.c ****                     break;
 489:tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 490:tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) : layer_clear();
 491:tmk_core/common/action.c ****                     break;
 492:tmk_core/common/action.c **** #        ifndef NO_ACTION_ONESHOT
 493:tmk_core/common/action.c ****                 case OP_ONESHOT:
 494:tmk_core/common/action.c ****                     // Oneshot modifier
 495:tmk_core/common/action.c **** #            if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 496:tmk_core/common/action.c ****                     do_release_oneshot = false;
 497:tmk_core/common/action.c ****                     if (event.pressed) {
 498:tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 499:tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 500:tmk_core/common/action.c ****                             reset_oneshot_layer();
 501:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 502:tmk_core/common/action.c ****                             break;
 503:tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 504:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 505:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 506:tmk_core/common/action.c ****                         }
 507:tmk_core/common/action.c ****                     } else {
 508:tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 509:tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 510:tmk_core/common/action.c ****                             reset_oneshot_layer();
 511:tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 512:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 513:tmk_core/common/action.c ****                         } else {
 514:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 515:tmk_core/common/action.c ****                         }
 516:tmk_core/common/action.c ****                     }
 517:tmk_core/common/action.c **** #            else
 518:tmk_core/common/action.c ****                     if (event.pressed) {
 519:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 520:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 521:tmk_core/common/action.c ****                     } else {
 522:tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 523:tmk_core/common/action.c ****                         if (tap_count > 1) {
 524:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 525:tmk_core/common/action.c ****                         }
 526:tmk_core/common/action.c ****                     }
 527:tmk_core/common/action.c **** #            endif
 528:tmk_core/common/action.c ****                     break;
 529:tmk_core/common/action.c **** #        endif
 530:tmk_core/common/action.c ****                 default:
 531:tmk_core/common/action.c ****                     /* tap key */
 532:tmk_core/common/action.c ****                     if (event.pressed) {
 533:tmk_core/common/action.c ****                         if (tap_count > 0) {
 534:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 535:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 536:tmk_core/common/action.c ****                         } else {
 537:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 538:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 539:tmk_core/common/action.c ****                         }
 540:tmk_core/common/action.c ****                     } else {
 541:tmk_core/common/action.c ****                         if (tap_count > 0) {
 542:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 543:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 544:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 545:tmk_core/common/action.c ****                             } else {
 546:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 547:tmk_core/common/action.c ****                             }
 548:tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 549:tmk_core/common/action.c ****                         } else {
 550:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 551:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 552:tmk_core/common/action.c ****                         }
 553:tmk_core/common/action.c ****                     }
 554:tmk_core/common/action.c ****                     break;
 555:tmk_core/common/action.c ****             }
 556:tmk_core/common/action.c ****             break;
 557:tmk_core/common/action.c **** #    endif
 558:tmk_core/common/action.c **** #endif
 559:tmk_core/common/action.c ****             /* Extentions */
 560:tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 561:tmk_core/common/action.c ****         case ACT_MACRO:
 562:tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 563:tmk_core/common/action.c ****             break;
 564:tmk_core/common/action.c **** #endif
 565:tmk_core/common/action.c **** #if defined(BACKLIGHT_ENABLE) || defined(LED_MATRIX_ENABLE)
 566:tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 567:tmk_core/common/action.c ****             if (!event.pressed) {
 568:tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 569:tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 570:tmk_core/common/action.c ****                         backlight_increase();
 571:tmk_core/common/action.c ****                         break;
 572:tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 573:tmk_core/common/action.c ****                         backlight_decrease();
 574:tmk_core/common/action.c ****                         break;
 575:tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 576:tmk_core/common/action.c ****                         backlight_toggle();
 577:tmk_core/common/action.c ****                         break;
 578:tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 579:tmk_core/common/action.c ****                         backlight_step();
 580:tmk_core/common/action.c ****                         break;
 581:tmk_core/common/action.c ****                     case BACKLIGHT_ON:
 582:tmk_core/common/action.c ****                         backlight_level(BACKLIGHT_LEVELS);
 583:tmk_core/common/action.c ****                         break;
 584:tmk_core/common/action.c ****                     case BACKLIGHT_OFF:
 585:tmk_core/common/action.c ****                         backlight_level(0);
 586:tmk_core/common/action.c ****                         break;
 587:tmk_core/common/action.c ****                 }
 588:tmk_core/common/action.c ****             }
 589:tmk_core/common/action.c ****             break;
 590:tmk_core/common/action.c **** #endif
 591:tmk_core/common/action.c ****         case ACT_COMMAND:
 592:tmk_core/common/action.c ****             break;
 593:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 594:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 595:tmk_core/common/action.c ****             switch (action.swap.code) {
 596:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 597:tmk_core/common/action.c ****                     if (event.pressed) {
 598:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 599:tmk_core/common/action.c ****                     }
 600:tmk_core/common/action.c ****                     break;
 601:tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 602:tmk_core/common/action.c ****                     swap_hands = event.pressed;
 603:tmk_core/common/action.c ****                     break;
 604:tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 605:tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 606:tmk_core/common/action.c ****                     break;
 607:tmk_core/common/action.c ****                 case OP_SH_ON:
 608:tmk_core/common/action.c ****                     if (!event.pressed) {
 609:tmk_core/common/action.c ****                         swap_hands = true;
 610:tmk_core/common/action.c ****                     }
 611:tmk_core/common/action.c ****                     break;
 612:tmk_core/common/action.c ****                 case OP_SH_OFF:
 613:tmk_core/common/action.c ****                     if (!event.pressed) {
 614:tmk_core/common/action.c ****                         swap_hands = false;
 615:tmk_core/common/action.c ****                     }
 616:tmk_core/common/action.c ****                     break;
 617:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 618:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 619:tmk_core/common/action.c ****                     /* tap toggle */
 620:tmk_core/common/action.c **** 
 621:tmk_core/common/action.c ****                     if (event.pressed) {
 622:tmk_core/common/action.c ****                         if (swap_held) {
 623:tmk_core/common/action.c ****                             swap_held = false;
 624:tmk_core/common/action.c ****                         } else {
 625:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 626:tmk_core/common/action.c ****                         }
 627:tmk_core/common/action.c ****                     } else {
 628:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 629:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 630:tmk_core/common/action.c ****                         }
 631:tmk_core/common/action.c ****                     }
 632:tmk_core/common/action.c ****                     break;
 633:tmk_core/common/action.c ****                 default:
 634:tmk_core/common/action.c ****                     /* tap key */
 635:tmk_core/common/action.c ****                     if (tap_count > 0) {
 636:tmk_core/common/action.c ****                         if (swap_held) {
 637:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 638:tmk_core/common/action.c ****                             swap_held  = false;
 639:tmk_core/common/action.c ****                         }
 640:tmk_core/common/action.c ****                         if (event.pressed) {
 641:tmk_core/common/action.c ****                             register_code(action.swap.code);
 642:tmk_core/common/action.c ****                         } else {
 643:tmk_core/common/action.c ****                             wait_ms(TAP_CODE_DELAY);
 644:tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 645:tmk_core/common/action.c ****                             *record = (keyrecord_t){};  // hack: reset tap mode
 646:tmk_core/common/action.c ****                         }
 647:tmk_core/common/action.c ****                     } else {
 648:tmk_core/common/action.c ****                         if (swap_held && !event.pressed) {
 649:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 650:tmk_core/common/action.c ****                             swap_held  = false;
 651:tmk_core/common/action.c ****                         }
 652:tmk_core/common/action.c ****                     }
 653:tmk_core/common/action.c **** #    endif
 654:tmk_core/common/action.c ****             }
 655:tmk_core/common/action.c **** #endif
 656:tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 657:tmk_core/common/action.c ****         case ACT_FUNCTION:
 658:tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 659:tmk_core/common/action.c ****             break;
 660:tmk_core/common/action.c **** #endif
 661:tmk_core/common/action.c ****         default:
 662:tmk_core/common/action.c ****             break;
 663:tmk_core/common/action.c ****     }
 664:tmk_core/common/action.c **** 
 665:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 666:tmk_core/common/action.c ****     // if this event is a layer action, update the leds
 667:tmk_core/common/action.c ****     switch (action.kind.id) {
 668:tmk_core/common/action.c ****         case ACT_LAYER:
 669:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 670:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 671:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 672:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 673:tmk_core/common/action.c **** #    endif
 674:tmk_core/common/action.c ****             led_set(host_keyboard_leds());
 675:tmk_core/common/action.c ****             break;
 676:tmk_core/common/action.c ****         default:
 677:tmk_core/common/action.c ****             break;
 678:tmk_core/common/action.c ****     }
 679:tmk_core/common/action.c **** #endif
 680:tmk_core/common/action.c **** 
 681:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 682:tmk_core/common/action.c **** #    ifdef RETRO_TAPPING
 683:tmk_core/common/action.c ****     if (!is_tap_action(action)) {
 684:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 685:tmk_core/common/action.c ****     } else {
 686:tmk_core/common/action.c ****         if (event.pressed) {
 687:tmk_core/common/action.c ****             if (tap_count > 0) {
 688:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 689:tmk_core/common/action.c ****             } else {
 690:tmk_core/common/action.c ****             }
 691:tmk_core/common/action.c ****         } else {
 692:tmk_core/common/action.c ****             if (tap_count > 0) {
 693:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 694:tmk_core/common/action.c ****             } else {
 695:tmk_core/common/action.c ****                 if (retro_tapping_counter == 2) {
 696:tmk_core/common/action.c ****                     tap_code(action.layer_tap.code);
 697:tmk_core/common/action.c ****                 }
 698:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 699:tmk_core/common/action.c ****             }
 700:tmk_core/common/action.c ****         }
 701:tmk_core/common/action.c ****     }
 702:tmk_core/common/action.c **** #    endif
 703:tmk_core/common/action.c **** #endif
 704:tmk_core/common/action.c **** 
 705:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 706:tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 707:tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 708:tmk_core/common/action.c ****      */
 709:tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED)) {
 710:tmk_core/common/action.c ****         record->event.pressed = false;
 711:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 712:tmk_core/common/action.c ****         process_record(record);
 713:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 714:tmk_core/common/action.c ****     }
 715:tmk_core/common/action.c **** #endif
 716:tmk_core/common/action.c **** }
 717:tmk_core/common/action.c **** 
 718:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 719:tmk_core/common/action.c ****  *
 720:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 721:tmk_core/common/action.c ****  */
 722:tmk_core/common/action.c **** void register_code(uint8_t code) {
 144               		.loc 1 722 34 is_stmt 1 view -0
 145               		.cfi_startproc
 146               	/* prologue: function */
 147               	/* frame size = 0 */
 148               	/* stack size = 0 */
 149               	.L__stack_usage = 0
 723:tmk_core/common/action.c ****     if (code == KC_NO) {
 150               		.loc 1 723 5 view .LVU20
 151               		.loc 1 723 8 is_stmt 0 view .LVU21
 152 0000 8823      		tst r24
 153 0002 01F4      		brne .+2
 154 0004 00C0      		rjmp .L4
 724:tmk_core/common/action.c ****         return;
 725:tmk_core/common/action.c ****     }
 726:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 727:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 155               		.loc 1 727 10 is_stmt 1 view .LVU22
 156               		.loc 1 727 13 is_stmt 0 view .LVU23
 157 0006 8238      		cpi r24,lo8(-126)
 158 0008 01F4      		brne .L7
 728:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 729:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 730:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK)) return;
 159               		.loc 1 730 9 is_stmt 1 view .LVU24
 160               		.loc 1 730 13 is_stmt 0 view .LVU25
 161 000a 0E94 0000 		call host_keyboard_leds
 162               	.LVL10:
 163               		.loc 1 730 12 view .LVU26
 164 000e 81FD      		sbrc r24,1
 165 0010 00C0      		rjmp .L4
 731:tmk_core/common/action.c **** #    endif
 732:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 166               		.loc 1 732 9 is_stmt 1 view .LVU27
 167 0012 89E3      		ldi r24,lo8(57)
 168 0014 0E94 0000 		call add_key
 169               	.LVL11:
 733:tmk_core/common/action.c ****         send_keyboard_report();
 170               		.loc 1 733 9 view .LVU28
 171 0018 0E94 0000 		call send_keyboard_report
 172               	.LVL12:
 734:tmk_core/common/action.c ****         wait_ms(100);
 173               		.loc 1 734 9 view .LVU29
 174               	.LBB32:
 175               	.LBI32:
 176               		.file 2 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
   1:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 177               		.loc 2 166 1 view .LVU30
 178               	.LBB33:
 167:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 179               		.loc 2 168 2 view .LVU31
 169:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 180               		.loc 2 172 2 view .LVU32
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 181               		.loc 2 173 2 view .LVU33
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 182               		.loc 2 174 2 view .LVU34
 175:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 183               		.loc 2 184 3 view .LVU35
 185:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 184               		.loc 2 187 2 view .LVU36
 185 001c 2FEF      		ldi r18,lo8(319999)
 186 001e 81EE      		ldi r24,hi8(319999)
 187 0020 94E0      		ldi r25,hlo8(319999)
 188 0022 2150      	1:	subi r18,1
 189 0024 8040      		sbci r24,0
 190 0026 9040      		sbci r25,0
 191 0028 01F4      		brne 1b
 192 002a 00C0      		rjmp .
 193 002c 0000      		nop
 194               	.LVL13:
 195               		.loc 2 187 2 is_stmt 0 view .LVU37
 196               	.LBE33:
 197               	.LBE32:
 735:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 198               		.loc 1 735 9 is_stmt 1 view .LVU38
 199 002e 89E3      		ldi r24,lo8(57)
 200               	.L14:
 736:tmk_core/common/action.c ****         send_keyboard_report();
 737:tmk_core/common/action.c ****     }
 738:tmk_core/common/action.c **** 
 739:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 740:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 741:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_NUM_LOCK)) return;
 742:tmk_core/common/action.c **** #    endif
 743:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 744:tmk_core/common/action.c ****         send_keyboard_report();
 745:tmk_core/common/action.c ****         wait_ms(100);
 746:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 201               		.loc 1 746 9 is_stmt 0 view .LVU39
 202 0030 0E94 0000 		call del_key
 203               	.LVL14:
 204               	.L15:
 747:tmk_core/common/action.c ****         send_keyboard_report();
 205               		.loc 1 747 9 is_stmt 1 view .LVU40
 206 0034 0C94 0000 		jmp send_keyboard_report
 207               	.LVL15:
 208               	.L7:
 739:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 209               		.loc 1 739 10 view .LVU41
 739:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 210               		.loc 1 739 13 is_stmt 0 view .LVU42
 211 0038 8338      		cpi r24,lo8(-125)
 212 003a 01F4      		brne .L9
 741:tmk_core/common/action.c **** #    endif
 213               		.loc 1 741 9 is_stmt 1 view .LVU43
 741:tmk_core/common/action.c **** #    endif
 214               		.loc 1 741 13 is_stmt 0 view .LVU44
 215 003c 0E94 0000 		call host_keyboard_leds
 216               	.LVL16:
 741:tmk_core/common/action.c **** #    endif
 217               		.loc 1 741 12 view .LVU45
 218 0040 80FD      		sbrc r24,0
 219 0042 00C0      		rjmp .L4
 743:tmk_core/common/action.c ****         send_keyboard_report();
 220               		.loc 1 743 9 is_stmt 1 view .LVU46
 221 0044 83E5      		ldi r24,lo8(83)
 222 0046 0E94 0000 		call add_key
 223               	.LVL17:
 744:tmk_core/common/action.c ****         wait_ms(100);
 224               		.loc 1 744 9 view .LVU47
 225 004a 0E94 0000 		call send_keyboard_report
 226               	.LVL18:
 745:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 227               		.loc 1 745 9 view .LVU48
 228               	.LBB34:
 229               	.LBI34:
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 230               		.loc 2 166 1 view .LVU49
 231               	.LBB35:
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 232               		.loc 2 168 2 view .LVU50
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233               		.loc 2 172 2 view .LVU51
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 234               		.loc 2 173 2 view .LVU52
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 235               		.loc 2 174 2 view .LVU53
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 236               		.loc 2 184 3 view .LVU54
 237               		.loc 2 187 2 view .LVU55
 238 004e 2FEF      		ldi r18,lo8(319999)
 239 0050 81EE      		ldi r24,hi8(319999)
 240 0052 94E0      		ldi r25,hlo8(319999)
 241 0054 2150      	1:	subi r18,1
 242 0056 8040      		sbci r24,0
 243 0058 9040      		sbci r25,0
 244 005a 01F4      		brne 1b
 245 005c 00C0      		rjmp .
 246 005e 0000      		nop
 247               	.LVL19:
 248               		.loc 2 187 2 is_stmt 0 view .LVU56
 249               	.LBE35:
 250               	.LBE34:
 746:tmk_core/common/action.c ****         send_keyboard_report();
 251               		.loc 1 746 9 is_stmt 1 view .LVU57
 252 0060 83E5      		ldi r24,lo8(83)
 253 0062 00C0      		rjmp .L14
 254               	.LVL20:
 255               	.L9:
 748:tmk_core/common/action.c ****     }
 749:tmk_core/common/action.c **** 
 750:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 256               		.loc 1 750 10 view .LVU58
 257               		.loc 1 750 13 is_stmt 0 view .LVU59
 258 0064 8438      		cpi r24,lo8(-124)
 259 0066 01F4      		brne .L10
 751:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 752:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK)) return;
 260               		.loc 1 752 9 is_stmt 1 view .LVU60
 261               		.loc 1 752 13 is_stmt 0 view .LVU61
 262 0068 0E94 0000 		call host_keyboard_leds
 263               	.LVL21:
 264               		.loc 1 752 12 view .LVU62
 265 006c 82FD      		sbrc r24,2
 266 006e 00C0      		rjmp .L4
 753:tmk_core/common/action.c **** #    endif
 754:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 267               		.loc 1 754 9 is_stmt 1 view .LVU63
 268 0070 87E4      		ldi r24,lo8(71)
 269 0072 0E94 0000 		call add_key
 270               	.LVL22:
 755:tmk_core/common/action.c ****         send_keyboard_report();
 271               		.loc 1 755 9 view .LVU64
 272 0076 0E94 0000 		call send_keyboard_report
 273               	.LVL23:
 756:tmk_core/common/action.c ****         wait_ms(100);
 274               		.loc 1 756 9 view .LVU65
 275               	.LBB36:
 276               	.LBI36:
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 277               		.loc 2 166 1 view .LVU66
 278               	.LBB37:
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 279               		.loc 2 168 2 view .LVU67
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 280               		.loc 2 172 2 view .LVU68
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 281               		.loc 2 173 2 view .LVU69
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 282               		.loc 2 174 2 view .LVU70
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 283               		.loc 2 184 3 view .LVU71
 284               		.loc 2 187 2 view .LVU72
 285 007a 2FEF      		ldi r18,lo8(319999)
 286 007c 81EE      		ldi r24,hi8(319999)
 287 007e 94E0      		ldi r25,hlo8(319999)
 288 0080 2150      	1:	subi r18,1
 289 0082 8040      		sbci r24,0
 290 0084 9040      		sbci r25,0
 291 0086 01F4      		brne 1b
 292 0088 00C0      		rjmp .
 293 008a 0000      		nop
 294               	.LVL24:
 295               		.loc 2 187 2 is_stmt 0 view .LVU73
 296               	.LBE37:
 297               	.LBE36:
 757:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 298               		.loc 1 757 9 is_stmt 1 view .LVU74
 299 008c 87E4      		ldi r24,lo8(71)
 300 008e 00C0      		rjmp .L14
 301               	.LVL25:
 302               	.L10:
 758:tmk_core/common/action.c ****         send_keyboard_report();
 759:tmk_core/common/action.c ****     }
 760:tmk_core/common/action.c **** #endif
 761:tmk_core/common/action.c **** 
 762:tmk_core/common/action.c ****     else if
 303               		.loc 1 762 10 view .LVU75
 763:tmk_core/common/action.c ****         IS_KEY(code) {
 304               		.loc 1 763 9 is_stmt 0 view .LVU76
 305 0090 9CEF      		ldi r25,lo8(-4)
 306 0092 980F      		add r25,r24
 307 0094 913A      		cpi r25,lo8(-95)
 308 0096 00F4      		brsh .L11
 764:tmk_core/common/action.c ****             // TODO: should push command_proc out of this block?
 765:tmk_core/common/action.c ****             if (command_proc(code)) return;
 309               		.loc 1 765 13 is_stmt 1 view .LVU77
 766:tmk_core/common/action.c **** 
 767:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 768:tmk_core/common/action.c **** /* TODO: remove
 769:tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 770:tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 771:tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 772:tmk_core/common/action.c **** 
 773:tmk_core/common/action.c ****             add_key(code);
 774:tmk_core/common/action.c ****             send_keyboard_report();
 775:tmk_core/common/action.c **** 
 776:tmk_core/common/action.c ****             set_mods(tmp_mods);
 777:tmk_core/common/action.c ****             send_keyboard_report();
 778:tmk_core/common/action.c ****             oneshot_cancel();
 779:tmk_core/common/action.c ****         } else
 780:tmk_core/common/action.c **** */
 781:tmk_core/common/action.c **** #endif
 782:tmk_core/common/action.c ****             {
 783:tmk_core/common/action.c ****                 add_key(code);
 310               		.loc 1 783 17 view .LVU78
 311 0098 0E94 0000 		call add_key
 312               	.LVL26:
 784:tmk_core/common/action.c ****                 send_keyboard_report();
 313               		.loc 1 784 17 view .LVU79
 314 009c 00C0      		rjmp .L15
 315               	.LVL27:
 316               	.L11:
 785:tmk_core/common/action.c ****             }
 786:tmk_core/common/action.c ****         }
 787:tmk_core/common/action.c ****     else if
 317               		.loc 1 787 10 view .LVU80
 788:tmk_core/common/action.c ****         IS_MOD(code) {
 318               		.loc 1 788 9 is_stmt 0 view .LVU81
 319 009e 90E2      		ldi r25,lo8(32)
 320 00a0 980F      		add r25,r24
 321 00a2 9830      		cpi r25,lo8(8)
 322 00a4 00F4      		brsh .L12
 789:tmk_core/common/action.c ****             add_mods(MOD_BIT(code));
 323               		.loc 1 789 13 is_stmt 1 view .LVU82
 324               		.loc 1 789 22 is_stmt 0 view .LVU83
 325 00a6 E82F      		mov r30,r24
 326 00a8 E770      		andi r30,lo8(7)
 327               		.loc 1 789 13 view .LVU84
 328 00aa 81E0      		ldi r24,lo8(1)
 329               	.LVL28:
 330               		.loc 1 789 13 view .LVU85
 331 00ac 00C0      		rjmp 2f
 332               		1:
 333 00ae 880F      		lsl r24
 334               		2:
 335 00b0 EA95      		dec r30
 336 00b2 02F4      		brpl 1b
 337 00b4 0E94 0000 		call add_mods
 338               	.LVL29:
 790:tmk_core/common/action.c ****             send_keyboard_report();
 339               		.loc 1 790 13 is_stmt 1 view .LVU86
 340 00b8 00C0      		rjmp .L15
 341               	.LVL30:
 342               	.L12:
 791:tmk_core/common/action.c ****         }
 792:tmk_core/common/action.c ****     else if
 343               		.loc 1 792 10 view .LVU87
 793:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(KEYCODE2SYSTEM(code)); }
 344               		.loc 1 793 9 is_stmt 0 view .LVU88
 345 00ba EBE5      		ldi r30,lo8(91)
 346 00bc E80F      		add r30,r24
 347 00be E330      		cpi r30,lo8(3)
 348 00c0 00F4      		brsh .L13
 349               		.loc 1 793 27 is_stmt 1 view .LVU89
 350               	.LVL31:
 351               	.LBB38:
 352               	.LBI38:
 353               		.file 3 "tmk_core/common/report.h"
   1:tmk_core/common/report.h **** /*
   2:tmk_core/common/report.h **** Copyright 2011,2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/report.h **** 
   4:tmk_core/common/report.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/report.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/report.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/report.h **** (at your option) any later version.
   8:tmk_core/common/report.h **** 
   9:tmk_core/common/report.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/report.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/report.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/report.h **** GNU General Public License for more details.
  13:tmk_core/common/report.h **** 
  14:tmk_core/common/report.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/report.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/report.h **** */
  17:tmk_core/common/report.h **** 
  18:tmk_core/common/report.h **** #ifndef REPORT_H
  19:tmk_core/common/report.h **** #define REPORT_H
  20:tmk_core/common/report.h **** 
  21:tmk_core/common/report.h **** #include <stdint.h>
  22:tmk_core/common/report.h **** #include "keycode.h"
  23:tmk_core/common/report.h **** 
  24:tmk_core/common/report.h **** /* report id */
  25:tmk_core/common/report.h **** #define REPORT_ID_KEYBOARD 1
  26:tmk_core/common/report.h **** #define REPORT_ID_MOUSE 2
  27:tmk_core/common/report.h **** #define REPORT_ID_SYSTEM 3
  28:tmk_core/common/report.h **** #define REPORT_ID_CONSUMER 4
  29:tmk_core/common/report.h **** #define REPORT_ID_NKRO 5
  30:tmk_core/common/report.h **** 
  31:tmk_core/common/report.h **** /* mouse buttons */
  32:tmk_core/common/report.h **** #define MOUSE_BTN1 (1 << 0)
  33:tmk_core/common/report.h **** #define MOUSE_BTN2 (1 << 1)
  34:tmk_core/common/report.h **** #define MOUSE_BTN3 (1 << 2)
  35:tmk_core/common/report.h **** #define MOUSE_BTN4 (1 << 3)
  36:tmk_core/common/report.h **** #define MOUSE_BTN5 (1 << 4)
  37:tmk_core/common/report.h **** 
  38:tmk_core/common/report.h **** /* Consumer Page(0x0C)
  39:tmk_core/common/report.h ****  * following are supported by Windows: http://msdn.microsoft.com/en-us/windows/hardware/gg463372.as
  40:tmk_core/common/report.h ****  * see also https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/display-brightness-contro
  41:tmk_core/common/report.h ****  */
  42:tmk_core/common/report.h **** #define AUDIO_MUTE 0x00E2
  43:tmk_core/common/report.h **** #define AUDIO_VOL_UP 0x00E9
  44:tmk_core/common/report.h **** #define AUDIO_VOL_DOWN 0x00EA
  45:tmk_core/common/report.h **** #define TRANSPORT_NEXT_TRACK 0x00B5
  46:tmk_core/common/report.h **** #define TRANSPORT_PREV_TRACK 0x00B6
  47:tmk_core/common/report.h **** #define TRANSPORT_STOP 0x00B7
  48:tmk_core/common/report.h **** #define TRANSPORT_STOP_EJECT 0x00CC
  49:tmk_core/common/report.h **** #define TRANSPORT_PLAY_PAUSE 0x00CD
  50:tmk_core/common/report.h **** #define BRIGHTNESS_UP 0x006F
  51:tmk_core/common/report.h **** #define BRIGHTNESS_DOWN 0x0070
  52:tmk_core/common/report.h **** /* application launch */
  53:tmk_core/common/report.h **** #define AL_CC_CONFIG 0x0183
  54:tmk_core/common/report.h **** #define AL_EMAIL 0x018A
  55:tmk_core/common/report.h **** #define AL_CALCULATOR 0x0192
  56:tmk_core/common/report.h **** #define AL_LOCAL_BROWSER 0x0194
  57:tmk_core/common/report.h **** /* application control */
  58:tmk_core/common/report.h **** #define AC_SEARCH 0x0221
  59:tmk_core/common/report.h **** #define AC_HOME 0x0223
  60:tmk_core/common/report.h **** #define AC_BACK 0x0224
  61:tmk_core/common/report.h **** #define AC_FORWARD 0x0225
  62:tmk_core/common/report.h **** #define AC_STOP 0x0226
  63:tmk_core/common/report.h **** #define AC_REFRESH 0x0227
  64:tmk_core/common/report.h **** #define AC_BOOKMARKS 0x022A
  65:tmk_core/common/report.h **** /* supplement for Bluegiga iWRAP HID(not supported by Windows?) */
  66:tmk_core/common/report.h **** #define AL_LOCK 0x019E
  67:tmk_core/common/report.h **** #define TRANSPORT_RECORD 0x00B2
  68:tmk_core/common/report.h **** #define TRANSPORT_FAST_FORWARD 0x00B3
  69:tmk_core/common/report.h **** #define TRANSPORT_REWIND 0x00B4
  70:tmk_core/common/report.h **** #define TRANSPORT_EJECT 0x00B8
  71:tmk_core/common/report.h **** #define AC_MINIMIZE 0x0206
  72:tmk_core/common/report.h **** 
  73:tmk_core/common/report.h **** /* Generic Desktop Page(0x01) - system power control */
  74:tmk_core/common/report.h **** #define SYSTEM_POWER_DOWN 0x0081
  75:tmk_core/common/report.h **** #define SYSTEM_SLEEP 0x0082
  76:tmk_core/common/report.h **** #define SYSTEM_WAKE_UP 0x0083
  77:tmk_core/common/report.h **** 
  78:tmk_core/common/report.h **** #define NKRO_SHARED_EP
  79:tmk_core/common/report.h **** /* key report size(NKRO or boot mode) */
  80:tmk_core/common/report.h **** #if defined(NKRO_ENABLE)
  81:tmk_core/common/report.h **** #    if defined(PROTOCOL_LUFA) || defined(PROTOCOL_CHIBIOS)
  82:tmk_core/common/report.h **** #        include "protocol/usb_descriptor.h"
  83:tmk_core/common/report.h **** #        define KEYBOARD_REPORT_BITS (SHARED_EPSIZE - 2)
  84:tmk_core/common/report.h **** #    elif defined(PROTOCOL_ARM_ATSAM)
  85:tmk_core/common/report.h **** #        include "protocol/arm_atsam/usb/udi_device_epsize.h"
  86:tmk_core/common/report.h **** #        define KEYBOARD_REPORT_BITS (NKRO_EPSIZE - 1)
  87:tmk_core/common/report.h **** #        undef NKRO_SHARED_EP
  88:tmk_core/common/report.h **** #        undef MOUSE_SHARED_EP
  89:tmk_core/common/report.h **** #    else
  90:tmk_core/common/report.h **** #        error "NKRO not supported with this protocol"
  91:tmk_core/common/report.h **** #    endif
  92:tmk_core/common/report.h **** #endif
  93:tmk_core/common/report.h **** 
  94:tmk_core/common/report.h **** #ifdef KEYBOARD_SHARED_EP
  95:tmk_core/common/report.h **** #    define KEYBOARD_REPORT_SIZE 9
  96:tmk_core/common/report.h **** #else
  97:tmk_core/common/report.h **** #    define KEYBOARD_REPORT_SIZE 8
  98:tmk_core/common/report.h **** #endif
  99:tmk_core/common/report.h **** 
 100:tmk_core/common/report.h **** #define KEYBOARD_REPORT_KEYS 6
 101:tmk_core/common/report.h **** 
 102:tmk_core/common/report.h **** /* VUSB hardcodes keyboard and mouse+extrakey only */
 103:tmk_core/common/report.h **** #if defined(PROTOCOL_VUSB)
 104:tmk_core/common/report.h **** #    undef KEYBOARD_SHARED_EP
 105:tmk_core/common/report.h **** #    undef MOUSE_SHARED_EP
 106:tmk_core/common/report.h **** #endif
 107:tmk_core/common/report.h **** 
 108:tmk_core/common/report.h **** #ifdef __cplusplus
 109:tmk_core/common/report.h **** extern "C" {
 110:tmk_core/common/report.h **** #endif
 111:tmk_core/common/report.h **** 
 112:tmk_core/common/report.h **** /*
 113:tmk_core/common/report.h ****  * keyboard report is 8-byte array retains state of 8 modifiers and 6 keys.
 114:tmk_core/common/report.h ****  *
 115:tmk_core/common/report.h ****  * byte |0       |1       |2       |3       |4       |5       |6       |7
 116:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------
 117:tmk_core/common/report.h ****  * desc |mods    |reserved|keys[0] |keys[1] |keys[2] |keys[3] |keys[4] |keys[5]
 118:tmk_core/common/report.h ****  *
 119:tmk_core/common/report.h ****  * It is exended to 16 bytes to retain 120keys+8mods when NKRO mode.
 120:tmk_core/common/report.h ****  *
 121:tmk_core/common/report.h ****  * byte |0       |1       |2       |3       |4       |5       |6       |7        ... |15
 122:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------     +--------
 123:tmk_core/common/report.h ****  * desc |mods    |bits[0] |bits[1] |bits[2] |bits[3] |bits[4] |bits[5] |bits[6]  ... |bit[14]
 124:tmk_core/common/report.h ****  *
 125:tmk_core/common/report.h ****  * mods retains state of 8 modifiers.
 126:tmk_core/common/report.h ****  *
 127:tmk_core/common/report.h ****  *  bit |0       |1       |2       |3       |4       |5       |6       |7
 128:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------
 129:tmk_core/common/report.h ****  * desc |Lcontrol|Lshift  |Lalt    |Lgui    |Rcontrol|Rshift  |Ralt    |Rgui
 130:tmk_core/common/report.h ****  *
 131:tmk_core/common/report.h ****  */
 132:tmk_core/common/report.h **** typedef union {
 133:tmk_core/common/report.h ****     uint8_t raw[KEYBOARD_REPORT_SIZE];
 134:tmk_core/common/report.h ****     struct {
 135:tmk_core/common/report.h **** #ifdef KEYBOARD_SHARED_EP
 136:tmk_core/common/report.h ****         uint8_t report_id;
 137:tmk_core/common/report.h **** #endif
 138:tmk_core/common/report.h ****         uint8_t mods;
 139:tmk_core/common/report.h ****         uint8_t reserved;
 140:tmk_core/common/report.h ****         uint8_t keys[KEYBOARD_REPORT_KEYS];
 141:tmk_core/common/report.h ****     };
 142:tmk_core/common/report.h **** #ifdef NKRO_ENABLE
 143:tmk_core/common/report.h ****     struct nkro_report {
 144:tmk_core/common/report.h **** #    ifdef NKRO_SHARED_EP
 145:tmk_core/common/report.h ****         uint8_t report_id;
 146:tmk_core/common/report.h **** #    endif
 147:tmk_core/common/report.h ****         uint8_t mods;
 148:tmk_core/common/report.h ****         uint8_t bits[KEYBOARD_REPORT_BITS];
 149:tmk_core/common/report.h ****     } nkro;
 150:tmk_core/common/report.h **** #endif
 151:tmk_core/common/report.h **** } __attribute__((packed)) report_keyboard_t;
 152:tmk_core/common/report.h **** 
 153:tmk_core/common/report.h **** typedef struct {
 154:tmk_core/common/report.h ****     uint8_t  report_id;
 155:tmk_core/common/report.h ****     uint16_t usage;
 156:tmk_core/common/report.h **** } __attribute__((packed)) report_extra_t;
 157:tmk_core/common/report.h **** 
 158:tmk_core/common/report.h **** typedef struct {
 159:tmk_core/common/report.h **** #ifdef MOUSE_SHARED_EP
 160:tmk_core/common/report.h ****     uint8_t report_id;
 161:tmk_core/common/report.h **** #endif
 162:tmk_core/common/report.h ****     uint8_t buttons;
 163:tmk_core/common/report.h ****     int8_t  x;
 164:tmk_core/common/report.h ****     int8_t  y;
 165:tmk_core/common/report.h ****     int8_t  v;
 166:tmk_core/common/report.h ****     int8_t  h;
 167:tmk_core/common/report.h **** } __attribute__((packed)) report_mouse_t;
 168:tmk_core/common/report.h **** 
 169:tmk_core/common/report.h **** /* keycode to system usage */
 170:tmk_core/common/report.h **** static inline uint16_t KEYCODE2SYSTEM(uint8_t key) {
 354               		.loc 3 170 24 view .LVU90
 355               	.LBE38:
 171:tmk_core/common/report.h ****     switch (key) {
 356               		.loc 3 171 5 view .LVU91
 357               		.loc 1 793 27 is_stmt 0 view .LVU92
 358 00c2 F0E0      		ldi r31,0
 359 00c4 E050      		subi r30,lo8(-(CSWTCH.9))
 360 00c6 F040      		sbci r31,hi8(-(CSWTCH.9))
 361 00c8 8081      		ld r24,Z
 362               	.LVL32:
 363               		.loc 1 793 27 view .LVU93
 364 00ca 90E0      		ldi r25,0
 365 00cc 0C94 0000 		jmp host_system_send
 366               	.LVL33:
 367               	.L13:
 794:tmk_core/common/action.c ****     else if
 368               		.loc 1 794 10 is_stmt 1 view .LVU94
 795:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(KEYCODE2CONSUMER(code)); }
 369               		.loc 1 795 9 is_stmt 0 view .LVU95
 370 00d0 885A      		subi r24,lo8(-(88))
 371               	.LVL34:
 372               		.loc 1 795 9 view .LVU96
 373 00d2 8731      		cpi r24,lo8(23)
 374 00d4 00F4      		brsh .L4
 375               		.loc 1 795 29 is_stmt 1 view .LVU97
 376               	.LVL35:
 377               	.LBB39:
 378               	.LBI39:
 172:tmk_core/common/report.h ****         case KC_SYSTEM_POWER:
 173:tmk_core/common/report.h ****             return SYSTEM_POWER_DOWN;
 174:tmk_core/common/report.h ****         case KC_SYSTEM_SLEEP:
 175:tmk_core/common/report.h ****             return SYSTEM_SLEEP;
 176:tmk_core/common/report.h ****         case KC_SYSTEM_WAKE:
 177:tmk_core/common/report.h ****             return SYSTEM_WAKE_UP;
 178:tmk_core/common/report.h ****         default:
 179:tmk_core/common/report.h ****             return 0;
 180:tmk_core/common/report.h ****     }
 181:tmk_core/common/report.h **** }
 182:tmk_core/common/report.h **** 
 183:tmk_core/common/report.h **** /* keycode to consumer usage */
 184:tmk_core/common/report.h **** static inline uint16_t KEYCODE2CONSUMER(uint8_t key) {
 379               		.loc 3 184 24 view .LVU98
 380               	.LBE39:
 185:tmk_core/common/report.h ****     switch (key) {
 381               		.loc 3 185 5 view .LVU99
 382               		.loc 1 795 29 is_stmt 0 view .LVU100
 383 00d6 E82F      		mov r30,r24
 384 00d8 F0E0      		ldi r31,0
 385 00da EE0F      		lsl r30
 386 00dc FF1F      		rol r31
 387               	.LVL36:
 388               		.loc 1 795 29 view .LVU101
 389 00de E050      		subi r30,lo8(-(CSWTCH.10))
 390 00e0 F040      		sbci r31,hi8(-(CSWTCH.10))
 391 00e2 8081      		ld r24,Z
 392 00e4 9181      		ldd r25,Z+1
 393 00e6 0C94 0000 		jmp host_consumer_send
 394               	.LVL37:
 395               	.L4:
 396               	/* epilogue start */
 796:tmk_core/common/action.c **** 
 797:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 798:tmk_core/common/action.c ****     else if
 799:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 800:tmk_core/common/action.c ****             mousekey_on(code);
 801:tmk_core/common/action.c ****             mousekey_send();
 802:tmk_core/common/action.c ****         }
 803:tmk_core/common/action.c **** #endif
 804:tmk_core/common/action.c **** }
 397               		.loc 1 804 1 view .LVU102
 398 00ea 0895      		ret
 399               		.cfi_endproc
 400               	.LFE109:
 402               		.section	.text.unregister_code,"ax",@progbits
 403               	.global	unregister_code
 405               	unregister_code:
 406               	.LVL38:
 407               	.LFB110:
 805:tmk_core/common/action.c **** 
 806:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 807:tmk_core/common/action.c ****  *
 808:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 809:tmk_core/common/action.c ****  */
 810:tmk_core/common/action.c **** void unregister_code(uint8_t code) {
 408               		.loc 1 810 36 is_stmt 1 view -0
 409               		.cfi_startproc
 410               	/* prologue: function */
 411               	/* frame size = 0 */
 412               	/* stack size = 0 */
 413               	.L__stack_usage = 0
 811:tmk_core/common/action.c ****     if (code == KC_NO) {
 414               		.loc 1 811 5 view .LVU104
 415               		.loc 1 811 8 is_stmt 0 view .LVU105
 416 0000 8823      		tst r24
 417 0002 01F4      		brne .+2
 418 0004 00C0      		rjmp .L16
 812:tmk_core/common/action.c ****         return;
 813:tmk_core/common/action.c ****     }
 814:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 815:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 419               		.loc 1 815 10 is_stmt 1 view .LVU106
 420               		.loc 1 815 13 is_stmt 0 view .LVU107
 421 0006 8238      		cpi r24,lo8(-126)
 422 0008 01F4      		brne .L19
 816:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 817:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 818:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK))) return;
 423               		.loc 1 818 9 is_stmt 1 view .LVU108
 424               		.loc 1 818 15 is_stmt 0 view .LVU109
 425 000a 0E94 0000 		call host_keyboard_leds
 426               	.LVL39:
 427               		.loc 1 818 12 view .LVU110
 428 000e 81FF      		sbrs r24,1
 429 0010 00C0      		rjmp .L16
 819:tmk_core/common/action.c **** #    endif
 820:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 430               		.loc 1 820 9 is_stmt 1 view .LVU111
 431 0012 89E3      		ldi r24,lo8(57)
 432 0014 0E94 0000 		call add_key
 433               	.LVL40:
 821:tmk_core/common/action.c ****         send_keyboard_report();
 434               		.loc 1 821 9 view .LVU112
 435 0018 0E94 0000 		call send_keyboard_report
 436               	.LVL41:
 822:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 437               		.loc 1 822 9 view .LVU113
 438 001c 89E3      		ldi r24,lo8(57)
 439               	.L35:
 823:tmk_core/common/action.c ****         send_keyboard_report();
 824:tmk_core/common/action.c ****     }
 825:tmk_core/common/action.c **** 
 826:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 827:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 828:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_NUM_LOCK))) return;
 829:tmk_core/common/action.c **** #    endif
 830:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 831:tmk_core/common/action.c ****         send_keyboard_report();
 832:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 440               		.loc 1 832 9 is_stmt 0 view .LVU114
 441 001e 0E94 0000 		call del_key
 442               	.LVL42:
 443               	.L36:
 833:tmk_core/common/action.c ****         send_keyboard_report();
 444               		.loc 1 833 9 is_stmt 1 view .LVU115
 445 0022 0C94 0000 		jmp send_keyboard_report
 446               	.LVL43:
 447               	.L19:
 826:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 448               		.loc 1 826 10 view .LVU116
 826:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 449               		.loc 1 826 13 is_stmt 0 view .LVU117
 450 0026 8338      		cpi r24,lo8(-125)
 451 0028 01F4      		brne .L21
 828:tmk_core/common/action.c **** #    endif
 452               		.loc 1 828 9 is_stmt 1 view .LVU118
 828:tmk_core/common/action.c **** #    endif
 453               		.loc 1 828 15 is_stmt 0 view .LVU119
 454 002a 0E94 0000 		call host_keyboard_leds
 455               	.LVL44:
 828:tmk_core/common/action.c **** #    endif
 456               		.loc 1 828 12 view .LVU120
 457 002e 80FF      		sbrs r24,0
 458 0030 00C0      		rjmp .L16
 830:tmk_core/common/action.c ****         send_keyboard_report();
 459               		.loc 1 830 9 is_stmt 1 view .LVU121
 460 0032 83E5      		ldi r24,lo8(83)
 461 0034 0E94 0000 		call add_key
 462               	.LVL45:
 831:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 463               		.loc 1 831 9 view .LVU122
 464 0038 0E94 0000 		call send_keyboard_report
 465               	.LVL46:
 832:tmk_core/common/action.c ****         send_keyboard_report();
 466               		.loc 1 832 9 view .LVU123
 467 003c 83E5      		ldi r24,lo8(83)
 468 003e 00C0      		rjmp .L35
 469               	.LVL47:
 470               	.L21:
 834:tmk_core/common/action.c ****     }
 835:tmk_core/common/action.c **** 
 836:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 471               		.loc 1 836 10 view .LVU124
 472               		.loc 1 836 13 is_stmt 0 view .LVU125
 473 0040 8438      		cpi r24,lo8(-124)
 474 0042 01F4      		brne .L22
 837:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 838:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK))) return;
 475               		.loc 1 838 9 is_stmt 1 view .LVU126
 476               		.loc 1 838 15 is_stmt 0 view .LVU127
 477 0044 0E94 0000 		call host_keyboard_leds
 478               	.LVL48:
 479               		.loc 1 838 12 view .LVU128
 480 0048 82FF      		sbrs r24,2
 481 004a 00C0      		rjmp .L16
 839:tmk_core/common/action.c **** #    endif
 840:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 482               		.loc 1 840 9 is_stmt 1 view .LVU129
 483 004c 87E4      		ldi r24,lo8(71)
 484 004e 0E94 0000 		call add_key
 485               	.LVL49:
 841:tmk_core/common/action.c ****         send_keyboard_report();
 486               		.loc 1 841 9 view .LVU130
 487 0052 0E94 0000 		call send_keyboard_report
 488               	.LVL50:
 842:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 489               		.loc 1 842 9 view .LVU131
 490 0056 87E4      		ldi r24,lo8(71)
 491 0058 00C0      		rjmp .L35
 492               	.LVL51:
 493               	.L22:
 843:tmk_core/common/action.c ****         send_keyboard_report();
 844:tmk_core/common/action.c ****     }
 845:tmk_core/common/action.c **** #endif
 846:tmk_core/common/action.c **** 
 847:tmk_core/common/action.c ****     else if
 494               		.loc 1 847 10 view .LVU132
 848:tmk_core/common/action.c ****         IS_KEY(code) {
 495               		.loc 1 848 9 is_stmt 0 view .LVU133
 496 005a 9CEF      		ldi r25,lo8(-4)
 497 005c 980F      		add r25,r24
 498 005e 913A      		cpi r25,lo8(-95)
 499 0060 00F0      		brlo .L35
 849:tmk_core/common/action.c ****             del_key(code);
 850:tmk_core/common/action.c ****             send_keyboard_report();
 851:tmk_core/common/action.c ****         }
 852:tmk_core/common/action.c ****     else if
 500               		.loc 1 852 10 is_stmt 1 view .LVU134
 853:tmk_core/common/action.c ****         IS_MOD(code) {
 501               		.loc 1 853 9 is_stmt 0 view .LVU135
 502 0062 90E2      		ldi r25,lo8(32)
 503 0064 980F      		add r25,r24
 504 0066 9830      		cpi r25,lo8(8)
 505 0068 00F4      		brsh .L24
 854:tmk_core/common/action.c ****             del_mods(MOD_BIT(code));
 506               		.loc 1 854 13 is_stmt 1 view .LVU136
 507               		.loc 1 854 22 is_stmt 0 view .LVU137
 508 006a 8770      		andi r24,lo8(7)
 509               	.LVL52:
 510               		.loc 1 854 13 view .LVU138
 511 006c 91E0      		ldi r25,lo8(1)
 512 006e 00C0      		rjmp 2f
 513               		1:
 514 0070 990F      		lsl r25
 515               		2:
 516 0072 8A95      		dec r24
 517 0074 02F4      		brpl 1b
 518 0076 892F      		mov r24,r25
 519 0078 0E94 0000 		call del_mods
 520               	.LVL53:
 855:tmk_core/common/action.c ****             send_keyboard_report();
 521               		.loc 1 855 13 is_stmt 1 view .LVU139
 522 007c 00C0      		rjmp .L36
 523               	.LVL54:
 524               	.L24:
 856:tmk_core/common/action.c ****         }
 857:tmk_core/common/action.c ****     else if
 525               		.loc 1 857 10 view .LVU140
 858:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(0); }
 526               		.loc 1 858 9 is_stmt 0 view .LVU141
 527 007e 9BE5      		ldi r25,lo8(91)
 528 0080 980F      		add r25,r24
 529 0082 9330      		cpi r25,lo8(3)
 530 0084 00F4      		brsh .L25
 531               		.loc 1 858 27 is_stmt 1 discriminator 1 view .LVU142
 532 0086 90E0      		ldi r25,0
 533 0088 80E0      		ldi r24,0
 534               	.LVL55:
 535               		.loc 1 858 27 is_stmt 0 discriminator 1 view .LVU143
 536 008a 0C94 0000 		jmp host_system_send
 537               	.LVL56:
 538               	.L25:
 859:tmk_core/common/action.c ****     else if
 539               		.loc 1 859 10 is_stmt 1 view .LVU144
 860:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(0); }
 540               		.loc 1 860 9 is_stmt 0 view .LVU145
 541 008e 885A      		subi r24,lo8(-(88))
 542               	.LVL57:
 543               		.loc 1 860 9 view .LVU146
 544 0090 8731      		cpi r24,lo8(23)
 545 0092 00F4      		brsh .L16
 546               		.loc 1 860 29 is_stmt 1 discriminator 1 view .LVU147
 547 0094 90E0      		ldi r25,0
 548 0096 80E0      		ldi r24,0
 549               	.LVL58:
 550               		.loc 1 860 29 is_stmt 0 discriminator 1 view .LVU148
 551 0098 0C94 0000 		jmp host_consumer_send
 552               	.LVL59:
 553               	.L16:
 554               	/* epilogue start */
 861:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 862:tmk_core/common/action.c ****     else if
 863:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 864:tmk_core/common/action.c ****             mousekey_off(code);
 865:tmk_core/common/action.c ****             mousekey_send();
 866:tmk_core/common/action.c ****         }
 867:tmk_core/common/action.c **** #endif
 868:tmk_core/common/action.c **** }
 555               		.loc 1 868 1 view .LVU149
 556 009c 0895      		ret
 557               		.cfi_endproc
 558               	.LFE110:
 560               		.section	.text.tap_code,"ax",@progbits
 561               	.global	tap_code
 563               	tap_code:
 564               	.LVL60:
 565               	.LFB111:
 869:tmk_core/common/action.c **** 
 870:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 871:tmk_core/common/action.c ****  *
 872:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 873:tmk_core/common/action.c ****  */
 874:tmk_core/common/action.c **** void tap_code(uint8_t code) {
 566               		.loc 1 874 29 is_stmt 1 view -0
 567               		.cfi_startproc
 568               		.loc 1 874 29 is_stmt 0 view .LVU151
 569 0000 CF93      		push r28
 570               	.LCFI4:
 571               		.cfi_def_cfa_offset 3
 572               		.cfi_offset 28, -2
 573               	/* prologue: function */
 574               	/* frame size = 0 */
 575               	/* stack size = 1 */
 576               	.L__stack_usage = 1
 577 0002 C82F      		mov r28,r24
 875:tmk_core/common/action.c ****     register_code(code);
 578               		.loc 1 875 5 is_stmt 1 view .LVU152
 579 0004 0E94 0000 		call register_code
 580               	.LVL61:
 876:tmk_core/common/action.c ****     if (code == KC_CAPS) {
 581               		.loc 1 876 5 view .LVU153
 582               		.loc 1 876 8 is_stmt 0 view .LVU154
 583 0008 C933      		cpi r28,lo8(57)
 584 000a 01F4      		brne .L39
 877:tmk_core/common/action.c ****         wait_ms(TAP_HOLD_CAPS_DELAY);
 585               		.loc 1 877 9 is_stmt 1 view .LVU155
 586               	.LVL62:
 587               	.LBB40:
 588               	.LBI40:
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 589               		.loc 2 166 1 view .LVU156
 590               	.LBB41:
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 591               		.loc 2 168 2 view .LVU157
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 592               		.loc 2 172 2 view .LVU158
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 593               		.loc 2 173 2 view .LVU159
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 594               		.loc 2 174 2 view .LVU160
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 595               		.loc 2 184 3 view .LVU161
 596               		.loc 2 187 2 view .LVU162
 597 000c 2FEF      		ldi r18,lo8(255999)
 598 000e 87EE      		ldi r24,hi8(255999)
 599 0010 93E0      		ldi r25,hlo8(255999)
 600 0012 2150      	1:	subi r18,1
 601 0014 8040      		sbci r24,0
 602 0016 9040      		sbci r25,0
 603 0018 01F4      		brne 1b
 604 001a 00C0      		rjmp .
 605 001c 0000      		nop
 606               	.LVL63:
 607               	.L39:
 608               		.loc 2 187 2 is_stmt 0 view .LVU163
 609               	.LBE41:
 610               	.LBE40:
 878:tmk_core/common/action.c ****     } else {
 879:tmk_core/common/action.c ****         wait_ms(TAP_CODE_DELAY);
 880:tmk_core/common/action.c ****     }
 881:tmk_core/common/action.c ****     unregister_code(code);
 611               		.loc 1 881 5 is_stmt 1 view .LVU164
 612 001e 8C2F      		mov r24,r28
 613               	/* epilogue start */
 882:tmk_core/common/action.c **** }
 614               		.loc 1 882 1 is_stmt 0 view .LVU165
 615 0020 CF91      		pop r28
 616               	.LVL64:
 881:tmk_core/common/action.c **** }
 617               		.loc 1 881 5 view .LVU166
 618 0022 0C94 0000 		jmp unregister_code
 619               	.LVL65:
 881:tmk_core/common/action.c **** }
 620               		.loc 1 881 5 view .LVU167
 621               		.cfi_endproc
 622               	.LFE111:
 624               		.section	.text.register_mods,"ax",@progbits
 625               	.global	register_mods
 627               	register_mods:
 628               	.LVL66:
 629               	.LFB112:
 883:tmk_core/common/action.c **** 
 884:tmk_core/common/action.c **** /** \brief Adds the given physically pressed modifiers and sends a keyboard report immediately.
 885:tmk_core/common/action.c ****  *
 886:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 887:tmk_core/common/action.c ****  */
 888:tmk_core/common/action.c **** void register_mods(uint8_t mods) {
 630               		.loc 1 888 34 is_stmt 1 view -0
 631               		.cfi_startproc
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 889:tmk_core/common/action.c ****     if (mods) {
 636               		.loc 1 889 5 view .LVU169
 637               		.loc 1 889 8 is_stmt 0 view .LVU170
 638 0000 8823      		tst r24
 639 0002 01F0      		breq .L40
 890:tmk_core/common/action.c ****         add_mods(mods);
 640               		.loc 1 890 9 is_stmt 1 view .LVU171
 641 0004 0E94 0000 		call add_mods
 642               	.LVL67:
 891:tmk_core/common/action.c ****         send_keyboard_report();
 643               		.loc 1 891 9 view .LVU172
 644 0008 0C94 0000 		jmp send_keyboard_report
 645               	.LVL68:
 646               	.L40:
 647               	/* epilogue start */
 892:tmk_core/common/action.c ****     }
 893:tmk_core/common/action.c **** }
 648               		.loc 1 893 1 is_stmt 0 view .LVU173
 649 000c 0895      		ret
 650               		.cfi_endproc
 651               	.LFE112:
 653               		.section	.text.unregister_mods,"ax",@progbits
 654               	.global	unregister_mods
 656               	unregister_mods:
 657               	.LVL69:
 658               	.LFB113:
 894:tmk_core/common/action.c **** 
 895:tmk_core/common/action.c **** /** \brief Removes the given physically pressed modifiers and sends a keyboard report immediately.
 896:tmk_core/common/action.c ****  *
 897:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 898:tmk_core/common/action.c ****  */
 899:tmk_core/common/action.c **** void unregister_mods(uint8_t mods) {
 659               		.loc 1 899 36 is_stmt 1 view -0
 660               		.cfi_startproc
 661               	/* prologue: function */
 662               	/* frame size = 0 */
 663               	/* stack size = 0 */
 664               	.L__stack_usage = 0
 900:tmk_core/common/action.c ****     if (mods) {
 665               		.loc 1 900 5 view .LVU175
 666               		.loc 1 900 8 is_stmt 0 view .LVU176
 667 0000 8823      		tst r24
 668 0002 01F0      		breq .L42
 901:tmk_core/common/action.c ****         del_mods(mods);
 669               		.loc 1 901 9 is_stmt 1 view .LVU177
 670 0004 0E94 0000 		call del_mods
 671               	.LVL70:
 902:tmk_core/common/action.c ****         send_keyboard_report();
 672               		.loc 1 902 9 view .LVU178
 673 0008 0C94 0000 		jmp send_keyboard_report
 674               	.LVL71:
 675               	.L42:
 676               	/* epilogue start */
 903:tmk_core/common/action.c ****     }
 904:tmk_core/common/action.c **** }
 677               		.loc 1 904 1 is_stmt 0 view .LVU179
 678 000c 0895      		ret
 679               		.cfi_endproc
 680               	.LFE113:
 682               		.section	.text.process_action,"ax",@progbits
 683               	.global	process_action
 685               	process_action:
 686               	.LVL72:
 687               	.LFB108:
 206:tmk_core/common/action.c ****     keyevent_t event = record->event;
 688               		.loc 1 206 59 is_stmt 1 view -0
 689               		.cfi_startproc
 206:tmk_core/common/action.c ****     keyevent_t event = record->event;
 690               		.loc 1 206 59 is_stmt 0 view .LVU181
 691 0000 BF92      		push r11
 692               	.LCFI5:
 693               		.cfi_def_cfa_offset 3
 694               		.cfi_offset 11, -2
 695 0002 CF92      		push r12
 696               	.LCFI6:
 697               		.cfi_def_cfa_offset 4
 698               		.cfi_offset 12, -3
 699 0004 DF92      		push r13
 700               	.LCFI7:
 701               		.cfi_def_cfa_offset 5
 702               		.cfi_offset 13, -4
 703 0006 EF92      		push r14
 704               	.LCFI8:
 705               		.cfi_def_cfa_offset 6
 706               		.cfi_offset 14, -5
 707 0008 FF92      		push r15
 708               	.LCFI9:
 709               		.cfi_def_cfa_offset 7
 710               		.cfi_offset 15, -6
 711 000a 0F93      		push r16
 712               	.LCFI10:
 713               		.cfi_def_cfa_offset 8
 714               		.cfi_offset 16, -7
 715 000c 1F93      		push r17
 716               	.LCFI11:
 717               		.cfi_def_cfa_offset 9
 718               		.cfi_offset 17, -8
 719 000e CF93      		push r28
 720               	.LCFI12:
 721               		.cfi_def_cfa_offset 10
 722               		.cfi_offset 28, -9
 723 0010 DF93      		push r29
 724               	.LCFI13:
 725               		.cfi_def_cfa_offset 11
 726               		.cfi_offset 29, -10
 727               	/* prologue: function */
 728               	/* frame size = 0 */
 729               	/* stack size = 9 */
 730               	.L__stack_usage = 9
 731 0012 6C01      		movw r12,r24
 732 0014 D62F      		mov r29,r22
 206:tmk_core/common/action.c ****     keyevent_t event = record->event;
 733               		.loc 1 206 59 view .LVU182
 734 0016 C72F      		mov r28,r23
 207:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 735               		.loc 1 207 5 is_stmt 1 view .LVU183
 736               	.LVL73:
 209:tmk_core/common/action.c **** #endif
 737               		.loc 1 209 5 view .LVU184
 209:tmk_core/common/action.c **** #endif
 738               		.loc 1 209 36 is_stmt 0 view .LVU185
 739 0018 FC01      		movw r30,r24
 740 001a 1581      		ldd r17,Z+5
 741 001c 1295      		swap r17
 742 001e 1F70      		andi r17,lo8(15)
 743               	.LVL74:
 212:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 744               		.loc 1 212 5 is_stmt 1 view .LVU186
 212:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 745               		.loc 1 212 14 is_stmt 0 view .LVU187
 746 0020 0281      		ldd r16,Z+2
 212:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 747               		.loc 1 212 8 view .LVU188
 748 0022 0111      		cpse r16,__zero_reg__
 214:tmk_core/common/action.c ****     }
 749               		.loc 1 214 9 is_stmt 1 view .LVU189
 750 0024 0E94 0000 		call clear_weak_mods
 751               	.LVL75:
 752               	.L45:
 218:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 753               		.loc 1 218 5 view .LVU190
 220:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 754               		.loc 1 220 5 view .LVU191
 220:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 755               		.loc 1 220 9 is_stmt 0 view .LVU192
 756 0028 0E94 0000 		call is_oneshot_layer_active
 757               	.LVL76:
 220:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 758               		.loc 1 220 9 view .LVU193
 759 002c E82E      		mov r14,r24
 220:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 760               		.loc 1 220 8 view .LVU194
 761 002e 8823      		tst r24
 762 0030 01F0      		breq .L46
 220:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 763               		.loc 1 220 35 discriminator 1 view .LVU195
 764 0032 0023      		tst r16
 765 0034 01F0      		breq .L116
 220:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 766               		.loc 1 220 55 discriminator 2 view .LVU196
 767 0036 80E2      		ldi r24,lo8(32)
 220:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 768               		.loc 1 220 55 discriminator 2 view .LVU197
 769 0038 8D0F      		add r24,r29
 220:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 770               		.loc 1 220 52 discriminator 2 view .LVU198
 771 003a 8830      		cpi r24,lo8(8)
 772 003c 00F0      		brlo .L116
 221:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 773               		.loc 1 221 9 is_stmt 1 view .LVU199
 774 003e 82E0      		ldi r24,lo8(2)
 775 0040 0E94 0000 		call clear_oneshot_layer_state
 776               	.LVL77:
 222:tmk_core/common/action.c ****     }
 777               		.loc 1 222 9 view .LVU200
 222:tmk_core/common/action.c ****     }
 778               		.loc 1 222 31 is_stmt 0 view .LVU201
 779 0044 0E94 0000 		call is_oneshot_layer_active
 780               	.LVL78:
 222:tmk_core/common/action.c ****     }
 781               		.loc 1 222 9 view .LVU202
 782 0048 91E0      		ldi r25,lo8(1)
 783 004a E82E      		mov r14,r24
 784 004c E926      		eor r14,r25
 785               	.LVL79:
 786               	.L46:
 226:tmk_core/common/action.c ****         /* Key and Mods */
 787               		.loc 1 226 5 is_stmt 1 view .LVU203
 226:tmk_core/common/action.c ****         /* Key and Mods */
 788               		.loc 1 226 24 is_stmt 0 view .LVU204
 789 004e BC2E      		mov r11,r28
 790 0050 B294      		swap r11
 791 0052 9FE0      		ldi r25,lo8(15)
 792 0054 B922      		and r11,r25
 226:tmk_core/common/action.c ****         /* Key and Mods */
 793               		.loc 1 226 5 view .LVU205
 794 0056 EB2D      		mov r30,r11
 795 0058 F0E0      		ldi r31,0
 796 005a E050      		subi r30,lo8(-(gs(.L49)))
 797 005c F040      		sbci r31,hi8(-(gs(.L49)))
 798 005e 0C94 0000 		jmp __tablejump2__
 799               		.section	.jumptables.gcc.process_action,"a",@progbits
 800               		.p2align	1
 801               	.L49:
 802 0000 0000      		.word gs(.L55)
 803 0002 0000      		.word gs(.L55)
 804 0004 0000      		.word gs(.L54)
 805 0006 0000      		.word gs(.L54)
 806 0008 0000      		.word gs(.L47)
 807 000a 0000      		.word gs(.L47)
 808 000c 0000      		.word gs(.L47)
 809 000e 0000      		.word gs(.L47)
 810 0010 0000      		.word gs(.L53)
 811 0012 0000      		.word gs(.L52)
 812 0014 0000      		.word gs(.L51)
 813 0016 0000      		.word gs(.L51)
 814 0018 0000      		.word gs(.L50)
 815 001a 0000      		.word gs(.L47)
 816 001c 0000      		.word gs(.L47)
 817 001e 0000      		.word gs(.L48)
 818               		.section	.text.process_action
 819               	.LVL80:
 820               	.L116:
 218:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 821               		.loc 1 218 10 view .LVU206
 822 0062 E12C      		mov r14,__zero_reg__
 823 0064 00C0      		rjmp .L46
 824               	.LVL81:
 825               	.L55:
 826               	.LBB42:
 230:tmk_core/common/action.c ****             if (event.pressed) {
 827               		.loc 1 230 13 is_stmt 1 view .LVU207
 828 0066 1C2F      		mov r17,r28
 829               	.LVL82:
 230:tmk_core/common/action.c ****             if (event.pressed) {
 830               		.loc 1 230 13 is_stmt 0 view .LVU208
 831 0068 1F70      		andi r17,lo8(15)
 230:tmk_core/common/action.c ****             if (event.pressed) {
 832               		.loc 1 230 44 view .LVU209
 833 006a C07F      		andi r28,lo8(-16)
 834               	.LVL83:
 230:tmk_core/common/action.c ****             if (event.pressed) {
 835               		.loc 1 230 21 view .LVU210
 836 006c 01F0      		breq .L56
 230:tmk_core/common/action.c ****             if (event.pressed) {
 837               		.loc 1 230 21 discriminator 2 view .LVU211
 838 006e 1295      		swap r17
 839 0070 107F      		andi r17,lo8(-16)
 840               	.L56:
 841               	.LVL84:
 231:tmk_core/common/action.c ****                 if (mods) {
 842               		.loc 1 231 13 is_stmt 1 discriminator 4 view .LVU212
 231:tmk_core/common/action.c ****                 if (mods) {
 843               		.loc 1 231 16 is_stmt 0 discriminator 4 view .LVU213
 844 0072 0023      		tst r16
 845 0074 01F0      		breq .L57
 232:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 846               		.loc 1 232 17 is_stmt 1 view .LVU214
 232:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 847               		.loc 1 232 20 is_stmt 0 view .LVU215
 848 0076 1123      		tst r17
 849 0078 01F0      		breq .L144
 233:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 850               		.loc 1 233 21 is_stmt 1 view .LVU216
 233:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 851               		.loc 1 233 25 is_stmt 0 view .LVU217
 852 007a 80E2      		ldi r24,lo8(32)
 853 007c 8D0F      		add r24,r29
 233:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 854               		.loc 1 233 24 view .LVU218
 855 007e 8830      		cpi r24,lo8(8)
 856 0080 00F0      		brlo .L59
 233:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 857               		.loc 1 233 49 discriminator 1 view .LVU219
 858 0082 D111      		cpse r29,__zero_reg__
 859 0084 00C0      		rjmp .L60
 860               	.L59:
 237:tmk_core/common/action.c ****                     } else {
 861               		.loc 1 237 25 is_stmt 1 view .LVU220
 862 0086 812F      		mov r24,r17
 863 0088 0E94 0000 		call add_mods
 864               	.LVL85:
 865               	.L61:
 241:tmk_core/common/action.c ****                 }
 866               		.loc 1 241 21 view .LVU221
 867 008c 0E94 0000 		call send_keyboard_report
 868               	.LVL86:
 243:tmk_core/common/action.c ****             } else {
 869               		.loc 1 243 17 view .LVU222
 870               	.L144:
 243:tmk_core/common/action.c ****             } else {
 871               		.loc 1 243 17 is_stmt 0 view .LVU223
 872               	.LBE42:
 534:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 873               		.loc 1 534 75 is_stmt 1 view .LVU224
 535:tmk_core/common/action.c ****                         } else {
 874               		.loc 1 535 29 view .LVU225
 875 0090 8D2F      		mov r24,r29
 876 0092 0E94 0000 		call register_code
 877               	.LVL87:
 878 0096 00C0      		rjmp .L47
 879               	.LVL88:
 880               	.L60:
 881               	.LBB43:
 239:tmk_core/common/action.c ****                     }
 882               		.loc 1 239 25 view .LVU226
 883 0098 812F      		mov r24,r17
 884 009a 0E94 0000 		call add_weak_mods
 885               	.LVL89:
 886 009e 00C0      		rjmp .L61
 887               	.L57:
 245:tmk_core/common/action.c ****                 if (mods) {
 888               		.loc 1 245 17 view .LVU227
 889 00a0 8D2F      		mov r24,r29
 890 00a2 0E94 0000 		call unregister_code
 891               	.LVL90:
 246:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 892               		.loc 1 246 17 view .LVU228
 246:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 893               		.loc 1 246 20 is_stmt 0 view .LVU229
 894 00a6 1123      		tst r17
 895 00a8 01F0      		breq .L47
 247:tmk_core/common/action.c ****                         del_mods(mods);
 896               		.loc 1 247 21 is_stmt 1 view .LVU230
 247:tmk_core/common/action.c ****                         del_mods(mods);
 897               		.loc 1 247 25 is_stmt 0 view .LVU231
 898 00aa 80E2      		ldi r24,lo8(32)
 899 00ac 8D0F      		add r24,r29
 247:tmk_core/common/action.c ****                         del_mods(mods);
 900               		.loc 1 247 24 view .LVU232
 901 00ae 8830      		cpi r24,lo8(8)
 902 00b0 00F0      		brlo .L63
 247:tmk_core/common/action.c ****                         del_mods(mods);
 903               		.loc 1 247 49 discriminator 1 view .LVU233
 904 00b2 D111      		cpse r29,__zero_reg__
 905 00b4 00C0      		rjmp .L64
 906               	.L63:
 248:tmk_core/common/action.c ****                     } else {
 907               		.loc 1 248 25 is_stmt 1 view .LVU234
 908 00b6 812F      		mov r24,r17
 909 00b8 0E94 0000 		call del_mods
 910               	.LVL91:
 911               	.L65:
 252:tmk_core/common/action.c ****                 }
 912               		.loc 1 252 21 view .LVU235
 913 00bc 0E94 0000 		call send_keyboard_report
 914               	.LVL92:
 915               	.L47:
 252:tmk_core/common/action.c ****                 }
 916               		.loc 1 252 21 is_stmt 0 view .LVU236
 917               	.LBE43:
 667:tmk_core/common/action.c ****         case ACT_LAYER:
 918               		.loc 1 667 5 is_stmt 1 view .LVU237
 919 00c0 2B2D      		mov r18,r11
 920 00c2 2850      		subi r18,8
 921 00c4 330B      		sbc r19,r19
 922 00c6 2430      		cpi r18,4
 923 00c8 3105      		cpc r19,__zero_reg__
 924 00ca 00F4      		brsh .L111
 674:tmk_core/common/action.c ****             break;
 925               		.loc 1 674 13 view .LVU238
 926 00cc 0E94 0000 		call host_keyboard_leds
 927               	.LVL93:
 928 00d0 0E94 0000 		call led_set
 929               	.LVL94:
 675:tmk_core/common/action.c ****         default:
 930               		.loc 1 675 13 view .LVU239
 931               	.L111:
 709:tmk_core/common/action.c ****         record->event.pressed = false;
 932               		.loc 1 709 5 view .LVU240
 709:tmk_core/common/action.c ****         record->event.pressed = false;
 933               		.loc 1 709 8 is_stmt 0 view .LVU241
 934 00d4 EE20      		tst r14
 935 00d6 01F4      		brne .+2
 936 00d8 00C0      		rjmp .L44
 709:tmk_core/common/action.c ****         record->event.pressed = false;
 937               		.loc 1 709 33 discriminator 1 view .LVU242
 938 00da 0E94 0000 		call get_oneshot_layer_state
 939               	.LVL95:
 709:tmk_core/common/action.c ****         record->event.pressed = false;
 940               		.loc 1 709 28 discriminator 1 view .LVU243
 941 00de 80FD      		sbrc r24,0
 942 00e0 00C0      		rjmp .L44
 710:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 943               		.loc 1 710 9 is_stmt 1 view .LVU244
 710:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 944               		.loc 1 710 31 is_stmt 0 view .LVU245
 945 00e2 F601      		movw r30,r12
 946 00e4 1282      		std Z+2,__zero_reg__
 711:tmk_core/common/action.c ****         process_record(record);
 947               		.loc 1 711 9 is_stmt 1 view .LVU246
 948 00e6 0E94 0000 		call get_oneshot_layer
 949               	.LVL96:
 950 00ea 0E94 0000 		call layer_on
 951               	.LVL97:
 712:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 952               		.loc 1 712 9 view .LVU247
 953 00ee C601      		movw r24,r12
 954 00f0 0E94 0000 		call process_record
 955               	.LVL98:
 713:tmk_core/common/action.c ****     }
 956               		.loc 1 713 9 view .LVU248
 957 00f4 0E94 0000 		call get_oneshot_layer
 958               	.LVL99:
 959               	/* epilogue start */
 716:tmk_core/common/action.c **** 
 960               		.loc 1 716 1 is_stmt 0 view .LVU249
 961 00f8 DF91      		pop r29
 962               	.LVL100:
 716:tmk_core/common/action.c **** 
 963               		.loc 1 716 1 view .LVU250
 964 00fa CF91      		pop r28
 716:tmk_core/common/action.c **** 
 965               		.loc 1 716 1 view .LVU251
 966 00fc 1F91      		pop r17
 967 00fe 0F91      		pop r16
 968 0100 FF90      		pop r15
 969 0102 EF90      		pop r14
 970               	.LVL101:
 716:tmk_core/common/action.c **** 
 971               		.loc 1 716 1 view .LVU252
 972 0104 DF90      		pop r13
 973 0106 CF90      		pop r12
 974               	.LVL102:
 716:tmk_core/common/action.c **** 
 975               		.loc 1 716 1 view .LVU253
 976 0108 BF90      		pop r11
 713:tmk_core/common/action.c ****     }
 977               		.loc 1 713 9 view .LVU254
 978 010a 0C94 0000 		jmp layer_off
 979               	.LVL103:
 980               	.L64:
 981               	.LBB44:
 250:tmk_core/common/action.c ****                     }
 982               		.loc 1 250 25 is_stmt 1 view .LVU255
 983 010e 812F      		mov r24,r17
 984 0110 0E94 0000 		call del_weak_mods
 985               	.LVL104:
 986 0114 00C0      		rjmp .L65
 987               	.LVL105:
 988               	.L54:
 250:tmk_core/common/action.c ****                     }
 989               		.loc 1 250 25 is_stmt 0 view .LVU256
 990               	.LBE44:
 991               	.LBB45:
 259:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 992               		.loc 1 259 13 is_stmt 1 view .LVU257
 993 0116 FC2F      		mov r31,r28
 994 0118 FF70      		andi r31,lo8(15)
 995 011a FF2E      		mov r15,r31
 259:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 996               		.loc 1 259 44 is_stmt 0 view .LVU258
 997 011c C07F      		andi r28,lo8(-16)
 998               	.LVL106:
 259:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 999               		.loc 1 259 21 view .LVU259
 1000 011e C032      		cpi r28,lo8(32)
 1001 0120 01F0      		breq .L66
 259:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1002               		.loc 1 259 21 discriminator 2 view .LVU260
 1003 0122 F294      		swap r15
 1004 0124 80EF      		ldi r24,lo8(-16)
 1005 0126 F822      		and r15,r24
 1006               	.L66:
 1007               	.LVL107:
 260:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 1008               		.loc 1 260 13 is_stmt 1 discriminator 4 view .LVU261
 1009 0128 DD23      		tst r29
 1010 012a 01F0      		breq .L67
 1011 012c D130      		cpi r29,lo8(1)
 1012 012e 01F0      		breq .L68
 315:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1013               		.loc 1 315 21 view .LVU262
 315:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1014               		.loc 1 315 24 is_stmt 0 view .LVU263
 1015 0130 0023      		tst r16
 1016 0132 01F0      		breq .L76
 316:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 1017               		.loc 1 316 25 is_stmt 1 view .LVU264
 316:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 1018               		.loc 1 316 28 is_stmt 0 view .LVU265
 1019 0134 1123      		tst r17
 1020 0136 01F0      		breq .L77
 318:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 1021               		.loc 1 318 29 is_stmt 1 view .LVU266
 322:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 1022               		.loc 1 322 33 is_stmt 0 view .LVU267
 1023 0138 F601      		movw r30,r12
 1024 013a 8581      		ldd r24,Z+5
 318:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 1025               		.loc 1 318 32 view .LVU268
 1026 013c 80FF      		sbrs r24,0
 1027 013e 00C0      		rjmp .L144
 323:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 1028               		.loc 1 323 76 is_stmt 1 view .LVU269
 325:tmk_core/common/action.c ****                                 register_mods(mods);
 1029               		.loc 1 325 33 view .LVU270
 325:tmk_core/common/action.c ****                                 register_mods(mods);
 1030               		.loc 1 325 51 is_stmt 0 view .LVU271
 1031 0140 8F70      		andi r24,lo8(15)
 1032 0142 8583      		std Z+5,r24
 326:tmk_core/common/action.c ****                             } else
 1033               		.loc 1 326 33 is_stmt 1 view .LVU272
 1034 0144 00C0      		rjmp .L77
 1035               	.L67:
 264:tmk_core/common/action.c ****                         if (tap_count == 0) {
 1036               		.loc 1 264 21 view .LVU273
 264:tmk_core/common/action.c ****                         if (tap_count == 0) {
 1037               		.loc 1 264 24 is_stmt 0 view .LVU274
 1038 0146 0023      		tst r16
 1039 0148 01F0      		breq .L70
 265:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 1040               		.loc 1 265 25 is_stmt 1 view .LVU275
 265:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 1041               		.loc 1 265 28 is_stmt 0 view .LVU276
 1042 014a 1111      		cpse r17,__zero_reg__
 1043 014c 00C0      		rjmp .L71
 1044               	.L72:
 279:tmk_core/common/action.c ****                         }
 1045               		.loc 1 279 29 is_stmt 1 view .LVU277
 279:tmk_core/common/action.c ****                         }
 1046               		.loc 1 279 50 is_stmt 0 view .LVU278
 1047 014e 0E94 0000 		call get_oneshot_mods
 1048               	.LVL108:
 279:tmk_core/common/action.c ****                         }
 1049               		.loc 1 279 29 view .LVU279
 1050 0152 8F29      		or r24,r15
 1051               	.LVL109:
 1052               	.L143:
 279:tmk_core/common/action.c ****                         }
 1053               		.loc 1 279 29 view .LVU280
 1054               	.LBE45:
 461:tmk_core/common/action.c ****             } else {
 1055               		.loc 1 461 17 view .LVU281
 1056 0154 0E94 0000 		call register_mods
 1057               	.LVL110:
 1058 0158 00C0      		rjmp .L47
 1059               	.LVL111:
 1060               	.L71:
 1061               	.LBB48:
 268:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 1062               		.loc 1 268 32 is_stmt 1 view .LVU282
 268:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 1063               		.loc 1 268 35 is_stmt 0 view .LVU283
 1064 015a 1130      		cpi r17,lo8(1)
 1065 015c 01F4      		brne .L72
 269:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 1066               		.loc 1 269 65 is_stmt 1 view .LVU284
 270:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1067               		.loc 1 270 29 view .LVU285
 270:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1068               		.loc 1 270 53 is_stmt 0 view .LVU286
 1069 015e 0E94 0000 		call get_oneshot_mods
 1070               	.LVL112:
 270:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1071               		.loc 1 270 29 view .LVU287
 1072 0162 8F29      		or r24,r15
 1073 0164 0E94 0000 		call set_oneshot_mods
 1074               	.LVL113:
 1075 0168 00C0      		rjmp .L47
 1076               	.L70:
 282:tmk_core/common/action.c ****                             clear_oneshot_mods();
 1077               		.loc 1 282 25 is_stmt 1 view .LVU288
 282:tmk_core/common/action.c ****                             clear_oneshot_mods();
 1078               		.loc 1 282 28 is_stmt 0 view .LVU289
 1079 016a 1111      		cpse r17,__zero_reg__
 1080 016c 00C0      		rjmp .L73
 1081               	.L145:
 297:tmk_core/common/action.c ****                             unregister_mods(mods);
 1082               		.loc 1 297 29 is_stmt 1 view .LVU290
 1083 016e 0E94 0000 		call clear_oneshot_mods
 1084               	.LVL114:
 298:tmk_core/common/action.c ****                         }
 1085               		.loc 1 298 29 view .LVU291
 1086               	.L79:
 345:tmk_core/common/action.c ****                             unregister_mods(mods);
 1087               		.loc 1 345 67 view .LVU292
 346:tmk_core/common/action.c ****                         }
 1088               		.loc 1 346 29 view .LVU293
 1089 0172 8F2D      		mov r24,r15
 1090 0174 0E94 0000 		call unregister_mods
 1091               	.LVL115:
 1092 0178 00C0      		rjmp .L47
 1093               	.L73:
 285:tmk_core/common/action.c ****                             // Retain Oneshot mods
 1094               		.loc 1 285 32 view .LVU294
 285:tmk_core/common/action.c ****                             // Retain Oneshot mods
 1095               		.loc 1 285 35 is_stmt 0 view .LVU295
 1096 017a 1130      		cpi r17,lo8(1)
 1097 017c 01F4      		brne .+2
 1098 017e 00C0      		rjmp .L47
 1099 0180 00C0      		rjmp .L145
 1100               	.L68:
 304:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1101               		.loc 1 304 21 is_stmt 1 view .LVU296
 304:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1102               		.loc 1 304 24 is_stmt 0 view .LVU297
 1103 0182 0023      		tst r16
 1104 0184 01F0      		breq .L75
 305:tmk_core/common/action.c ****                             register_mods(mods);
 1105               		.loc 1 305 25 is_stmt 1 view .LVU298
 305:tmk_core/common/action.c ****                             register_mods(mods);
 1106               		.loc 1 305 28 is_stmt 0 view .LVU299
 1107 0186 1630      		cpi r17,lo8(6)
 1108 0188 00F0      		brlo .+2
 1109 018a 00C0      		rjmp .L47
 1110               	.L77:
 334:tmk_core/common/action.c ****                             register_mods(mods);
 1111               		.loc 1 334 67 is_stmt 1 view .LVU300
 335:tmk_core/common/action.c ****                         }
 1112               		.loc 1 335 29 view .LVU301
 1113 018c 8F2D      		mov r24,r15
 1114 018e 00C0      		rjmp .L143
 1115               	.L75:
 309:tmk_core/common/action.c ****                             unregister_mods(mods);
 1116               		.loc 1 309 25 view .LVU302
 309:tmk_core/common/action.c ****                             unregister_mods(mods);
 1117               		.loc 1 309 28 is_stmt 0 view .LVU303
 1118 0190 1530      		cpi r17,lo8(5)
 1119 0192 00F0      		brlo .+2
 1120 0194 00C0      		rjmp .L47
 1121 0196 00C0      		rjmp .L79
 1122               	.L76:
 338:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 1123               		.loc 1 338 25 is_stmt 1 view .LVU304
 338:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 1124               		.loc 1 338 28 is_stmt 0 view .LVU305
 1125 0198 1123      		tst r17
 1126 019a 01F0      		breq .L79
 339:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1127               		.loc 1 339 71 is_stmt 1 view .LVU306
 340:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1128               		.loc 1 340 29 view .LVU307
 340:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1129               		.loc 1 340 32 is_stmt 0 view .LVU308
 1130 019c D933      		cpi r29,lo8(57)
 1131 019e 01F4      		brne .L110
 341:tmk_core/common/action.c ****                             }
 1132               		.loc 1 341 33 is_stmt 1 view .LVU309
 1133               	.LVL116:
 1134               	.LBB46:
 1135               	.LBI46:
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1136               		.loc 2 166 1 view .LVU310
 1137               	.LBB47:
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1138               		.loc 2 168 2 view .LVU311
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1139               		.loc 2 172 2 view .LVU312
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1140               		.loc 2 173 2 view .LVU313
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1141               		.loc 2 174 2 view .LVU314
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1142               		.loc 2 184 3 view .LVU315
 1143               		.loc 2 187 2 view .LVU316
 1144 01a0 FFEF      		ldi r31,lo8(255999)
 1145 01a2 27EE      		ldi r18,hi8(255999)
 1146 01a4 33E0      		ldi r19,hlo8(255999)
 1147 01a6 F150      	1:	subi r31,1
 1148 01a8 2040      		sbci r18,0
 1149 01aa 3040      		sbci r19,0
 1150 01ac 01F4      		brne 1b
 1151               	.LVL117:
 1152               	.L146:
 1153               		.loc 2 187 2 is_stmt 0 view .LVU317
 1154               	.LBE47:
 1155               	.LBE46:
 1156               	.LBE48:
 1157               	.LBB49:
 1158               	.LBB50:
 1159 01ae 00C0      		rjmp .
 1160 01b0 0000      		nop
 1161               	.L110:
 1162               	.LBE50:
 1163               	.LBE49:
 548:tmk_core/common/action.c ****                         } else {
 1164               		.loc 1 548 29 is_stmt 1 view .LVU318
 1165 01b2 8D2F      		mov r24,r29
 1166 01b4 0E94 0000 		call unregister_code
 1167               	.LVL118:
 1168 01b8 00C0      		rjmp .L47
 1169               	.L53:
 414:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1170               		.loc 1 414 13 view .LVU319
 414:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1171               		.loc 1 414 39 is_stmt 0 view .LVU320
 1172 01ba 8C2F      		mov r24,r28
 1173 01bc 8370      		andi r24,lo8(3)
 414:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1174               		.loc 1 414 16 view .LVU321
 1175 01be 01F0      		breq .+2
 1176 01c0 00C0      		rjmp .L81
 416:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1177               		.loc 1 416 17 is_stmt 1 view .LVU322
 416:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1178               		.loc 1 416 20 is_stmt 0 view .LVU323
 1179 01c2 0111      		cpse r16,__zero_reg__
 1180 01c4 00C0      		rjmp .L47
 1181               	.LBB52:
 417:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1182               		.loc 1 417 21 is_stmt 1 view .LVU324
 1183               	.LVL119:
 418:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1184               		.loc 1 418 21 view .LVU325
 417:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1185               		.loc 1 417 61 is_stmt 0 view .LVU326
 1186 01c6 4D2F      		mov r20,r29
 1187 01c8 4295      		swap r20
 1188 01ca 4695      		lsr r20
 1189 01cc 4770      		andi r20,lo8(7)
 417:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1190               		.loc 1 417 35 view .LVU327
 1191 01ce 440F      		lsl r20
 1192 01d0 440F      		lsl r20
 418:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1193               		.loc 1 418 77 view .LVU328
 1194 01d2 0D2F      		mov r16,r29
 1195               	.LVL120:
 418:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1196               		.loc 1 418 77 view .LVU329
 1197 01d4 0F70      		andi r16,lo8(15)
 418:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1198               		.loc 1 418 44 view .LVU330
 1199 01d6 10E0      		ldi r17,0
 1200               	.LVL121:
 418:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1201               		.loc 1 418 44 view .LVU331
 1202 01d8 30E0      		ldi r19,0
 1203 01da 20E0      		ldi r18,0
 418:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1204               		.loc 1 418 35 view .LVU332
 1205 01dc 042E      		mov r0,r20
 1206 01de 00C0      		rjmp 2f
 1207               		1:
 1208 01e0 000F      		lsl r16
 1209 01e2 111F      		rol r17
 1210 01e4 221F      		rol r18
 1211 01e6 331F      		rol r19
 1212               		2:
 1213 01e8 0A94      		dec r0
 1214 01ea 02F4      		brpl 1b
 1215               	.LVL122:
 419:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1216               		.loc 1 419 21 is_stmt 1 view .LVU333
 419:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1217               		.loc 1 419 104 is_stmt 0 view .LVU334
 1218 01ec 60E0      		ldi r22,0
 1219 01ee 70E0      		ldi r23,0
 1220 01f0 CB01      		movw r24,r22
 1221 01f2 D4FF      		sbrs r29,4
 1222 01f4 00C0      		rjmp .L82
 419:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1223               		.loc 1 419 94 discriminator 1 view .LVU335
 1224 01f6 6FE0      		ldi r22,lo8(15)
 1225 01f8 70E0      		ldi r23,0
 1226 01fa 80E0      		ldi r24,0
 1227 01fc 90E0      		ldi r25,0
 1228 01fe 00C0      		rjmp 2f
 1229               		1:
 1230 0200 660F      		lsl r22
 1231 0202 771F      		rol r23
 1232 0204 881F      		rol r24
 1233 0206 991F      		rol r25
 1234               		2:
 1235 0208 4A95      		dec r20
 1236 020a 02F4      		brpl 1b
 419:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1237               		.loc 1 419 104 discriminator 1 view .LVU336
 1238 020c 6095      		com r22
 1239 020e 7095      		com r23
 1240 0210 8095      		com r24
 1241 0212 9095      		com r25
 1242               	.L82:
 1243               	.LVL123:
 420:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1244               		.loc 1 420 21 is_stmt 1 discriminator 4 view .LVU337
 420:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1245               		.loc 1 420 47 is_stmt 0 discriminator 4 view .LVU338
 1246 0214 C695      		lsr r28
 1247 0216 C695      		lsr r28
 1248               	.LVL124:
 420:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1249               		.loc 1 420 47 discriminator 4 view .LVU339
 1250 0218 C370      		andi r28,lo8(3)
 1251 021a 602B      		or r22,r16
 1252               	.LVL125:
 420:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1253               		.loc 1 420 47 discriminator 4 view .LVU340
 1254 021c 712B      		or r23,r17
 1255 021e 822B      		or r24,r18
 1256 0220 932B      		or r25,r19
 1257 0222 C230      		cpi r28,lo8(2)
 1258 0224 01F0      		breq .L83
 1259 0226 00F4      		brsh .L84
 1260 0228 C130      		cpi r28,lo8(1)
 1261 022a 01F0      		breq .L85
 422:tmk_core/common/action.c ****                             break;
 1262               		.loc 1 422 29 is_stmt 1 view .LVU341
 1263 022c 0E94 0000 		call default_layer_and
 1264               	.LVL126:
 423:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1265               		.loc 1 423 29 view .LVU342
 1266 0230 00C0      		rjmp .L47
 1267               	.L85:
 425:tmk_core/common/action.c ****                             break;
 1268               		.loc 1 425 29 view .LVU343
 1269 0232 0E94 0000 		call default_layer_or
 1270               	.LVL127:
 426:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1271               		.loc 1 426 29 view .LVU344
 1272 0236 00C0      		rjmp .L47
 1273               	.L83:
 428:tmk_core/common/action.c ****                             break;
 1274               		.loc 1 428 29 view .LVU345
 1275 0238 0E94 0000 		call default_layer_xor
 1276               	.LVL128:
 429:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1277               		.loc 1 429 29 view .LVU346
 1278 023c 00C0      		rjmp .L47
 1279               	.L84:
 431:tmk_core/common/action.c ****                             break;
 1280               		.loc 1 431 29 view .LVU347
 1281 023e 0E94 0000 		call default_layer_set
 1282               	.LVL129:
 432:tmk_core/common/action.c ****                     }
 1283               		.loc 1 432 29 view .LVU348
 1284 0242 00C0      		rjmp .L47
 1285               	.LVL130:
 1286               	.L81:
 432:tmk_core/common/action.c ****                     }
 1287               		.loc 1 432 29 is_stmt 0 view .LVU349
 1288               	.LBE52:
 437:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1289               		.loc 1 437 17 is_stmt 1 view .LVU350
 437:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1290               		.loc 1 437 21 is_stmt 0 view .LVU351
 1291 0244 8695      		lsr r24
 1292 0246 0023      		tst r16
 1293 0248 01F0      		breq .L87
 437:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1294               		.loc 1 437 21 discriminator 1 view .LVU352
 1295 024a 8C2F      		mov r24,r28
 1296 024c 8170      		andi r24,lo8(1)
 1297               	.L87:
 437:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1298               		.loc 1 437 20 discriminator 4 view .LVU353
 1299 024e 8823      		tst r24
 1300 0250 01F4      		brne .+2
 1301 0252 00C0      		rjmp .L47
 1302               	.LBB53:
 438:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1303               		.loc 1 438 21 is_stmt 1 view .LVU354
 1304               	.LVL131:
 439:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1305               		.loc 1 439 21 view .LVU355
 438:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1306               		.loc 1 438 61 is_stmt 0 view .LVU356
 1307 0254 4D2F      		mov r20,r29
 1308 0256 4295      		swap r20
 1309 0258 4695      		lsr r20
 1310 025a 4770      		andi r20,lo8(7)
 438:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1311               		.loc 1 438 35 view .LVU357
 1312 025c 440F      		lsl r20
 1313 025e 440F      		lsl r20
 439:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1314               		.loc 1 439 77 view .LVU358
 1315 0260 0D2F      		mov r16,r29
 1316               	.LVL132:
 439:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1317               		.loc 1 439 77 view .LVU359
 1318 0262 0F70      		andi r16,lo8(15)
 439:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1319               		.loc 1 439 44 view .LVU360
 1320 0264 10E0      		ldi r17,0
 1321               	.LVL133:
 439:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1322               		.loc 1 439 44 view .LVU361
 1323 0266 30E0      		ldi r19,0
 1324 0268 20E0      		ldi r18,0
 439:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1325               		.loc 1 439 35 view .LVU362
 1326 026a 042E      		mov r0,r20
 1327 026c 00C0      		rjmp 2f
 1328               		1:
 1329 026e 000F      		lsl r16
 1330 0270 111F      		rol r17
 1331 0272 221F      		rol r18
 1332 0274 331F      		rol r19
 1333               		2:
 1334 0276 0A94      		dec r0
 1335 0278 02F4      		brpl 1b
 1336               	.LVL134:
 440:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1337               		.loc 1 440 21 is_stmt 1 view .LVU363
 440:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1338               		.loc 1 440 104 is_stmt 0 view .LVU364
 1339 027a 60E0      		ldi r22,0
 1340 027c 70E0      		ldi r23,0
 1341 027e CB01      		movw r24,r22
 1342 0280 D4FF      		sbrs r29,4
 1343 0282 00C0      		rjmp .L88
 440:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1344               		.loc 1 440 94 discriminator 1 view .LVU365
 1345 0284 6FE0      		ldi r22,lo8(15)
 1346 0286 70E0      		ldi r23,0
 1347 0288 80E0      		ldi r24,0
 1348 028a 90E0      		ldi r25,0
 1349 028c 00C0      		rjmp 2f
 1350               		1:
 1351 028e 660F      		lsl r22
 1352 0290 771F      		rol r23
 1353 0292 881F      		rol r24
 1354 0294 991F      		rol r25
 1355               		2:
 1356 0296 4A95      		dec r20
 1357 0298 02F4      		brpl 1b
 440:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1358               		.loc 1 440 104 discriminator 1 view .LVU366
 1359 029a 6095      		com r22
 1360 029c 7095      		com r23
 1361 029e 8095      		com r24
 1362 02a0 9095      		com r25
 1363               	.L88:
 1364               	.LVL135:
 441:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1365               		.loc 1 441 21 is_stmt 1 discriminator 4 view .LVU367
 441:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1366               		.loc 1 441 47 is_stmt 0 discriminator 4 view .LVU368
 1367 02a2 C695      		lsr r28
 1368 02a4 C695      		lsr r28
 1369               	.LVL136:
 441:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1370               		.loc 1 441 47 discriminator 4 view .LVU369
 1371 02a6 C370      		andi r28,lo8(3)
 1372 02a8 602B      		or r22,r16
 1373               	.LVL137:
 441:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1374               		.loc 1 441 47 discriminator 4 view .LVU370
 1375 02aa 712B      		or r23,r17
 1376 02ac 822B      		or r24,r18
 1377 02ae 932B      		or r25,r19
 1378 02b0 C230      		cpi r28,lo8(2)
 1379 02b2 01F0      		breq .L89
 1380 02b4 00F4      		brsh .L90
 1381 02b6 C130      		cpi r28,lo8(1)
 1382 02b8 01F0      		breq .L91
 443:tmk_core/common/action.c ****                             break;
 1383               		.loc 1 443 29 is_stmt 1 view .LVU371
 1384 02ba 0E94 0000 		call layer_and
 1385               	.LVL138:
 444:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1386               		.loc 1 444 29 view .LVU372
 1387 02be 00C0      		rjmp .L47
 1388               	.L91:
 446:tmk_core/common/action.c ****                             break;
 1389               		.loc 1 446 29 view .LVU373
 1390 02c0 0E94 0000 		call layer_or
 1391               	.LVL139:
 447:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1392               		.loc 1 447 29 view .LVU374
 1393 02c4 00C0      		rjmp .L47
 1394               	.L89:
 449:tmk_core/common/action.c ****                             break;
 1395               		.loc 1 449 29 view .LVU375
 1396 02c6 0E94 0000 		call layer_xor
 1397               	.LVL140:
 450:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1398               		.loc 1 450 29 view .LVU376
 1399 02ca 00C0      		rjmp .L47
 1400               	.L90:
 452:tmk_core/common/action.c ****                             break;
 1401               		.loc 1 452 29 view .LVU377
 1402 02cc 0E94 0000 		call layer_state_set
 1403               	.LVL141:
 453:tmk_core/common/action.c ****                     }
 1404               		.loc 1 453 29 view .LVU378
 1405 02d0 00C0      		rjmp .L47
 1406               	.LVL142:
 1407               	.L52:
 453:tmk_core/common/action.c ****                     }
 1408               		.loc 1 453 29 is_stmt 0 view .LVU379
 1409               	.LBE53:
 459:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1410               		.loc 1 459 13 is_stmt 1 view .LVU380
 1411 02d2 CF70      		andi r28,lo8(15)
 1412               	.LVL143:
 459:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1413               		.loc 1 459 16 is_stmt 0 view .LVU381
 1414 02d4 0023      		tst r16
 1415 02d6 01F0      		breq .L92
 460:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 1416               		.loc 1 460 17 is_stmt 1 view .LVU382
 1417 02d8 8C2F      		mov r24,r28
 1418 02da 0E94 0000 		call layer_on
 1419               	.LVL144:
 461:tmk_core/common/action.c ****             } else {
 1420               		.loc 1 461 17 view .LVU383
 1421 02de 8D2F      		mov r24,r29
 1422 02e0 00C0      		rjmp .L143
 1423               	.L92:
 463:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 1424               		.loc 1 463 17 view .LVU384
 1425 02e2 8D2F      		mov r24,r29
 1426 02e4 0E94 0000 		call unregister_mods
 1427               	.LVL145:
 464:tmk_core/common/action.c ****             }
 1428               		.loc 1 464 17 view .LVU385
 1429 02e8 8C2F      		mov r24,r28
 1430               	.LVL146:
 1431               	.L141:
 551:tmk_core/common/action.c ****                         }
 1432               		.loc 1 551 29 is_stmt 0 view .LVU386
 1433 02ea 0E94 0000 		call layer_off
 1434               	.LVL147:
 1435 02ee 00C0      		rjmp .L47
 1436               	.L51:
 470:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 1437               		.loc 1 470 13 is_stmt 1 view .LVU387
 1438 02f0 D23F      		cpi r29,lo8(-14)
 1439 02f2 01F0      		breq .L93
 1440 02f4 00F4      		brsh .L94
 1441 02f6 D03F      		cpi r29,lo8(-16)
 1442 02f8 01F0      		breq .L95
 1443 02fa D13F      		cpi r29,lo8(-15)
 1444 02fc 01F0      		breq .L96
 1445               	.L97:
 532:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1446               		.loc 1 532 21 view .LVU388
 532:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1447               		.loc 1 532 24 is_stmt 0 view .LVU389
 1448 02fe 0023      		tst r16
 1449 0300 01F4      		brne .+2
 1450 0302 00C0      		rjmp .L106
 533:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1451               		.loc 1 533 25 is_stmt 1 view .LVU390
 533:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1452               		.loc 1 533 28 is_stmt 0 view .LVU391
 1453 0304 1111      		cpse r17,__zero_reg__
 1454 0306 00C0      		rjmp .L144
 537:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1455               		.loc 1 537 76 is_stmt 1 view .LVU392
 538:tmk_core/common/action.c ****                         }
 1456               		.loc 1 538 29 view .LVU393
 1457 0308 8C2F      		mov r24,r28
 1458 030a 8F71      		andi r24,lo8(31)
 1459 030c 00C0      		rjmp .L142
 1460               	.L94:
 1461 030e D33F      		cpi r29,lo8(-13)
 1462 0310 01F0      		breq .L98
 1463 0312 D43F      		cpi r29,lo8(-12)
 1464 0314 01F4      		brne .L97
 518:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1465               		.loc 1 518 21 view .LVU394
 518:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1466               		.loc 1 518 24 is_stmt 0 view .LVU395
 1467 0316 0023      		tst r16
 1468 0318 01F0      		breq .L105
 519:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1469               		.loc 1 519 25 is_stmt 1 view .LVU396
 519:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1470               		.loc 1 519 50 is_stmt 0 view .LVU397
 1471 031a CF71      		andi r28,lo8(31)
 1472               	.LVL148:
 519:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1473               		.loc 1 519 25 view .LVU398
 1474 031c 8C2F      		mov r24,r28
 1475 031e 0E94 0000 		call layer_on
 1476               	.LVL149:
 520:tmk_core/common/action.c ****                     } else {
 1477               		.loc 1 520 25 is_stmt 1 view .LVU399
 1478 0322 63E0      		ldi r22,lo8(3)
 1479 0324 8C2F      		mov r24,r28
 1480 0326 0E94 0000 		call set_oneshot_layer
 1481               	.LVL150:
 1482 032a 00C0      		rjmp .L47
 1483               	.LVL151:
 1484               	.L95:
 473:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1485               		.loc 1 473 21 view .LVU400
 473:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1486               		.loc 1 473 24 is_stmt 0 view .LVU401
 1487 032c 0023      		tst r16
 1488 032e 01F0      		breq .L100
 474:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1489               		.loc 1 474 25 is_stmt 1 view .LVU402
 474:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1490               		.loc 1 474 28 is_stmt 0 view .LVU403
 1491 0330 1530      		cpi r17,lo8(5)
 1492 0332 00F0      		brlo .+2
 1493 0334 00C0      		rjmp .L47
 1494               	.L101:
 475:tmk_core/common/action.c ****                         }
 1495               		.loc 1 475 29 is_stmt 1 view .LVU404
 1496 0336 8C2F      		mov r24,r28
 1497 0338 8F71      		andi r24,lo8(31)
 1498 033a 0E94 0000 		call layer_invert
 1499               	.LVL152:
 1500 033e 00C0      		rjmp .L47
 1501               	.L100:
 478:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1502               		.loc 1 478 25 view .LVU405
 478:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1503               		.loc 1 478 28 is_stmt 0 view .LVU406
 1504 0340 1630      		cpi r17,lo8(6)
 1505 0342 00F0      		brlo .+2
 1506 0344 00C0      		rjmp .L47
 1507 0346 00C0      		rjmp .L101
 1508               	.L96:
 484:tmk_core/common/action.c ****                     break;
 1509               		.loc 1 484 21 is_stmt 1 view .LVU407
 1510 0348 8C2F      		mov r24,r28
 1511 034a 8F71      		andi r24,lo8(31)
 484:tmk_core/common/action.c ****                     break;
 1512               		.loc 1 484 68 is_stmt 0 view .LVU408
 1513 034c 0023      		tst r16
 1514 034e 01F0      		breq .L141
 1515               	.L142:
 538:tmk_core/common/action.c ****                         }
 1516               		.loc 1 538 29 view .LVU409
 1517 0350 0E94 0000 		call layer_on
 1518               	.LVL153:
 1519 0354 00C0      		rjmp .L47
 1520               	.L93:
 487:tmk_core/common/action.c ****                     break;
 1521               		.loc 1 487 21 is_stmt 1 view .LVU410
 1522 0356 8C2F      		mov r24,r28
 1523 0358 8F71      		andi r24,lo8(31)
 487:tmk_core/common/action.c ****                     break;
 1524               		.loc 1 487 69 is_stmt 0 view .LVU411
 1525 035a 0023      		tst r16
 1526 035c 01F0      		breq .L142
 1527 035e 00C0      		rjmp .L141
 1528               	.L98:
 490:tmk_core/common/action.c ****                     break;
 1529               		.loc 1 490 21 is_stmt 1 view .LVU412
 490:tmk_core/common/action.c ****                     break;
 1530               		.loc 1 490 70 is_stmt 0 view .LVU413
 1531 0360 0023      		tst r16
 1532 0362 01F0      		breq .L104
 490:tmk_core/common/action.c ****                     break;
 1533               		.loc 1 490 37 discriminator 1 view .LVU414
 1534 0364 8C2F      		mov r24,r28
 1535 0366 8F71      		andi r24,lo8(31)
 1536 0368 0E94 0000 		call layer_move
 1537               	.LVL154:
 1538 036c 00C0      		rjmp .L47
 1539               	.L104:
 490:tmk_core/common/action.c ****                     break;
 1540               		.loc 1 490 72 discriminator 2 view .LVU415
 1541 036e 0E94 0000 		call layer_clear
 1542               	.LVL155:
 1543 0372 00C0      		rjmp .L47
 1544               	.L105:
 522:tmk_core/common/action.c ****                         if (tap_count > 1) {
 1545               		.loc 1 522 25 is_stmt 1 view .LVU416
 1546 0374 81E0      		ldi r24,lo8(1)
 1547 0376 0E94 0000 		call clear_oneshot_layer_state
 1548               	.LVL156:
 523:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1549               		.loc 1 523 25 view .LVU417
 523:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1550               		.loc 1 523 28 is_stmt 0 view .LVU418
 1551 037a 1230      		cpi r17,lo8(2)
 1552 037c 00F4      		brsh .+2
 1553 037e 00C0      		rjmp .L47
 524:tmk_core/common/action.c ****                         }
 1554               		.loc 1 524 29 is_stmt 1 view .LVU419
 1555 0380 82E0      		ldi r24,lo8(2)
 1556 0382 0E94 0000 		call clear_oneshot_layer_state
 1557               	.LVL157:
 1558 0386 00C0      		rjmp .L47
 1559               	.L106:
 541:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1560               		.loc 1 541 25 view .LVU420
 541:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1561               		.loc 1 541 28 is_stmt 0 view .LVU421
 1562 0388 1123      		tst r17
 1563 038a 01F0      		breq .L108
 542:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1564               		.loc 1 542 77 is_stmt 1 view .LVU422
 543:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1565               		.loc 1 543 29 view .LVU423
 543:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1566               		.loc 1 543 32 is_stmt 0 view .LVU424
 1567 038c D933      		cpi r29,lo8(57)
 1568 038e 01F0      		breq .+2
 1569 0390 00C0      		rjmp .L110
 544:tmk_core/common/action.c ****                             } else {
 1570               		.loc 1 544 33 is_stmt 1 view .LVU425
 1571               	.LVL158:
 1572               	.LBB54:
 1573               	.LBI49:
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1574               		.loc 2 166 1 view .LVU426
 1575               	.LBB51:
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1576               		.loc 2 168 2 view .LVU427
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1577               		.loc 2 172 2 view .LVU428
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1578               		.loc 2 173 2 view .LVU429
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1579               		.loc 2 174 2 view .LVU430
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1580               		.loc 2 184 3 view .LVU431
 1581               		.loc 2 187 2 view .LVU432
 1582 0392 8FEF      		ldi r24,lo8(255999)
 1583 0394 97EE      		ldi r25,hi8(255999)
 1584 0396 E3E0      		ldi r30,hlo8(255999)
 1585 0398 8150      	1:	subi r24,1
 1586 039a 9040      		sbci r25,0
 1587 039c E040      		sbci r30,0
 1588 039e 01F4      		brne 1b
 1589 03a0 00C0      		rjmp .L146
 1590               	.LVL159:
 1591               	.L108:
 1592               		.loc 2 187 2 is_stmt 0 view .LVU433
 1593               	.LBE51:
 1594               	.LBE54:
 550:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1595               		.loc 1 550 79 is_stmt 1 view .LVU434
 551:tmk_core/common/action.c ****                         }
 1596               		.loc 1 551 29 view .LVU435
 1597 03a2 8C2F      		mov r24,r28
 1598 03a4 8F71      		andi r24,lo8(31)
 1599 03a6 00C0      		rjmp .L141
 1600               	.L50:
 562:tmk_core/common/action.c ****             break;
 1601               		.loc 1 562 13 view .LVU436
 562:tmk_core/common/action.c ****             break;
 1602               		.loc 1 562 83 is_stmt 0 view .LVU437
 1603 03a8 4C2F      		mov r20,r28
 1604 03aa 4F70      		andi r20,lo8(15)
 562:tmk_core/common/action.c ****             break;
 1605               		.loc 1 562 13 view .LVU438
 1606 03ac 6D2F      		mov r22,r29
 1607 03ae C601      		movw r24,r12
 1608 03b0 0E94 0000 		call action_get_macro
 1609               	.LVL160:
 1610 03b4 0E94 0000 		call action_macro_play
 1611               	.LVL161:
 563:tmk_core/common/action.c **** #endif
 1612               		.loc 1 563 13 is_stmt 1 view .LVU439
 1613 03b8 00C0      		rjmp .L47
 1614               	.L48:
 658:tmk_core/common/action.c ****             break;
 1615               		.loc 1 658 13 view .LVU440
 658:tmk_core/common/action.c ****             break;
 1616               		.loc 1 658 64 is_stmt 0 view .LVU441
 1617 03ba 4C2F      		mov r20,r28
 1618 03bc 4F70      		andi r20,lo8(15)
 658:tmk_core/common/action.c ****             break;
 1619               		.loc 1 658 13 view .LVU442
 1620 03be 6D2F      		mov r22,r29
 1621 03c0 C601      		movw r24,r12
 1622 03c2 0E94 0000 		call action_function
 1623               	.LVL162:
 659:tmk_core/common/action.c **** #endif
 1624               		.loc 1 659 13 is_stmt 1 view .LVU443
 1625 03c6 00C0      		rjmp .L47
 1626               	.LVL163:
 1627               	.L44:
 1628               	/* epilogue start */
 716:tmk_core/common/action.c **** 
 1629               		.loc 1 716 1 is_stmt 0 view .LVU444
 1630 03c8 DF91      		pop r29
 1631               	.LVL164:
 716:tmk_core/common/action.c **** 
 1632               		.loc 1 716 1 view .LVU445
 1633 03ca CF91      		pop r28
 716:tmk_core/common/action.c **** 
 1634               		.loc 1 716 1 view .LVU446
 1635 03cc 1F91      		pop r17
 1636 03ce 0F91      		pop r16
 1637 03d0 FF90      		pop r15
 1638 03d2 EF90      		pop r14
 1639               	.LVL165:
 716:tmk_core/common/action.c **** 
 1640               		.loc 1 716 1 view .LVU447
 1641 03d4 DF90      		pop r13
 1642 03d6 CF90      		pop r12
 1643               	.LVL166:
 716:tmk_core/common/action.c **** 
 1644               		.loc 1 716 1 view .LVU448
 1645 03d8 BF90      		pop r11
 1646 03da 0895      		ret
 1647               		.cfi_endproc
 1648               	.LFE108:
 1650               		.section	.text.process_record,"ax",@progbits
 1651               	.global	process_record
 1653               	process_record:
 1654               	.LVL167:
 1655               	.LFB107:
 181:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1656               		.loc 1 181 42 is_stmt 1 view -0
 1657               		.cfi_startproc
 181:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1658               		.loc 1 181 42 is_stmt 0 view .LVU450
 1659 0000 0F93      		push r16
 1660               	.LCFI14:
 1661               		.cfi_def_cfa_offset 3
 1662               		.cfi_offset 16, -2
 1663 0002 1F93      		push r17
 1664               	.LCFI15:
 1665               		.cfi_def_cfa_offset 4
 1666               		.cfi_offset 17, -3
 1667 0004 CF93      		push r28
 1668               	.LCFI16:
 1669               		.cfi_def_cfa_offset 5
 1670               		.cfi_offset 28, -4
 1671 0006 DF93      		push r29
 1672               	.LCFI17:
 1673               		.cfi_def_cfa_offset 6
 1674               		.cfi_offset 29, -5
 1675               	/* prologue: function */
 1676               	/* frame size = 0 */
 1677               	/* stack size = 4 */
 1678               	.L__stack_usage = 4
 1679 0008 EC01      		movw r28,r24
 182:tmk_core/common/action.c ****         return;
 1680               		.loc 1 182 5 is_stmt 1 view .LVU451
 1681               	.LBB57:
 1682               	.LBI57:
 1683               		.file 4 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:tmk_core/common/keyboard.h **** 
  21:tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:tmk_core/common/keyboard.h **** #include <stdint.h>
  23:tmk_core/common/keyboard.h **** 
  24:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  25:tmk_core/common/keyboard.h **** extern "C" {
  26:tmk_core/common/keyboard.h **** #endif
  27:tmk_core/common/keyboard.h **** 
  28:tmk_core/common/keyboard.h **** /* key matrix position */
  29:tmk_core/common/keyboard.h **** typedef struct {
  30:tmk_core/common/keyboard.h ****     uint8_t col;
  31:tmk_core/common/keyboard.h ****     uint8_t row;
  32:tmk_core/common/keyboard.h **** } keypos_t;
  33:tmk_core/common/keyboard.h **** 
  34:tmk_core/common/keyboard.h **** /* key event */
  35:tmk_core/common/keyboard.h **** typedef struct {
  36:tmk_core/common/keyboard.h ****     keypos_t key;
  37:tmk_core/common/keyboard.h ****     bool     pressed;
  38:tmk_core/common/keyboard.h ****     uint16_t time;
  39:tmk_core/common/keyboard.h **** } keyevent_t;
  40:tmk_core/common/keyboard.h **** 
  41:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  42:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb) ((keya).row == (keyb).row && (keya).col == (keyb).col)
  43:tmk_core/common/keyboard.h **** 
  44:tmk_core/common/keyboard.h **** /* Rules for No Event:
  45:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  46:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  47:tmk_core/common/keyboard.h ****  */
  48:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1684               		.loc 4 48 20 view .LVU452
 1685               	.LBB58:
 1686               		.loc 4 48 51 view .LVU453
 1687               		.loc 4 48 74 is_stmt 0 view .LVU454
 1688 000a 8B81      		ldd r24,Y+3
 1689 000c 9C81      		ldd r25,Y+4
 1690               	.LVL168:
 1691               		.loc 4 48 74 view .LVU455
 1692 000e 892B      		or r24,r25
 1693 0010 01F0      		breq .L147
 1694 0012 8881      		ld r24,Y
 1695 0014 9981      		ldd r25,Y+1
 1696 0016 8923      		and r24,r25
 1697 0018 8F3F      		cpi r24,lo8(-1)
 1698 001a 01F4      		brne .L157
 1699               	.L147:
 1700               	/* epilogue start */
 1701               	.LBE58:
 1702               	.LBE57:
 200:tmk_core/common/action.c **** 
 1703               		.loc 1 200 1 view .LVU456
 1704 001c DF91      		pop r29
 1705 001e CF91      		pop r28
 1706               	.LVL169:
 200:tmk_core/common/action.c **** 
 1707               		.loc 1 200 1 view .LVU457
 1708 0020 1F91      		pop r17
 1709 0022 0F91      		pop r16
 1710 0024 0895      		ret
 1711               	.LVL170:
 1712               	.L157:
 186:tmk_core/common/action.c **** 
 1713               		.loc 1 186 5 is_stmt 1 view .LVU458
 186:tmk_core/common/action.c **** 
 1714               		.loc 1 186 10 is_stmt 0 view .LVU459
 1715 0026 CE01      		movw r24,r28
 1716 0028 0E94 0000 		call process_record_quantum
 1717               	.LVL171:
 186:tmk_core/common/action.c **** 
 1718               		.loc 1 186 8 view .LVU460
 1719 002c 8823      		tst r24
 1720 002e 01F0      		breq .L147
 188:tmk_core/common/action.c ****     dprint("ACTION: ");
 1721               		.loc 1 188 5 is_stmt 1 view .LVU461
 188:tmk_core/common/action.c ****     dprint("ACTION: ");
 1722               		.loc 1 188 23 is_stmt 0 view .LVU462
 1723 0030 6881      		ld r22,Y
 1724 0032 7981      		ldd r23,Y+1
 1725 0034 8A81      		ldd r24,Y+2
 1726 0036 0E94 0000 		call store_or_get_action
 1727               	.LVL172:
 1728 003a 8C01      		movw r16,r24
 1729               	.LVL173:
 189:tmk_core/common/action.c ****     debug_action(action);
 1730               		.loc 1 189 23 is_stmt 1 view .LVU463
 190:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1731               		.loc 1 190 5 view .LVU464
 192:tmk_core/common/action.c ****     layer_debug();
 1732               		.loc 1 192 29 view .LVU465
 193:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 1733               		.loc 1 193 5 view .LVU466
 1734 003c 0E94 0000 		call layer_debug
 1735               	.LVL174:
 194:tmk_core/common/action.c ****     default_layer_debug();
 1736               		.loc 1 194 37 view .LVU467
 195:tmk_core/common/action.c **** #endif
 1737               		.loc 1 195 5 view .LVU468
 1738 0040 0E94 0000 		call default_layer_debug
 1739               	.LVL175:
 197:tmk_core/common/action.c **** 
 1740               		.loc 1 197 15 view .LVU469
 199:tmk_core/common/action.c **** }
 1741               		.loc 1 199 5 view .LVU470
 199:tmk_core/common/action.c **** }
 1742               		.loc 1 199 5 is_stmt 0 view .LVU471
 1743 0044 B801      		movw r22,r16
 1744 0046 CE01      		movw r24,r28
 1745               	/* epilogue start */
 200:tmk_core/common/action.c **** 
 1746               		.loc 1 200 1 view .LVU472
 1747 0048 DF91      		pop r29
 1748 004a CF91      		pop r28
 1749               	.LVL176:
 200:tmk_core/common/action.c **** 
 1750               		.loc 1 200 1 view .LVU473
 1751 004c 1F91      		pop r17
 1752 004e 0F91      		pop r16
 1753               	.LVL177:
 199:tmk_core/common/action.c **** }
 1754               		.loc 1 199 5 view .LVU474
 1755 0050 0C94 0000 		jmp process_action
 1756               	.LVL178:
 199:tmk_core/common/action.c **** }
 1757               		.loc 1 199 5 view .LVU475
 1758               		.cfi_endproc
 1759               	.LFE107:
 1761               		.section	.text.process_record_nocache,"ax",@progbits
 1762               	.global	process_record_nocache
 1764               	process_record_nocache:
 1765               	.LVL179:
 1766               	.LFB104:
 143:tmk_core/common/action.c ****     disable_action_cache = true;
 1767               		.loc 1 143 50 is_stmt 1 view -0
 1768               		.cfi_startproc
 1769               	/* prologue: function */
 1770               	/* frame size = 0 */
 1771               	/* stack size = 0 */
 1772               	.L__stack_usage = 0
 144:tmk_core/common/action.c ****     process_record(record);
 1773               		.loc 1 144 5 view .LVU477
 144:tmk_core/common/action.c ****     process_record(record);
 1774               		.loc 1 144 26 is_stmt 0 view .LVU478
 1775 0000 21E0      		ldi r18,lo8(1)
 1776 0002 2093 0000 		sts disable_action_cache,r18
 145:tmk_core/common/action.c ****     disable_action_cache = false;
 1777               		.loc 1 145 5 is_stmt 1 view .LVU479
 1778 0006 0E94 0000 		call process_record
 1779               	.LVL180:
 146:tmk_core/common/action.c **** }
 1780               		.loc 1 146 5 view .LVU480
 146:tmk_core/common/action.c **** }
 1781               		.loc 1 146 26 is_stmt 0 view .LVU481
 1782 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 1783               	/* epilogue start */
 147:tmk_core/common/action.c **** #else
 1784               		.loc 1 147 1 view .LVU482
 1785 000e 0895      		ret
 1786               		.cfi_endproc
 1787               	.LFE104:
 1789               		.section	.text.register_weak_mods,"ax",@progbits
 1790               	.global	register_weak_mods
 1792               	register_weak_mods:
 1793               	.LVL181:
 1794               	.LFB114:
 905:tmk_core/common/action.c **** 
 906:tmk_core/common/action.c **** /** \brief Adds the given weak modifiers and sends a keyboard report immediately.
 907:tmk_core/common/action.c ****  *
 908:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 909:tmk_core/common/action.c ****  */
 910:tmk_core/common/action.c **** void register_weak_mods(uint8_t mods) {
 1795               		.loc 1 910 39 is_stmt 1 view -0
 1796               		.cfi_startproc
 1797               	/* prologue: function */
 1798               	/* frame size = 0 */
 1799               	/* stack size = 0 */
 1800               	.L__stack_usage = 0
 911:tmk_core/common/action.c ****     if (mods) {
 1801               		.loc 1 911 5 view .LVU484
 1802               		.loc 1 911 8 is_stmt 0 view .LVU485
 1803 0000 8823      		tst r24
 1804 0002 01F0      		breq .L159
 912:tmk_core/common/action.c ****         add_weak_mods(mods);
 1805               		.loc 1 912 9 is_stmt 1 view .LVU486
 1806 0004 0E94 0000 		call add_weak_mods
 1807               	.LVL182:
 913:tmk_core/common/action.c ****         send_keyboard_report();
 1808               		.loc 1 913 9 view .LVU487
 1809 0008 0C94 0000 		jmp send_keyboard_report
 1810               	.LVL183:
 1811               	.L159:
 1812               	/* epilogue start */
 914:tmk_core/common/action.c ****     }
 915:tmk_core/common/action.c **** }
 1813               		.loc 1 915 1 is_stmt 0 view .LVU488
 1814 000c 0895      		ret
 1815               		.cfi_endproc
 1816               	.LFE114:
 1818               		.section	.text.unregister_weak_mods,"ax",@progbits
 1819               	.global	unregister_weak_mods
 1821               	unregister_weak_mods:
 1822               	.LVL184:
 1823               	.LFB115:
 916:tmk_core/common/action.c **** 
 917:tmk_core/common/action.c **** /** \brief Removes the given weak modifiers and sends a keyboard report immediately.
 918:tmk_core/common/action.c ****  *
 919:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 920:tmk_core/common/action.c ****  */
 921:tmk_core/common/action.c **** void unregister_weak_mods(uint8_t mods) {
 1824               		.loc 1 921 41 is_stmt 1 view -0
 1825               		.cfi_startproc
 1826               	/* prologue: function */
 1827               	/* frame size = 0 */
 1828               	/* stack size = 0 */
 1829               	.L__stack_usage = 0
 922:tmk_core/common/action.c ****     if (mods) {
 1830               		.loc 1 922 5 view .LVU490
 1831               		.loc 1 922 8 is_stmt 0 view .LVU491
 1832 0000 8823      		tst r24
 1833 0002 01F0      		breq .L161
 923:tmk_core/common/action.c ****         del_weak_mods(mods);
 1834               		.loc 1 923 9 is_stmt 1 view .LVU492
 1835 0004 0E94 0000 		call del_weak_mods
 1836               	.LVL185:
 924:tmk_core/common/action.c ****         send_keyboard_report();
 1837               		.loc 1 924 9 view .LVU493
 1838 0008 0C94 0000 		jmp send_keyboard_report
 1839               	.LVL186:
 1840               	.L161:
 1841               	/* epilogue start */
 925:tmk_core/common/action.c ****     }
 926:tmk_core/common/action.c **** }
 1842               		.loc 1 926 1 is_stmt 0 view .LVU494
 1843 000c 0895      		ret
 1844               		.cfi_endproc
 1845               	.LFE115:
 1847               		.section	.text.clear_keyboard_but_mods_and_keys,"ax",@progbits
 1848               	.global	clear_keyboard_but_mods_and_keys
 1850               	clear_keyboard_but_mods_and_keys:
 1851               	.LFB118:
 927:tmk_core/common/action.c **** 
 928:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 929:tmk_core/common/action.c ****  *
 930:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 931:tmk_core/common/action.c ****  */
 932:tmk_core/common/action.c **** void clear_keyboard(void) {
 933:tmk_core/common/action.c ****     clear_mods();
 934:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 935:tmk_core/common/action.c **** }
 936:tmk_core/common/action.c **** 
 937:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 938:tmk_core/common/action.c ****  *
 939:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 940:tmk_core/common/action.c ****  */
 941:tmk_core/common/action.c **** void clear_keyboard_but_mods(void) {
 942:tmk_core/common/action.c ****     clear_keys();
 943:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 944:tmk_core/common/action.c **** }
 945:tmk_core/common/action.c **** 
 946:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 947:tmk_core/common/action.c ****  *
 948:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 949:tmk_core/common/action.c ****  */
 950:tmk_core/common/action.c **** void clear_keyboard_but_mods_and_keys() {
 1852               		.loc 1 950 41 is_stmt 1 view -0
 1853               		.cfi_startproc
 1854               	/* prologue: function */
 1855               	/* frame size = 0 */
 1856               	/* stack size = 0 */
 1857               	.L__stack_usage = 0
 951:tmk_core/common/action.c ****     clear_weak_mods();
 1858               		.loc 1 951 5 view .LVU496
 1859 0000 0E94 0000 		call clear_weak_mods
 1860               	.LVL187:
 952:tmk_core/common/action.c ****     clear_macro_mods();
 1861               		.loc 1 952 5 view .LVU497
 1862 0004 0E94 0000 		call clear_macro_mods
 1863               	.LVL188:
 953:tmk_core/common/action.c ****     send_keyboard_report();
 1864               		.loc 1 953 5 view .LVU498
 1865 0008 0C94 0000 		jmp send_keyboard_report
 1866               	.LVL189:
 1867               		.cfi_endproc
 1868               	.LFE118:
 1870               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1871               	.global	clear_keyboard_but_mods
 1873               	clear_keyboard_but_mods:
 1874               	.LFB117:
 941:tmk_core/common/action.c ****     clear_keys();
 1875               		.loc 1 941 36 view -0
 1876               		.cfi_startproc
 1877               	/* prologue: function */
 1878               	/* frame size = 0 */
 1879               	/* stack size = 0 */
 1880               	.L__stack_usage = 0
 942:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 1881               		.loc 1 942 5 view .LVU500
 1882 0000 0E94 0000 		call clear_keys
 1883               	.LVL190:
 943:tmk_core/common/action.c **** }
 1884               		.loc 1 943 5 view .LVU501
 1885 0004 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
 1886               	.LVL191:
 1887               		.cfi_endproc
 1888               	.LFE117:
 1890               		.section	.text.clear_keyboard,"ax",@progbits
 1891               	.global	clear_keyboard
 1893               	clear_keyboard:
 1894               	.LFB116:
 932:tmk_core/common/action.c ****     clear_mods();
 1895               		.loc 1 932 27 view -0
 1896               		.cfi_startproc
 1897               	/* prologue: function */
 1898               	/* frame size = 0 */
 1899               	/* stack size = 0 */
 1900               	.L__stack_usage = 0
 933:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1901               		.loc 1 933 5 view .LVU503
 1902 0000 0E94 0000 		call clear_mods
 1903               	.LVL192:
 934:tmk_core/common/action.c **** }
 1904               		.loc 1 934 5 view .LVU504
 1905 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1906               	.LVL193:
 1907               		.cfi_endproc
 1908               	.LFE116:
 1910               		.section	.text.is_tap_action,"ax",@progbits
 1911               	.global	is_tap_action
 1913               	is_tap_action:
 1914               	.LVL194:
 1915               	.LFB120:
 954:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 955:tmk_core/common/action.c ****     mousekey_clear();
 956:tmk_core/common/action.c ****     mousekey_send();
 957:tmk_core/common/action.c **** #endif
 958:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 959:tmk_core/common/action.c ****     host_system_send(0);
 960:tmk_core/common/action.c ****     host_consumer_send(0);
 961:tmk_core/common/action.c **** #endif
 962:tmk_core/common/action.c **** }
 963:tmk_core/common/action.c **** 
 964:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 965:tmk_core/common/action.c ****  *
 966:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 967:tmk_core/common/action.c ****  */
 968:tmk_core/common/action.c **** bool is_tap_key(keypos_t key) {
 969:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 970:tmk_core/common/action.c ****     return is_tap_action(action);
 971:tmk_core/common/action.c **** }
 972:tmk_core/common/action.c **** 
 973:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 974:tmk_core/common/action.c ****  *
 975:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 976:tmk_core/common/action.c ****  */
 977:tmk_core/common/action.c **** bool is_tap_action(action_t action) {
 1916               		.loc 1 977 37 view -0
 1917               		.cfi_startproc
 1918               	/* prologue: function */
 1919               	/* frame size = 0 */
 1920               	/* stack size = 0 */
 1921               	.L__stack_usage = 0
 978:tmk_core/common/action.c ****     switch (action.kind.id) {
 1922               		.loc 1 978 5 view .LVU506
 1923               		.loc 1 978 24 is_stmt 0 view .LVU507
 1924 0000 E92F      		mov r30,r25
 1925 0002 E295      		swap r30
 1926 0004 EF70      		andi r30,lo8(15)
 1927               		.loc 1 978 5 view .LVU508
 1928 0006 E250      		subi r30,lo8(-(-2))
 1929 0008 EE30      		cpi r30,lo8(14)
 1930 000a 00F4      		brsh .L175
 1931 000c F0E0      		ldi r31,0
 1932 000e E050      		subi r30,lo8(-(gs(.L169)))
 1933 0010 F040      		sbci r31,hi8(-(gs(.L169)))
 1934 0012 0C94 0000 		jmp __tablejump2__
 1935               		.section	.jumptables.gcc.is_tap_action,"a",@progbits
 1936               		.p2align	1
 1937               	.L169:
 1938 0000 0000      		.word gs(.L170)
 1939 0002 0000      		.word gs(.L170)
 1940 0004 0000      		.word gs(.L175)
 1941 0006 0000      		.word gs(.L175)
 1942 0008 0000      		.word gs(.L171)
 1943 000a 0000      		.word gs(.L175)
 1944 000c 0000      		.word gs(.L175)
 1945 000e 0000      		.word gs(.L175)
 1946 0010 0000      		.word gs(.L170)
 1947 0012 0000      		.word gs(.L170)
 1948 0014 0000      		.word gs(.L168)
 1949 0016 0000      		.word gs(.L175)
 1950 0018 0000      		.word gs(.L175)
 1951 001a 0000      		.word gs(.L168)
 1952               		.section	.text.is_tap_action
 1953               	.L170:
 979:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 980:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 981:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 982:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 983:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1954               		.loc 1 983 13 is_stmt 1 view .LVU509
 1955 0016 803F      		cpi r24,lo8(-16)
 1956 0018 01F0      		breq .L178
 1957 001a 00F4      		brsh .L172
 1958 001c 883E      		cpi r24,lo8(-24)
 1959 001e 00F4      		brsh .L175
 1960               	.L178:
 984:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 985:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 986:tmk_core/common/action.c ****                 case OP_ONESHOT:
 987:tmk_core/common/action.c ****                     return true;
 1961               		.loc 1 987 28 is_stmt 0 view .LVU510
 1962 0020 81E0      		ldi r24,lo8(1)
 1963               	.LVL195:
 1964               	/* epilogue start */
 988:tmk_core/common/action.c ****             }
 989:tmk_core/common/action.c ****             return false;
 990:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 991:tmk_core/common/action.c ****             switch (action.swap.code) {
 992:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 993:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 994:tmk_core/common/action.c ****                     return true;
 995:tmk_core/common/action.c ****             }
 996:tmk_core/common/action.c ****             return false;
 997:tmk_core/common/action.c ****         case ACT_MACRO:
 998:tmk_core/common/action.c ****         case ACT_FUNCTION:
 999:tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) {
1000:tmk_core/common/action.c ****                 return true;
1001:tmk_core/common/action.c ****             }
1002:tmk_core/common/action.c ****             return false;
1003:tmk_core/common/action.c ****     }
1004:tmk_core/common/action.c ****     return false;
1005:tmk_core/common/action.c **** }
 1965               		.loc 1 1005 1 view .LVU511
 1966 0022 0895      		ret
 1967               	.LVL196:
 1968               	.L172:
 1969               		.loc 1 1005 1 view .LVU512
 1970 0024 843F      		cpi r24,lo8(-12)
 1971 0026 01F0      		breq .L178
 1972               	.L175:
 989:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 1973               		.loc 1 989 20 view .LVU513
 1974 0028 80E0      		ldi r24,0
 1975               	.LVL197:
 989:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 1976               		.loc 1 989 20 view .LVU514
 1977 002a 0895      		ret
 1978               	.LVL198:
 1979               	.L171:
 991:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 1980               		.loc 1 991 13 is_stmt 1 view .LVU515
 1981 002c 883E      		cpi r24,lo8(-24)
 1982 002e 00F0      		brlo .L178
 1983 0030 813F      		cpi r24,lo8(-15)
 1984 0032 01F4      		brne .L175
 1985 0034 00C0      		rjmp .L178
 1986               	.L168:
 999:tmk_core/common/action.c ****                 return true;
 1987               		.loc 1 999 13 view .LVU516
 999:tmk_core/common/action.c ****                 return true;
 1988               		.loc 1 999 16 is_stmt 0 view .LVU517
 1989 0036 93FB      		bst r25,3
 1990 0038 8827      		clr r24
 1991 003a 80F9      		bld r24,0
 1992               	.LVL199:
 999:tmk_core/common/action.c ****                 return true;
 1993               		.loc 1 999 16 view .LVU518
 1994 003c 0895      		ret
 1995               		.cfi_endproc
 1996               	.LFE120:
 1998               		.section	.text.is_tap_key,"ax",@progbits
 1999               	.global	is_tap_key
 2001               	is_tap_key:
 2002               	.LVL200:
 2003               	.LFB119:
 968:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2004               		.loc 1 968 31 is_stmt 1 view -0
 2005               		.cfi_startproc
 2006               	/* prologue: function */
 2007               	/* frame size = 0 */
 2008               	/* stack size = 0 */
 2009               	.L__stack_usage = 0
 969:tmk_core/common/action.c ****     return is_tap_action(action);
 2010               		.loc 1 969 5 view .LVU520
 969:tmk_core/common/action.c ****     return is_tap_action(action);
 2011               		.loc 1 969 23 is_stmt 0 view .LVU521
 2012 0000 0E94 0000 		call layer_switch_get_action
 2013               	.LVL201:
 970:tmk_core/common/action.c **** }
 2014               		.loc 1 970 5 is_stmt 1 view .LVU522
 970:tmk_core/common/action.c **** }
 2015               		.loc 1 970 12 is_stmt 0 view .LVU523
 2016 0004 0C94 0000 		jmp is_tap_action
 2017               	.LVL202:
 2018               		.cfi_endproc
 2019               	.LFE119:
 2021               		.section	.text.debug_event,"ax",@progbits
 2022               	.global	debug_event
 2024               	debug_event:
 2025               	.LFB121:
1006:tmk_core/common/action.c **** 
1007:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1008:tmk_core/common/action.c ****  *
1009:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1010:tmk_core/common/action.c ****  */
1011:tmk_core/common/action.c **** void debug_event(keyevent_t event) { dprintf("%04X%c(%u)", (event.key.row << 8 | event.key.col), (e
 2026               		.loc 1 1011 36 is_stmt 1 view -0
 2027               		.cfi_startproc
 2028 0000 CF93      		push r28
 2029               	.LCFI18:
 2030               		.cfi_def_cfa_offset 3
 2031               		.cfi_offset 28, -2
 2032 0002 DF93      		push r29
 2033               	.LCFI19:
 2034               		.cfi_def_cfa_offset 4
 2035               		.cfi_offset 29, -3
 2036 0004 00D0      		rcall .
 2037 0006 00D0      		rcall .
 2038 0008 0F92      		push __tmp_reg__
 2039               	.LCFI20:
 2040               		.cfi_def_cfa_offset 9
 2041 000a CDB7      		in r28,__SP_L__
 2042 000c DEB7      		in r29,__SP_H__
 2043               	.LCFI21:
 2044               		.cfi_def_cfa_register 28
 2045               	/* prologue: function */
 2046               	/* frame size = 5 */
 2047               	/* stack size = 7 */
 2048               	.L__stack_usage = 7
 2049               		.loc 1 1011 138 view .LVU525
 2050               	/* epilogue start */
 2051               		.loc 1 1011 1 is_stmt 0 view .LVU526
 2052 000e 0F90      		pop __tmp_reg__
 2053 0010 0F90      		pop __tmp_reg__
 2054 0012 0F90      		pop __tmp_reg__
 2055 0014 0F90      		pop __tmp_reg__
 2056 0016 0F90      		pop __tmp_reg__
 2057 0018 DF91      		pop r29
 2058 001a CF91      		pop r28
 2059 001c 0895      		ret
 2060               		.cfi_endproc
 2061               	.LFE121:
 2063               		.section	.text.debug_record,"ax",@progbits
 2064               	.global	debug_record
 2066               	debug_record:
 2067               	.LFB122:
1012:tmk_core/common/action.c **** 
1013:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1014:tmk_core/common/action.c ****  *
1015:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1016:tmk_core/common/action.c ****  */
1017:tmk_core/common/action.c **** void debug_record(keyrecord_t record) {
 2068               		.loc 1 1017 39 is_stmt 1 view -0
 2069               		.cfi_startproc
 2070 0000 CF93      		push r28
 2071               	.LCFI22:
 2072               		.cfi_def_cfa_offset 3
 2073               		.cfi_offset 28, -2
 2074 0002 DF93      		push r29
 2075               	.LCFI23:
 2076               		.cfi_def_cfa_offset 4
 2077               		.cfi_offset 29, -3
 2078 0004 00D0      		rcall .
 2079 0006 00D0      		rcall .
 2080 0008 00D0      		rcall .
 2081               	.LCFI24:
 2082               		.cfi_def_cfa_offset 10
 2083 000a CDB7      		in r28,__SP_L__
 2084 000c DEB7      		in r29,__SP_H__
 2085               	.LCFI25:
 2086               		.cfi_def_cfa_register 28
 2087               	/* prologue: function */
 2088               	/* frame size = 6 */
 2089               	/* stack size = 8 */
 2090               	.L__stack_usage = 8
1018:tmk_core/common/action.c ****     debug_event(record.event);
 2091               		.loc 1 1018 5 view .LVU528
1019:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
1020:tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 2092               		.loc 1 1020 77 view .LVU529
 2093               	/* epilogue start */
1021:tmk_core/common/action.c **** #endif
1022:tmk_core/common/action.c **** }
 2094               		.loc 1 1022 1 is_stmt 0 view .LVU530
 2095 000e 2696      		adiw r28,6
 2096 0010 0FB6      		in __tmp_reg__,__SREG__
 2097 0012 F894      		cli
 2098 0014 DEBF      		out __SP_H__,r29
 2099 0016 0FBE      		out __SREG__,__tmp_reg__
 2100 0018 CDBF      		out __SP_L__,r28
 2101 001a DF91      		pop r29
 2102 001c CF91      		pop r28
 2103 001e 0895      		ret
 2104               		.cfi_endproc
 2105               	.LFE122:
 2107               		.section	.text.debug_action,"ax",@progbits
 2108               	.global	debug_action
 2110               	debug_action:
 2111               	.LVL203:
 2112               	.LFB123:
1023:tmk_core/common/action.c **** 
1024:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1025:tmk_core/common/action.c ****  *
1026:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1027:tmk_core/common/action.c ****  */
1028:tmk_core/common/action.c **** void debug_action(action_t action) {
 2113               		.loc 1 1028 36 is_stmt 1 view -0
 2114               		.cfi_startproc
 2115               	/* prologue: function */
 2116               	/* frame size = 0 */
 2117               	/* stack size = 0 */
 2118               	.L__stack_usage = 0
1029:tmk_core/common/action.c ****     switch (action.kind.id) {
 2119               		.loc 1 1029 5 view .LVU532
1030:tmk_core/common/action.c ****         case ACT_LMODS:
1031:tmk_core/common/action.c ****             dprint("ACT_LMODS");
1032:tmk_core/common/action.c ****             break;
1033:tmk_core/common/action.c ****         case ACT_RMODS:
1034:tmk_core/common/action.c ****             dprint("ACT_RMODS");
1035:tmk_core/common/action.c ****             break;
1036:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1037:tmk_core/common/action.c ****             dprint("ACT_LMODS_TAP");
1038:tmk_core/common/action.c ****             break;
1039:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1040:tmk_core/common/action.c ****             dprint("ACT_RMODS_TAP");
1041:tmk_core/common/action.c ****             break;
1042:tmk_core/common/action.c ****         case ACT_USAGE:
1043:tmk_core/common/action.c ****             dprint("ACT_USAGE");
1044:tmk_core/common/action.c ****             break;
1045:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
1046:tmk_core/common/action.c ****             dprint("ACT_MOUSEKEY");
1047:tmk_core/common/action.c ****             break;
1048:tmk_core/common/action.c ****         case ACT_LAYER:
1049:tmk_core/common/action.c ****             dprint("ACT_LAYER");
1050:tmk_core/common/action.c ****             break;
1051:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
1052:tmk_core/common/action.c ****             dprint("ACT_LAYER_MODS");
1053:tmk_core/common/action.c ****             break;
1054:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1055:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP");
1056:tmk_core/common/action.c ****             break;
1057:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1058:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP_EXT");
1059:tmk_core/common/action.c ****             break;
1060:tmk_core/common/action.c ****         case ACT_MACRO:
1061:tmk_core/common/action.c ****             dprint("ACT_MACRO");
1062:tmk_core/common/action.c ****             break;
1063:tmk_core/common/action.c ****         case ACT_COMMAND:
1064:tmk_core/common/action.c ****             dprint("ACT_COMMAND");
1065:tmk_core/common/action.c ****             break;
1066:tmk_core/common/action.c ****         case ACT_FUNCTION:
1067:tmk_core/common/action.c ****             dprint("ACT_FUNCTION");
1068:tmk_core/common/action.c ****             break;
1069:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1070:tmk_core/common/action.c ****             dprint("ACT_SWAP_HANDS");
1071:tmk_core/common/action.c ****             break;
1072:tmk_core/common/action.c ****         default:
1073:tmk_core/common/action.c ****             dprint("UNKNOWN");
1074:tmk_core/common/action.c ****             break;
1075:tmk_core/common/action.c ****     }
1076:tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param >> 8, action.kind.param & 0xff);
 2120               		.loc 1 1076 75 view .LVU533
 2121               	/* epilogue start */
1077:tmk_core/common/action.c **** }
 2122               		.loc 1 1077 1 is_stmt 0 view .LVU534
 2123 0000 0895      		ret
 2124               		.cfi_endproc
 2125               	.LFE123:
 2127               		.section	.rodata.CSWTCH.10,"a"
 2130               	CSWTCH.10:
 2131 0000 E200      		.word	226
 2132 0002 E900      		.word	233
 2133 0004 EA00      		.word	234
 2134 0006 B500      		.word	181
 2135 0008 B600      		.word	182
 2136 000a B700      		.word	183
 2137 000c CD00      		.word	205
 2138 000e 8301      		.word	387
 2139 0010 CC00      		.word	204
 2140 0012 8A01      		.word	394
 2141 0014 9201      		.word	402
 2142 0016 9401      		.word	404
 2143 0018 2102      		.word	545
 2144 001a 2302      		.word	547
 2145 001c 2402      		.word	548
 2146 001e 2502      		.word	549
 2147 0020 2602      		.word	550
 2148 0022 2702      		.word	551
 2149 0024 2A02      		.word	554
 2150 0026 B300      		.word	179
 2151 0028 B400      		.word	180
 2152 002a 6F00      		.word	111
 2153 002c 7000      		.word	112
 2154               		.section	.rodata.CSWTCH.9,"a"
 2157               	CSWTCH.9:
 2158 0000 81        		.byte	-127
 2159 0001 82        		.byte	-126
 2160 0002 83        		.byte	-125
 2161               	.global	disable_action_cache
 2162               		.section	.bss.disable_action_cache,"aw",@nobits
 2165               	disable_action_cache:
 2166 0000 00        		.zero	1
 2167               		.comm	tp_buttons,2,1
 2168               		.text
 2169               	.Letext0:
 2170               		.file 5 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 2171               		.file 6 "tmk_core/common/keycode.h"
 2172               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2173               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2174               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 2175               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2176               		.file 11 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
 2177               		.file 12 "tmk_core/common/host.h"
 2178               		.file 13 "tmk_core/common/mousekey.h"
 2179               		.file 14 "tmk_core/common/command.h"
 2180               		.file 15 "tmk_core/common/action_code.h"
 2181               		.file 16 "tmk_core/common/action.h"
 2182               		.file 17 "tmk_core/common/action_layer.h"
 2183               		.file 18 "tmk_core/common/action_util.h"
 2184               		.file 19 "tmk_core/common/debug.h"
 2185               		.file 20 "tmk_core/common/led.h"
 2186               		.file 21 "tmk_core/common/action_macro.h"
 2187               		.file 22 "tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action.c
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:2      *ABS*:0000003e __SP_H__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:3      *ABS*:0000003d __SP_L__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:4      *ABS*:0000003f __SREG__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:6      *ABS*:00000001 __zero_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:13     .text.action_exec:00000000 action_exec
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:94     .text.process_record_quantum:00000000 process_record_quantum
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:116    .text.process_record_tap_hint:00000000 process_record_tap_hint
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:141    .text.register_code:00000000 register_code
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:2157   .rodata.CSWTCH.9:00000000 CSWTCH.9
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:2130   .rodata.CSWTCH.10:00000000 CSWTCH.10
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:405    .text.unregister_code:00000000 unregister_code
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:563    .text.tap_code:00000000 tap_code
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:627    .text.register_mods:00000000 register_mods
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:656    .text.unregister_mods:00000000 unregister_mods
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:685    .text.process_action:00000000 process_action
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:1653   .text.process_record:00000000 process_record
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:1764   .text.process_record_nocache:00000000 process_record_nocache
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:2165   .bss.disable_action_cache:00000000 disable_action_cache
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:1792   .text.register_weak_mods:00000000 register_weak_mods
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:1821   .text.unregister_weak_mods:00000000 unregister_weak_mods
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:1850   .text.clear_keyboard_but_mods_and_keys:00000000 clear_keyboard_but_mods_and_keys
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:1873   .text.clear_keyboard_but_mods:00000000 clear_keyboard_but_mods
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:1893   .text.clear_keyboard:00000000 clear_keyboard
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:1913   .text.is_tap_action:00000000 is_tap_action
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:2001   .text.is_tap_key:00000000 is_tap_key
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:2024   .text.debug_event:00000000 debug_event
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:2066   .text.debug_record:00000000 debug_record
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccjb24NW.s:2110   .text.debug_action:00000000 debug_action
                            *COM*:00000002 tp_buttons

UNDEFINED SYMBOLS
action_tapping_process
layer_switch_get_action
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
led_set
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
get_oneshot_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_or
default_layer_xor
default_layer_set
layer_and
layer_or
layer_xor
layer_state_set
set_oneshot_layer
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
clear_mods
__do_copy_data
__do_clear_bss
