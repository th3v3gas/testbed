   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.suspend_idle,"ax",@progbits
  11               	.global	suspend_idle
  13               	suspend_idle:
  14               	.LVL0:
  15               	.LFB107:
  16               		.file 1 "tmk_core/common/avr/suspend.c"
   1:tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:tmk_core/common/avr/suspend.c **** #include "action.h"
   7:tmk_core/common/avr/suspend.c **** #include "suspend_avr.h"
   8:tmk_core/common/avr/suspend.c **** #include "suspend.h"
   9:tmk_core/common/avr/suspend.c **** #include "timer.h"
  10:tmk_core/common/avr/suspend.c **** #include "led.h"
  11:tmk_core/common/avr/suspend.c **** #include "host.h"
  12:tmk_core/common/avr/suspend.c **** #include "rgblight_reconfig.h"
  13:tmk_core/common/avr/suspend.c **** 
  14:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  15:tmk_core/common/avr/suspend.c **** #    include "lufa.h"
  16:tmk_core/common/avr/suspend.c **** #endif
  17:tmk_core/common/avr/suspend.c **** 
  18:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
  19:tmk_core/common/avr/suspend.c **** #    include "backlight.h"
  20:tmk_core/common/avr/suspend.c **** #endif
  21:tmk_core/common/avr/suspend.c **** 
  22:tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
  23:tmk_core/common/avr/suspend.c **** #    include "audio.h"
  24:tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
  25:tmk_core/common/avr/suspend.c **** 
  26:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
  27:tmk_core/common/avr/suspend.c **** #    include "rgblight.h"
  28:tmk_core/common/avr/suspend.c **** extern rgblight_config_t rgblight_config;
  29:tmk_core/common/avr/suspend.c **** static bool              rgblight_enabled;
  30:tmk_core/common/avr/suspend.c **** static bool              is_suspended;
  31:tmk_core/common/avr/suspend.c **** #endif
  32:tmk_core/common/avr/suspend.c **** 
  33:tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value)                                                                     
  34:tmk_core/common/avr/suspend.c ****     __asm__ __volatile__("in __tmp_reg__,__SREG__"                                                 
  35:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  36:tmk_core/common/avr/suspend.c ****                          "cli"                                                                     
  37:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  38:tmk_core/common/avr/suspend.c ****                          "wdr"                                                                     
  39:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  40:tmk_core/common/avr/suspend.c ****                          "sts %0,%1"                                                               
  41:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  42:tmk_core/common/avr/suspend.c ****                          "out __SREG__,__tmp_reg__"                                                
  43:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  44:tmk_core/common/avr/suspend.c ****                          "sts %0,%2"                                                               
  45:tmk_core/common/avr/suspend.c ****                          "\n\t"                                                                    
  46:tmk_core/common/avr/suspend.c ****                          : /* no outputs */                                                        
  47:tmk_core/common/avr/suspend.c ****                          : "M"(_SFR_MEM_ADDR(_WD_CONTROL_REG)), "r"(_BV(_WD_CHANGE_BIT) | _BV(WDE))
  48:tmk_core/common/avr/suspend.c ****                          : "r0")
  49:tmk_core/common/avr/suspend.c **** 
  50:tmk_core/common/avr/suspend.c **** /** \brief Suspend idle
  51:tmk_core/common/avr/suspend.c ****  *
  52:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  53:tmk_core/common/avr/suspend.c ****  */
  54:tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time) {
  17               		.loc 1 54 33 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  55:tmk_core/common/avr/suspend.c ****     cli();
  23               		.loc 1 55 5 view .LVU1
  24               	/* #APP */
  25               	 ;  55 "tmk_core/common/avr/suspend.c" 1
  26 0000 F894      		cli
  27               	 ;  0 "" 2
  56:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  28               		.loc 1 56 5 view .LVU2
  29               		.loc 1 56 5 view .LVU3
  30               	/* #NOAPP */
  31 0002 83B7      		in r24,0x33
  32               	.LVL1:
  33               		.loc 1 56 5 is_stmt 0 view .LVU4
  34 0004 817F      		andi r24,lo8(-15)
  35 0006 83BF      		out 0x33,r24
  57:tmk_core/common/avr/suspend.c ****     sleep_enable();
  36               		.loc 1 57 5 is_stmt 1 view .LVU5
  37               		.loc 1 57 5 view .LVU6
  38 0008 83B7      		in r24,0x33
  39 000a 8160      		ori r24,lo8(1)
  40 000c 83BF      		out 0x33,r24
  58:tmk_core/common/avr/suspend.c ****     sei();
  41               		.loc 1 58 5 view .LVU7
  42               	/* #APP */
  43               	 ;  58 "tmk_core/common/avr/suspend.c" 1
  44 000e 7894      		sei
  45               	 ;  0 "" 2
  59:tmk_core/common/avr/suspend.c ****     sleep_cpu();
  46               		.loc 1 59 5 view .LVU8
  47               		.loc 1 59 5 view .LVU9
  48               	 ;  59 "tmk_core/common/avr/suspend.c" 1
  49 0010 8895      		sleep
  50               		
  51               	 ;  0 "" 2
  60:tmk_core/common/avr/suspend.c ****     sleep_disable();
  52               		.loc 1 60 5 view .LVU10
  53               		.loc 1 60 5 view .LVU11
  54               	/* #NOAPP */
  55 0012 83B7      		in r24,0x33
  56 0014 8E7F      		andi r24,lo8(-2)
  57 0016 83BF      		out 0x33,r24
  58               	/* epilogue start */
  61:tmk_core/common/avr/suspend.c **** }
  59               		.loc 1 61 1 is_stmt 0 view .LVU12
  60 0018 0895      		ret
  61               		.cfi_endproc
  62               	.LFE107:
  64               		.section	.text.matrix_power_up,"ax",@progbits
  65               		.weak	matrix_power_up
  67               	matrix_power_up:
  68               	.LFB112:
  62:tmk_core/common/avr/suspend.c **** 
  63:tmk_core/common/avr/suspend.c **** // TODO: This needs some cleanup
  64:tmk_core/common/avr/suspend.c **** 
  65:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  66:tmk_core/common/avr/suspend.c ****  *
  67:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  68:tmk_core/common/avr/suspend.c ****  */
  69:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_power_down_user(void) {}
  70:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  71:tmk_core/common/avr/suspend.c ****  *
  72:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  73:tmk_core/common/avr/suspend.c ****  */
  74:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_power_down_kb(void) { suspend_power_down_user(); }
  75:tmk_core/common/avr/suspend.c **** 
  76:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
  77:tmk_core/common/avr/suspend.c **** /** \brief Power down MCU with watchdog timer
  78:tmk_core/common/avr/suspend.c ****  *
  79:tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  80:tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  81:tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  82:tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  83:tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  84:tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  85:tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  86:tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  87:tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  88:tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  89:tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  90:tmk_core/common/avr/suspend.c ****  */
  91:tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  92:tmk_core/common/avr/suspend.c **** 
  93:tmk_core/common/avr/suspend.c **** /** \brief Power down
  94:tmk_core/common/avr/suspend.c ****  *
  95:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  96:tmk_core/common/avr/suspend.c ****  */
  97:tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto) {
  98:tmk_core/common/avr/suspend.c **** #    ifdef PROTOCOL_LUFA
  99:tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
 100:tmk_core/common/avr/suspend.c **** #    endif
 101:tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
 102:tmk_core/common/avr/suspend.c **** 
 103:tmk_core/common/avr/suspend.c ****     // Watchdog Interrupt Mode
 104:tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
 105:tmk_core/common/avr/suspend.c **** 
 106:tmk_core/common/avr/suspend.c **** #    ifdef BACKLIGHT_ENABLE
 107:tmk_core/common/avr/suspend.c ****     backlight_set(0);
 108:tmk_core/common/avr/suspend.c **** #    endif
 109:tmk_core/common/avr/suspend.c **** 
 110:tmk_core/common/avr/suspend.c ****     // Turn off LED indicators
 111:tmk_core/common/avr/suspend.c ****     uint8_t leds_off = 0;
 112:tmk_core/common/avr/suspend.c **** #    if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 113:tmk_core/common/avr/suspend.c ****     if (is_backlight_enabled()) {
 114:tmk_core/common/avr/suspend.c ****         // Don't try to turn off Caps Lock indicator as it is backlight and backlight is already of
 115:tmk_core/common/avr/suspend.c ****         leds_off |= (1 << USB_LED_CAPS_LOCK);
 116:tmk_core/common/avr/suspend.c ****     }
 117:tmk_core/common/avr/suspend.c **** #    endif
 118:tmk_core/common/avr/suspend.c ****     led_set(leds_off);
 119:tmk_core/common/avr/suspend.c **** 
 120:tmk_core/common/avr/suspend.c **** #    ifdef AUDIO_ENABLE
 121:tmk_core/common/avr/suspend.c ****     // This sometimes disables the start-up noise, so it's been disabled
 122:tmk_core/common/avr/suspend.c ****     // stop_all_notes();
 123:tmk_core/common/avr/suspend.c **** #    endif /* AUDIO_ENABLE */
 124:tmk_core/common/avr/suspend.c **** #    if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 125:tmk_core/common/avr/suspend.c **** #        ifdef RGBLIGHT_ANIMATIONS
 126:tmk_core/common/avr/suspend.c ****     rgblight_timer_disable();
 127:tmk_core/common/avr/suspend.c **** #        endif
 128:tmk_core/common/avr/suspend.c ****     if (!is_suspended) {
 129:tmk_core/common/avr/suspend.c ****         is_suspended     = true;
 130:tmk_core/common/avr/suspend.c ****         rgblight_enabled = rgblight_config.enable;
 131:tmk_core/common/avr/suspend.c ****         rgblight_disable_noeeprom();
 132:tmk_core/common/avr/suspend.c ****     }
 133:tmk_core/common/avr/suspend.c **** #    endif
 134:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 135:tmk_core/common/avr/suspend.c **** 
 136:tmk_core/common/avr/suspend.c ****     // TODO: more power saving
 137:tmk_core/common/avr/suspend.c ****     // See PicoPower application note
 138:tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
 139:tmk_core/common/avr/suspend.c ****     // - prescale clock
 140:tmk_core/common/avr/suspend.c ****     // - BOD disable
 141:tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
 142:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 143:tmk_core/common/avr/suspend.c ****     sleep_enable();
 144:tmk_core/common/avr/suspend.c ****     sei();
 145:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 146:tmk_core/common/avr/suspend.c ****     sleep_disable();
 147:tmk_core/common/avr/suspend.c **** 
 148:tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
 149:tmk_core/common/avr/suspend.c ****     wdt_disable();
 150:tmk_core/common/avr/suspend.c **** }
 151:tmk_core/common/avr/suspend.c **** #endif
 152:tmk_core/common/avr/suspend.c **** 
 153:tmk_core/common/avr/suspend.c **** /** \brief Suspend power down
 154:tmk_core/common/avr/suspend.c ****  *
 155:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 156:tmk_core/common/avr/suspend.c ****  */
 157:tmk_core/common/avr/suspend.c **** void suspend_power_down(void) {
 158:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 159:tmk_core/common/avr/suspend.c **** 
 160:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 161:tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
 162:tmk_core/common/avr/suspend.c **** #endif
 163:tmk_core/common/avr/suspend.c **** }
 164:tmk_core/common/avr/suspend.c **** 
 165:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void matrix_power_up(void) {}
  69               		.loc 1 165 50 is_stmt 1 view -0
  70               		.cfi_startproc
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
  75               		.loc 1 165 51 view .LVU14
  76               	/* epilogue start */
  77               		.loc 1 165 1 is_stmt 0 view .LVU15
  78 0000 0895      		ret
  79               		.cfi_endproc
  80               	.LFE112:
  82               		.set	matrix_power_up.localalias.0,matrix_power_up
  83               		.section	.text.suspend_power_down_user,"ax",@progbits
  84               		.weak	suspend_power_down_user
  86               	suspend_power_down_user:
  87               	.LFB124:
  88               		.cfi_startproc
  89               	/* prologue: function */
  90               	/* frame size = 0 */
  91               	/* stack size = 0 */
  92               	.L__stack_usage = 0
  93               	/* epilogue start */
  94 0000 0895      		ret
  95               		.cfi_endproc
  96               	.LFE124:
  98               		.section	.text.suspend_power_down_kb,"ax",@progbits
  99               		.weak	suspend_power_down_kb
 101               	suspend_power_down_kb:
 102               	.LFB109:
  74:tmk_core/common/avr/suspend.c **** 
 103               		.loc 1 74 56 is_stmt 1 view -0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
  74:tmk_core/common/avr/suspend.c **** 
 109               		.loc 1 74 58 view .LVU17
 110 0000 0C94 0000 		jmp suspend_power_down_user
 111               	.LVL2:
 112               		.cfi_endproc
 113               	.LFE109:
 115               		.section	.text.suspend_power_down,"ax",@progbits
 116               	.global	suspend_power_down
 118               	suspend_power_down:
 119               	.LFB111:
 157:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 120               		.loc 1 157 31 view -0
 121               		.cfi_startproc
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 0 */
 125               	.L__stack_usage = 0
 158:tmk_core/common/avr/suspend.c **** 
 126               		.loc 1 158 5 view .LVU19
 127 0000 0E94 0000 		call suspend_power_down_kb
 128               	.LVL3:
 161:tmk_core/common/avr/suspend.c **** #endif
 129               		.loc 1 161 5 view .LVU20
 130               	.LBB11:
 131               	.LBI11:
  97:tmk_core/common/avr/suspend.c **** #    ifdef PROTOCOL_LUFA
 132               		.loc 1 97 13 view .LVU21
 133               	.LBB12:
  99:tmk_core/common/avr/suspend.c **** #    endif
 134               		.loc 1 99 5 view .LVU22
  99:tmk_core/common/avr/suspend.c **** #    endif
 135               		.loc 1 99 25 is_stmt 0 view .LVU23
 136 0004 8091 0000 		lds r24,USB_DeviceState
  99:tmk_core/common/avr/suspend.c **** #    endif
 137               		.loc 1 99 8 view .LVU24
 138 0008 8430      		cpi r24,lo8(4)
 139 000a 01F4      		brne .+2
 140 000c 00C0      		rjmp .L5
 101:tmk_core/common/avr/suspend.c **** 
 141               		.loc 1 101 5 is_stmt 1 view .LVU25
 101:tmk_core/common/avr/suspend.c **** 
 142               		.loc 1 101 17 is_stmt 0 view .LVU26
 143 000e 1092 0000 		sts wdt_timeout,__zero_reg__
 104:tmk_core/common/avr/suspend.c **** 
 144               		.loc 1 104 5 is_stmt 1 view .LVU27
 145 0012 88E1      		ldi r24,lo8(24)
 146 0014 90E0      		ldi r25,0
 147 0016 20E4      		ldi r18,lo8(64)
 148               	/* #APP */
 149               	 ;  104 "tmk_core/common/avr/suspend.c" 1
 150 0018 0FB6      		in __tmp_reg__,__SREG__
 151 001a F894      		cli
 152 001c A895      		wdr
 153 001e 8093 6000 		sts 96,r24
 154 0022 0FBE      		out __SREG__,__tmp_reg__
 155 0024 2093 6000 		sts 96,r18
 156               		
 157               	 ;  0 "" 2
 111:tmk_core/common/avr/suspend.c **** #    if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 158               		.loc 1 111 5 view .LVU28
 159               	.LVL4:
 118:tmk_core/common/avr/suspend.c **** 
 160               		.loc 1 118 5 view .LVU29
 161               	/* #NOAPP */
 162 0028 80E0      		ldi r24,0
 163 002a 0E94 0000 		call led_set
 164               	.LVL5:
 126:tmk_core/common/avr/suspend.c **** #        endif
 165               		.loc 1 126 5 view .LVU30
 166 002e 0E94 0000 		call rgblight_timer_disable
 167               	.LVL6:
 128:tmk_core/common/avr/suspend.c ****         is_suspended     = true;
 168               		.loc 1 128 5 view .LVU31
 128:tmk_core/common/avr/suspend.c ****         is_suspended     = true;
 169               		.loc 1 128 8 is_stmt 0 view .LVU32
 170 0032 8091 0000 		lds r24,is_suspended
 171 0036 8111      		cpse r24,__zero_reg__
 172 0038 00C0      		rjmp .L7
 129:tmk_core/common/avr/suspend.c ****         rgblight_enabled = rgblight_config.enable;
 173               		.loc 1 129 9 is_stmt 1 view .LVU33
 129:tmk_core/common/avr/suspend.c ****         rgblight_enabled = rgblight_config.enable;
 174               		.loc 1 129 26 is_stmt 0 view .LVU34
 175 003a 81E0      		ldi r24,lo8(1)
 176 003c 8093 0000 		sts is_suspended,r24
 130:tmk_core/common/avr/suspend.c ****         rgblight_disable_noeeprom();
 177               		.loc 1 130 9 is_stmt 1 view .LVU35
 130:tmk_core/common/avr/suspend.c ****         rgblight_disable_noeeprom();
 178               		.loc 1 130 43 is_stmt 0 view .LVU36
 179 0040 8091 0000 		lds r24,rgblight_config
 180 0044 8170      		andi r24,1
 130:tmk_core/common/avr/suspend.c ****         rgblight_disable_noeeprom();
 181               		.loc 1 130 26 view .LVU37
 182 0046 8093 0000 		sts rgblight_enabled,r24
 131:tmk_core/common/avr/suspend.c ****     }
 183               		.loc 1 131 9 is_stmt 1 view .LVU38
 184 004a 0E94 0000 		call rgblight_disable_noeeprom
 185               	.LVL7:
 186               	.L7:
 134:tmk_core/common/avr/suspend.c **** 
 187               		.loc 1 134 5 view .LVU39
 188 004e 0E94 0000 		call suspend_power_down_kb
 189               	.LVL8:
 142:tmk_core/common/avr/suspend.c ****     sleep_enable();
 190               		.loc 1 142 5 view .LVU40
 142:tmk_core/common/avr/suspend.c ****     sleep_enable();
 191               		.loc 1 142 5 view .LVU41
 192 0052 83B7      		in r24,0x33
 193 0054 817F      		andi r24,lo8(-15)
 194 0056 8460      		ori r24,lo8(4)
 195 0058 83BF      		out 0x33,r24
 143:tmk_core/common/avr/suspend.c ****     sei();
 196               		.loc 1 143 5 view .LVU42
 143:tmk_core/common/avr/suspend.c ****     sei();
 197               		.loc 1 143 5 view .LVU43
 198 005a 83B7      		in r24,0x33
 199 005c 8160      		ori r24,lo8(1)
 200 005e 83BF      		out 0x33,r24
 144:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 201               		.loc 1 144 5 view .LVU44
 202               	/* #APP */
 203               	 ;  144 "tmk_core/common/avr/suspend.c" 1
 204 0060 7894      		sei
 205               	 ;  0 "" 2
 145:tmk_core/common/avr/suspend.c ****     sleep_disable();
 206               		.loc 1 145 5 view .LVU45
 145:tmk_core/common/avr/suspend.c ****     sleep_disable();
 207               		.loc 1 145 5 view .LVU46
 208               	 ;  145 "tmk_core/common/avr/suspend.c" 1
 209 0062 8895      		sleep
 210               		
 211               	 ;  0 "" 2
 146:tmk_core/common/avr/suspend.c **** 
 212               		.loc 1 146 5 view .LVU47
 146:tmk_core/common/avr/suspend.c **** 
 213               		.loc 1 146 5 view .LVU48
 214               	/* #NOAPP */
 215 0064 83B7      		in r24,0x33
 216 0066 8E7F      		andi r24,lo8(-2)
 217 0068 83BF      		out 0x33,r24
 149:tmk_core/common/avr/suspend.c **** }
 218               		.loc 1 149 5 view .LVU49
 219               	.LBB13:
 220               	.LBI13:
 221               		.file 2 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
   1:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    All rights reserved.
   4:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   5:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   8:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions of source code must retain the above copyright
   9:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  11:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      the documentation and/or other materials provided with the
  14:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      distribution.
  15:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  16:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      contributors may be used to endorse or promote products derived
  18:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      from this software without specific prior written permission.
  19:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  20:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  32:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  34:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
  35:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  */
  37:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  38:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef _AVR_WDT_H_
  39:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _AVR_WDT_H_
  40:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  41:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <avr/io.h>
  42:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <stdint.h>
  43:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  44:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \file */
  45:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  48:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     This header file declares the interface to some inline macros
  49:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     to prevent the watchdog timer configuration from being
  51:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     accidentally altered by a crashing application, a special timed
  52:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     sequence is required in order to change it.  The macros within
  53:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     this header file handle the required sequence automatically
  54:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the manipulation.
  56:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  57:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \note Depending on the fuse configuration of the particular
  58:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     device, further restrictions might apply, in particular it might
  59:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     be disallowed to turn off the watchdog timer.
  60:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  61:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     timer remains active even after a system reset (except a power-on
  64:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the following:
  68:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  69:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code
  70:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <stdint.h>
  71:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <avr/wdt.h>
  72:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  73:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  75:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void) \
  76:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((naked)) \
  77:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((section(".init3")));
  78:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void)
  79:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     {
  80:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       mcusr_mirror = MCUSR;
  81:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       MCUSR = 0;
  82:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       wdt_disable();
  83:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     }
  84:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \endcode
  85:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  86:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     clearing the watchdog reset flag before disabling the
  89:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     watchdog is required, according to the datasheet.
  90:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  91:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  92:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
  93:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
  94:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    a call to this instruction is required before the timer expires,
  96:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  98:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  99:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 101:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef __DOXYGEN__
 102:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 103:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDP3)
 104:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 106:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       0x00
 107:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 108:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 109:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTCSR)
 110:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(WDTCR)
 112:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 114:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 116:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 117:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTOE)
 118:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 120:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 122:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 123:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif	/* !__DOXYGEN__ */
 124:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 125:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 126:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
 127:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
 128:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    through \c WDP3 bits).
 133:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 134:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 136:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 137:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 138:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(__AVR_XMEGA__)
 139:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 140:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
 141:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    wdt_enable(timeout) for xmega devices
 142:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    registers to the CCP register
 144:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** At the same time,
 145:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    3) set timeout (timeout)
 148:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    sync is finished).
 151:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 152:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 153:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 154:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 155:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (         \
 156:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]                "=r" (temp) \
 165:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 175:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 176:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 177:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 178:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : \
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 190:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** );
 191:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 192:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(__AVR_TINY__)
 193:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 194:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(value) \
 195:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 196:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 198:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 199:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /* no outputs */  \
 203:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 209:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** )
 210:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 211:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 212:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 213:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp_wd; \
 214:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 215:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 217:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 218:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /*no output */ \
 224:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 230:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 231:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }while(0)
 232:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 233:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(CCP)
 234:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 235:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 236:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 237:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 238:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 239:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 241:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 242:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 244:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 245:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 249:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 256:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 259:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 260:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 267:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 274:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 275:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 277:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 278:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 280:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 281:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 285:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 291:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 292:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 293:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 294:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  	{
 295:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 296:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 298:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 299:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 303:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 309:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 310:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 311:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 312:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 313:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 314:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 315:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 316:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 317:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 319:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 320:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 321:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 323:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 324:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 330:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 336:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 337:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 338:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 340:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 341:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 342:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 344:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 345:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 351:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 357:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 358:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 359:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 361:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 362:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 363:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 365:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 366:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 372:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 378:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 379:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 380:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 381:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 382:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 383:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 384:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 386:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 387:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 393:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 399:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 400:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 401:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 402:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 403:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 404:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 405:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 406:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 407:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 408:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 409:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 411:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 412:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 414:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 415:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %1" "\n\t"
 416:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %2" "\n \t"
 418:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 419:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 424:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 425:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 426:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 427:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 428:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 429:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 431:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 432:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %1" "\n\t"
 433:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %2" "\n \t"
 435:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 436:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 441:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 442:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 443:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 444:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 445:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 446:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 447:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 222               		.loc 2 447 6 view .LVU50
 223               	.LBE13:
 224               	.LBE12:
 225               	.LBE11:
 448:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 449:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 226               		.loc 2 449 2 view .LVU51
 227               	.LBB17:
 228               	.LBB16:
 229               	.LBB15:
 230               	.LBB14:
 450:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 451:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 452:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 453:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli"                        "\n\t"
 455:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr"                        "\n\t"
 456:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 465:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 466:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 467:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 468:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 469:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 231               		.loc 2 469 9 view .LVU52
 470:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 232               		.loc 2 470 3 view .LVU53
 233               	/* #APP */
 234               	 ;  470 "c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\inclu
 235 006a 0FB6      		in __tmp_reg__,__SREG__
 236 006c F894      		cli
 237 006e A895      		wdr
 238 0070 8091 6000 		lds r24,96
 239 0074 8861      		ori r24,24
 240 0076 8093 6000 		sts 96,r24
 241 007a 1092 6000 		sts 96,__zero_reg__
 242 007e 0FBE      		out __SREG__,__tmp_reg__
 243               		
 244               	 ;  0 "" 2
 245               	.LVL9:
 246               	/* #NOAPP */
 247               	.L5:
 248               	/* epilogue start */
 249               		.loc 2 470 3 is_stmt 0 view .LVU54
 250               	.LBE14:
 251               	.LBE15:
 252               	.LBE16:
 253               	.LBE17:
 163:tmk_core/common/avr/suspend.c **** 
 254               		.loc 1 163 1 view .LVU55
 255 0080 0895      		ret
 256               		.cfi_endproc
 257               	.LFE111:
 259               		.section	.text.matrix_power_down,"ax",@progbits
 260               		.weak	matrix_power_down
 262               	matrix_power_down:
 263               	.LFB120:
 264               		.cfi_startproc
 265               	/* prologue: function */
 266               	/* frame size = 0 */
 267               	/* stack size = 0 */
 268               	.L__stack_usage = 0
 269               	/* epilogue start */
 270 0000 0895      		ret
 271               		.cfi_endproc
 272               	.LFE120:
 274               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 275               	.global	suspend_wakeup_condition
 277               	suspend_wakeup_condition:
 278               	.LFB114:
 166:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void matrix_power_down(void) {}
 167:tmk_core/common/avr/suspend.c **** bool                       suspend_wakeup_condition(void) {
 279               		.loc 1 167 59 is_stmt 1 view -0
 280               		.cfi_startproc
 281               		.loc 1 167 59 is_stmt 0 view .LVU57
 282 0000 CF93      		push r28
 283               	.LCFI0:
 284               		.cfi_def_cfa_offset 3
 285               		.cfi_offset 28, -2
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 1 */
 289               	.L__stack_usage = 1
 168:tmk_core/common/avr/suspend.c ****     matrix_power_up();
 290               		.loc 1 168 5 is_stmt 1 view .LVU58
 291 0002 0E94 0000 		call matrix_power_up
 292               	.LVL10:
 169:tmk_core/common/avr/suspend.c ****     matrix_scan();
 293               		.loc 1 169 5 view .LVU59
 294 0006 0E94 0000 		call matrix_scan
 295               	.LVL11:
 170:tmk_core/common/avr/suspend.c ****     matrix_power_down();
 296               		.loc 1 170 5 view .LVU60
 297 000a 0E94 0000 		call matrix_power_down
 298               	.LVL12:
 171:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 299               		.loc 1 171 5 view .LVU61
 300               	.LBB18:
 301               		.loc 1 171 10 view .LVU62
 302               		.loc 1 171 18 is_stmt 0 view .LVU63
 303 000e C0E0      		ldi r28,0
 304               	.LVL13:
 305               	.L14:
 172:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 306               		.loc 1 172 9 is_stmt 1 view .LVU64
 307               		.loc 1 172 13 is_stmt 0 view .LVU65
 308 0010 8C2F      		mov r24,r28
 309 0012 0E94 0000 		call matrix_get_row
 310               	.LVL14:
 311               		.loc 1 172 12 view .LVU66
 312 0016 892B      		or r24,r25
 313 0018 01F4      		brne .L15
 171:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 314               		.loc 1 171 43 discriminator 2 view .LVU67
 315 001a CF5F      		subi r28,lo8(-(1))
 316               	.LVL15:
 171:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 317               		.loc 1 171 5 discriminator 2 view .LVU68
 318 001c C430      		cpi r28,lo8(4)
 319 001e 01F4      		brne .L14
 320               	.LBE18:
 173:tmk_core/common/avr/suspend.c ****     }
 174:tmk_core/common/avr/suspend.c ****     return false;
 321               		.loc 1 174 12 view .LVU69
 322 0020 80E0      		ldi r24,0
 323               	.L12:
 324               	/* epilogue start */
 175:tmk_core/common/avr/suspend.c **** }
 325               		.loc 1 175 1 view .LVU70
 326 0022 CF91      		pop r28
 327               	.LVL16:
 328               		.loc 1 175 1 view .LVU71
 329 0024 0895      		ret
 330               	.LVL17:
 331               	.L15:
 332               	.LBB19:
 172:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 333               		.loc 1 172 39 view .LVU72
 334 0026 81E0      		ldi r24,lo8(1)
 335 0028 00C0      		rjmp .L12
 336               	.LBE19:
 337               		.cfi_endproc
 338               	.LFE114:
 340               		.section	.text.suspend_wakeup_init_user,"ax",@progbits
 341               		.weak	suspend_wakeup_init_user
 343               	suspend_wakeup_init_user:
 344               	.LFB122:
 345               		.cfi_startproc
 346               	/* prologue: function */
 347               	/* frame size = 0 */
 348               	/* stack size = 0 */
 349               	.L__stack_usage = 0
 350               	/* epilogue start */
 351 0000 0895      		ret
 352               		.cfi_endproc
 353               	.LFE122:
 355               		.section	.text.suspend_wakeup_init_kb,"ax",@progbits
 356               		.weak	suspend_wakeup_init_kb
 358               	suspend_wakeup_init_kb:
 359               	.LFB116:
 176:tmk_core/common/avr/suspend.c **** 
 177:tmk_core/common/avr/suspend.c **** /** \brief run user level code immediately after wakeup
 178:tmk_core/common/avr/suspend.c ****  *
 179:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 180:tmk_core/common/avr/suspend.c ****  */
 181:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_wakeup_init_user(void) {}
 182:tmk_core/common/avr/suspend.c **** 
 183:tmk_core/common/avr/suspend.c **** /** \brief run keyboard level code immediately after wakeup
 184:tmk_core/common/avr/suspend.c ****  *
 185:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 186:tmk_core/common/avr/suspend.c ****  */
 187:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_wakeup_init_kb(void) { suspend_wakeup_init_user(); }
 360               		.loc 1 187 57 is_stmt 1 view -0
 361               		.cfi_startproc
 362               	/* prologue: function */
 363               	/* frame size = 0 */
 364               	/* stack size = 0 */
 365               	.L__stack_usage = 0
 366               		.loc 1 187 59 view .LVU74
 367 0000 0C94 0000 		jmp suspend_wakeup_init_user
 368               	.LVL18:
 369               		.cfi_endproc
 370               	.LFE116:
 372               		.section	.text.suspend_wakeup_init,"ax",@progbits
 373               	.global	suspend_wakeup_init
 375               	suspend_wakeup_init:
 376               	.LFB117:
 188:tmk_core/common/avr/suspend.c **** /** \brief run immediately after wakeup
 189:tmk_core/common/avr/suspend.c ****  *
 190:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 191:tmk_core/common/avr/suspend.c ****  */
 192:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void) {
 377               		.loc 1 192 32 view -0
 378               		.cfi_startproc
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 0 */
 382               	.L__stack_usage = 0
 193:tmk_core/common/avr/suspend.c ****     // clear keyboard state
 194:tmk_core/common/avr/suspend.c ****     clear_keyboard();
 383               		.loc 1 194 5 view .LVU76
 384 0000 0E94 0000 		call clear_keyboard
 385               	.LVL19:
 195:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 196:tmk_core/common/avr/suspend.c ****     backlight_init();
 197:tmk_core/common/avr/suspend.c **** #endif
 198:tmk_core/common/avr/suspend.c ****     led_set(host_keyboard_leds());
 386               		.loc 1 198 5 view .LVU77
 387 0004 0E94 0000 		call host_keyboard_leds
 388               	.LVL20:
 389 0008 0E94 0000 		call led_set
 390               	.LVL21:
 199:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 200:tmk_core/common/avr/suspend.c ****     is_suspended = false;
 391               		.loc 1 200 5 view .LVU78
 392               		.loc 1 200 18 is_stmt 0 view .LVU79
 393 000c 1092 0000 		sts is_suspended,__zero_reg__
 201:tmk_core/common/avr/suspend.c ****     if (rgblight_enabled) {
 394               		.loc 1 201 5 is_stmt 1 view .LVU80
 395               		.loc 1 201 8 is_stmt 0 view .LVU81
 396 0010 8091 0000 		lds r24,rgblight_enabled
 397 0014 8111      		cpse r24,__zero_reg__
 202:tmk_core/common/avr/suspend.c **** #    ifdef BOOTLOADER_TEENSY
 203:tmk_core/common/avr/suspend.c ****         wait_ms(10);
 204:tmk_core/common/avr/suspend.c **** #    endif
 205:tmk_core/common/avr/suspend.c ****         rgblight_enable_noeeprom();
 398               		.loc 1 205 9 is_stmt 1 view .LVU82
 399 0016 0E94 0000 		call rgblight_enable_noeeprom
 400               	.LVL22:
 401               	.L20:
 206:tmk_core/common/avr/suspend.c ****     }
 207:tmk_core/common/avr/suspend.c **** #    ifdef RGBLIGHT_ANIMATIONS
 208:tmk_core/common/avr/suspend.c ****     rgblight_timer_enable();
 402               		.loc 1 208 5 view .LVU83
 403 001a 0E94 0000 		call rgblight_timer_enable
 404               	.LVL23:
 209:tmk_core/common/avr/suspend.c **** #    endif
 210:tmk_core/common/avr/suspend.c **** #endif
 211:tmk_core/common/avr/suspend.c ****     suspend_wakeup_init_kb();
 405               		.loc 1 211 5 view .LVU84
 406 001e 0C94 0000 		jmp suspend_wakeup_init_kb
 407               	.LVL24:
 408               		.cfi_endproc
 409               	.LFE117:
 411               		.section	.text.__vector_13,"ax",@progbits
 412               	.global	__vector_13
 414               	__vector_13:
 415               	.LFB118:
 212:tmk_core/common/avr/suspend.c **** }
 213:tmk_core/common/avr/suspend.c **** 
 214:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 215:tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 216:tmk_core/common/avr/suspend.c **** ISR(WDT_vect) {
 416               		.loc 1 216 15 view -0
 417               		.cfi_startproc
 418 0000 1F92 1FB6 		__gcc_isr 1
 418      1F92 1124 
 418      8F93 
 419 000a 9F93      		push r25
 420               	.LCFI1:
 421               		.cfi_def_cfa_offset 3
 422               		.cfi_offset 25, -2
 423 000c AF93      		push r26
 424               	.LCFI2:
 425               		.cfi_def_cfa_offset 4
 426               		.cfi_offset 26, -3
 427 000e BF93      		push r27
 428               	.LCFI3:
 429               		.cfi_def_cfa_offset 5
 430               		.cfi_offset 27, -4
 431               	/* prologue: Signal */
 432               	/* frame size = 0 */
 433               	/* stack size = 3...7 */
 434               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 217:tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 218:tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 435               		.loc 1 218 5 view .LVU86
 436 0010 8091 0000 		lds r24,wdt_timeout
 437 0014 8111      		cpse r24,__zero_reg__
 438 0016 00C0      		rjmp .L24
 219:tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 220:tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 439               		.loc 1 220 13 view .LVU87
 440               		.loc 1 220 25 is_stmt 0 view .LVU88
 441 0018 8091 0000 		lds r24,timer_count
 442 001c 9091 0000 		lds r25,timer_count+1
 443 0020 A091 0000 		lds r26,timer_count+2
 444 0024 B091 0000 		lds r27,timer_count+3
 445 0028 4196      		adiw r24,17
 446 002a A11D      		adc r26,__zero_reg__
 447 002c B11D      		adc r27,__zero_reg__
 448 002e 8093 0000 		sts timer_count,r24
 449 0032 9093 0000 		sts timer_count+1,r25
 450 0036 A093 0000 		sts timer_count+2,r26
 451 003a B093 0000 		sts timer_count+3,r27
 221:tmk_core/common/avr/suspend.c ****             break;
 452               		.loc 1 221 13 is_stmt 1 view .LVU89
 222:tmk_core/common/avr/suspend.c ****         default:;
 453               		.loc 1 222 17 view .LVU90
 454               	.L24:
 455               	/* epilogue start */
 223:tmk_core/common/avr/suspend.c ****     }
 224:tmk_core/common/avr/suspend.c **** }
 456               		.loc 1 224 1 is_stmt 0 view .LVU91
 457 003e BF91      		pop r27
 458 0040 AF91      		pop r26
 459 0042 9F91      		pop r25
 460 0044 8F91 1F90 		__gcc_isr 2
 460      1FBE 1F90 
 461 004c 1895      		reti
 462               		__gcc_isr 0,r24
 463               		.cfi_endproc
 464               	.LFE118:
 466               		.section	.bss.wdt_timeout,"aw",@nobits
 469               	wdt_timeout:
 470 0000 00        		.zero	1
 471               		.section	.bss.is_suspended,"aw",@nobits
 474               	is_suspended:
 475 0000 00        		.zero	1
 476               		.section	.bss.rgblight_enabled,"aw",@nobits
 479               	rgblight_enabled:
 480 0000 00        		.zero	1
 481               		.text
 482               	.Letext0:
 483               		.file 3 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 484               		.file 4 "tmk_core/common/action.h"
 485               		.file 5 "tmk_core/common/timer.h"
 486               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 487               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 488               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 489               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 490               		.file 10 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
 491               		.file 11 "tmk_core/common/report.h"
 492               		.file 12 "tmk_core/common/host_driver.h"
 493               		.file 13 "tmk_core/common/host.h"
 494               		.file 14 "tmk_core/protocol/lufa/lufa.h"
 495               		.file 15 "./quantum/color.h"
 496               		.file 16 "quantum/rgblight.h"
 497               		.file 17 "tmk_core/common/led.h"
 498               		.file 18 "tmk_core/common/matrix.h"
 499               		.file 19 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
DEFINED SYMBOLS
                            *ABS*:00000000 suspend.c
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:2      *ABS*:0000003e __SP_H__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:3      *ABS*:0000003d __SP_L__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:4      *ABS*:0000003f __SREG__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:6      *ABS*:00000001 __zero_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:13     .text.suspend_idle:00000000 suspend_idle
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:67     .text.matrix_power_up:00000000 matrix_power_up
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:67     .text.matrix_power_up:00000000 matrix_power_up.localalias.0
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:86     .text.suspend_power_down_user:00000000 suspend_power_down_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:101    .text.suspend_power_down_kb:00000000 suspend_power_down_kb
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:118    .text.suspend_power_down:00000000 suspend_power_down
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:469    .bss.wdt_timeout:00000000 wdt_timeout
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:474    .bss.is_suspended:00000000 is_suspended
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:479    .bss.rgblight_enabled:00000000 rgblight_enabled
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:262    .text.matrix_power_down:00000000 matrix_power_down
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:277    .text.suspend_wakeup_condition:00000000 suspend_wakeup_condition
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:343    .text.suspend_wakeup_init_user:00000000 suspend_wakeup_init_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:358    .text.suspend_wakeup_init_kb:00000000 suspend_wakeup_init_kb
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:375    .text.suspend_wakeup_init:00000000 suspend_wakeup_init
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccBI9GZM.s:414    .text.__vector_13:00000000 __vector_13
                            *ABS*:00000003 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
USB_DeviceState
led_set
rgblight_timer_disable
rgblight_config
rgblight_disable_noeeprom
matrix_scan
matrix_get_row
clear_keyboard
host_keyboard_leds
rgblight_enable_noeeprom
rgblight_timer_enable
timer_count
__do_clear_bss
