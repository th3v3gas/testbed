   1               		.file	"split_scomm.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.serial_master_init,"ax",@progbits
  11               	.global	serial_master_init
  13               	serial_master_init:
  14               	.LFB0:
  15               		.file 1 "keyboards/crkbd/rev1/split_scomm.c"
   1:keyboards/crkbd/rev1/split_scomm.c **** #ifdef USE_SERIAL
   2:keyboards/crkbd/rev1/split_scomm.c **** #ifdef SERIAL_USE_MULTI_TRANSACTION
   3:keyboards/crkbd/rev1/split_scomm.c **** /* --- USE flexible API (using multi-type transaction function) --- */
   4:keyboards/crkbd/rev1/split_scomm.c **** 
   5:keyboards/crkbd/rev1/split_scomm.c **** #include <stdbool.h>
   6:keyboards/crkbd/rev1/split_scomm.c **** #include <stdint.h>
   7:keyboards/crkbd/rev1/split_scomm.c **** #include <stddef.h>
   8:keyboards/crkbd/rev1/split_scomm.c **** #include <split_scomm.h>
   9:keyboards/crkbd/rev1/split_scomm.c **** #include "serial.h"
  10:keyboards/crkbd/rev1/split_scomm.c **** #ifdef CONSOLE_ENABLE
  11:keyboards/crkbd/rev1/split_scomm.c ****   #include <print.h>
  12:keyboards/crkbd/rev1/split_scomm.c **** #endif
  13:keyboards/crkbd/rev1/split_scomm.c **** 
  14:keyboards/crkbd/rev1/split_scomm.c **** uint8_t volatile serial_slave_buffer[SERIAL_SLAVE_BUFFER_LENGTH] = {0};
  15:keyboards/crkbd/rev1/split_scomm.c **** uint8_t volatile serial_master_buffer[SERIAL_MASTER_BUFFER_LENGTH] = {0};
  16:keyboards/crkbd/rev1/split_scomm.c **** uint8_t volatile status_com = 0;
  17:keyboards/crkbd/rev1/split_scomm.c **** uint8_t volatile status1 = 0;
  18:keyboards/crkbd/rev1/split_scomm.c **** uint8_t slave_buffer_change_count = 0;
  19:keyboards/crkbd/rev1/split_scomm.c **** uint8_t s_change_old = 0xff;
  20:keyboards/crkbd/rev1/split_scomm.c **** uint8_t s_change_new = 0xff;
  21:keyboards/crkbd/rev1/split_scomm.c **** 
  22:keyboards/crkbd/rev1/split_scomm.c **** SSTD_t transactions[] = {
  23:keyboards/crkbd/rev1/split_scomm.c **** #define GET_SLAVE_STATUS 0
  24:keyboards/crkbd/rev1/split_scomm.c ****     /* master buffer not changed, only recive slave_buffer_change_count */
  25:keyboards/crkbd/rev1/split_scomm.c ****     { (uint8_t *)&status_com,
  26:keyboards/crkbd/rev1/split_scomm.c ****       0, NULL,
  27:keyboards/crkbd/rev1/split_scomm.c ****       sizeof(slave_buffer_change_count), &slave_buffer_change_count,
  28:keyboards/crkbd/rev1/split_scomm.c ****     },
  29:keyboards/crkbd/rev1/split_scomm.c **** #define PUT_MASTER_GET_SLAVE_STATUS 1
  30:keyboards/crkbd/rev1/split_scomm.c ****     /* master buffer changed need send, and recive slave_buffer_change_count  */
  31:keyboards/crkbd/rev1/split_scomm.c ****     { (uint8_t *)&status_com,
  32:keyboards/crkbd/rev1/split_scomm.c ****       sizeof(serial_master_buffer), (uint8_t *)serial_master_buffer,
  33:keyboards/crkbd/rev1/split_scomm.c ****       sizeof(slave_buffer_change_count), &slave_buffer_change_count,
  34:keyboards/crkbd/rev1/split_scomm.c ****     },
  35:keyboards/crkbd/rev1/split_scomm.c **** #define GET_SLAVE_BUFFER 2
  36:keyboards/crkbd/rev1/split_scomm.c ****     /* recive serial_slave_buffer */
  37:keyboards/crkbd/rev1/split_scomm.c ****     { (uint8_t *)&status1,
  38:keyboards/crkbd/rev1/split_scomm.c ****       0, NULL,
  39:keyboards/crkbd/rev1/split_scomm.c ****       sizeof(serial_slave_buffer), (uint8_t *)serial_slave_buffer
  40:keyboards/crkbd/rev1/split_scomm.c ****     }
  41:keyboards/crkbd/rev1/split_scomm.c **** };
  42:keyboards/crkbd/rev1/split_scomm.c **** 
  43:keyboards/crkbd/rev1/split_scomm.c **** void serial_master_init(void)
  44:keyboards/crkbd/rev1/split_scomm.c **** {
  16               		.loc 1 44 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  45:keyboards/crkbd/rev1/split_scomm.c ****     soft_serial_initiator_init(transactions, TID_LIMIT(transactions));
  22               		.loc 1 45 5 view .LVU1
  23 0000 63E0      		ldi r22,lo8(3)
  24 0002 70E0      		ldi r23,0
  25 0004 80E0      		ldi r24,lo8(transactions)
  26 0006 90E0      		ldi r25,hi8(transactions)
  27 0008 0C94 0000 		jmp soft_serial_initiator_init
  28               	.LVL0:
  29               		.cfi_endproc
  30               	.LFE0:
  32               		.section	.text.serial_slave_init,"ax",@progbits
  33               	.global	serial_slave_init
  35               	serial_slave_init:
  36               	.LFB1:
  46:keyboards/crkbd/rev1/split_scomm.c **** }
  47:keyboards/crkbd/rev1/split_scomm.c **** 
  48:keyboards/crkbd/rev1/split_scomm.c **** void serial_slave_init(void)
  49:keyboards/crkbd/rev1/split_scomm.c **** {
  37               		.loc 1 49 1 view -0
  38               		.cfi_startproc
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  50:keyboards/crkbd/rev1/split_scomm.c ****     soft_serial_target_init(transactions, TID_LIMIT(transactions));
  43               		.loc 1 50 5 view .LVU3
  44 0000 63E0      		ldi r22,lo8(3)
  45 0002 70E0      		ldi r23,0
  46 0004 80E0      		ldi r24,lo8(transactions)
  47 0006 90E0      		ldi r25,hi8(transactions)
  48 0008 0C94 0000 		jmp soft_serial_target_init
  49               	.LVL1:
  50               		.cfi_endproc
  51               	.LFE1:
  53               		.section	.text.serial_update_buffers,"ax",@progbits
  54               	.global	serial_update_buffers
  56               	serial_update_buffers:
  57               	.LVL2:
  58               	.LFB2:
  51:keyboards/crkbd/rev1/split_scomm.c **** }
  52:keyboards/crkbd/rev1/split_scomm.c **** 
  53:keyboards/crkbd/rev1/split_scomm.c **** // 0 => no error
  54:keyboards/crkbd/rev1/split_scomm.c **** // 1 => slave did not respond
  55:keyboards/crkbd/rev1/split_scomm.c **** // 2 => checksum error
  56:keyboards/crkbd/rev1/split_scomm.c **** int serial_update_buffers(int master_update)
  57:keyboards/crkbd/rev1/split_scomm.c **** {
  59               		.loc 1 57 1 view -0
  60               		.cfi_startproc
  61               		.loc 1 57 1 is_stmt 0 view .LVU5
  62 0000 0F93      		push r16
  63               	.LCFI0:
  64               		.cfi_def_cfa_offset 3
  65               		.cfi_offset 16, -2
  66 0002 1F93      		push r17
  67               	.LCFI1:
  68               		.cfi_def_cfa_offset 4
  69               		.cfi_offset 17, -3
  70 0004 CF93      		push r28
  71               	.LCFI2:
  72               		.cfi_def_cfa_offset 5
  73               		.cfi_offset 28, -4
  74 0006 DF93      		push r29
  75               	.LCFI3:
  76               		.cfi_def_cfa_offset 6
  77               		.cfi_offset 29, -5
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 4 */
  81               	.L__stack_usage = 4
  82 0008 8C01      		movw r16,r24
  58:keyboards/crkbd/rev1/split_scomm.c ****     int status, smatstatus;
  83               		.loc 1 58 5 is_stmt 1 view .LVU6
  59:keyboards/crkbd/rev1/split_scomm.c ****     static int need_retry = 0;
  84               		.loc 1 59 5 view .LVU7
  60:keyboards/crkbd/rev1/split_scomm.c **** 
  61:keyboards/crkbd/rev1/split_scomm.c ****     if( s_change_old != s_change_new ) {
  85               		.loc 1 61 5 view .LVU8
  86               		.loc 1 61 7 is_stmt 0 view .LVU9
  87 000a 9091 0000 		lds r25,s_change_old
  88 000e 8091 0000 		lds r24,s_change_new
  89               	.LVL3:
  62:keyboards/crkbd/rev1/split_scomm.c ****         smatstatus = soft_serial_transaction(GET_SLAVE_BUFFER);
  63:keyboards/crkbd/rev1/split_scomm.c ****         if( smatstatus == TRANSACTION_END ) {
  64:keyboards/crkbd/rev1/split_scomm.c ****             s_change_old = s_change_new;
  65:keyboards/crkbd/rev1/split_scomm.c **** #ifdef CONSOLE_ENABLE
  66:keyboards/crkbd/rev1/split_scomm.c ****             uprintf("slave matrix = %b %b %b %b\n",
  67:keyboards/crkbd/rev1/split_scomm.c ****                     serial_slave_buffer[0], serial_slave_buffer[1],
  68:keyboards/crkbd/rev1/split_scomm.c ****                     serial_slave_buffer[2], serial_slave_buffer[3]);
  69:keyboards/crkbd/rev1/split_scomm.c **** #endif
  70:keyboards/crkbd/rev1/split_scomm.c ****         }
  71:keyboards/crkbd/rev1/split_scomm.c ****     } else {
  72:keyboards/crkbd/rev1/split_scomm.c ****         // serial_slave_buffer dosen't change
  73:keyboards/crkbd/rev1/split_scomm.c ****         smatstatus = TRANSACTION_END; // dummy status
  90               		.loc 1 73 20 view .LVU10
  91 0012 D0E0      		ldi r29,0
  92 0014 C0E0      		ldi r28,0
  61:keyboards/crkbd/rev1/split_scomm.c ****         smatstatus = soft_serial_transaction(GET_SLAVE_BUFFER);
  93               		.loc 1 61 7 view .LVU11
  94 0016 9817      		cp r25,r24
  95 0018 01F0      		breq .L4
  62:keyboards/crkbd/rev1/split_scomm.c ****         smatstatus = soft_serial_transaction(GET_SLAVE_BUFFER);
  96               		.loc 1 62 9 is_stmt 1 view .LVU12
  62:keyboards/crkbd/rev1/split_scomm.c ****         smatstatus = soft_serial_transaction(GET_SLAVE_BUFFER);
  97               		.loc 1 62 22 is_stmt 0 view .LVU13
  98 001a 82E0      		ldi r24,lo8(2)
  99 001c 90E0      		ldi r25,0
 100 001e 0E94 0000 		call soft_serial_transaction
 101               	.LVL4:
 102 0022 EC01      		movw r28,r24
 103               	.LVL5:
  63:keyboards/crkbd/rev1/split_scomm.c ****             s_change_old = s_change_new;
 104               		.loc 1 63 9 is_stmt 1 view .LVU14
  63:keyboards/crkbd/rev1/split_scomm.c ****             s_change_old = s_change_new;
 105               		.loc 1 63 11 is_stmt 0 view .LVU15
 106 0024 892B      		or r24,r25
 107 0026 01F4      		brne .L4
  64:keyboards/crkbd/rev1/split_scomm.c **** #ifdef CONSOLE_ENABLE
 108               		.loc 1 64 13 is_stmt 1 view .LVU16
  64:keyboards/crkbd/rev1/split_scomm.c **** #ifdef CONSOLE_ENABLE
 109               		.loc 1 64 26 is_stmt 0 view .LVU17
 110 0028 8091 0000 		lds r24,s_change_new
 111               	.LVL6:
  64:keyboards/crkbd/rev1/split_scomm.c **** #ifdef CONSOLE_ENABLE
 112               		.loc 1 64 26 view .LVU18
 113 002c 8093 0000 		sts s_change_old,r24
 114               	.LVL7:
 115               	.L4:
  74:keyboards/crkbd/rev1/split_scomm.c ****     }
  75:keyboards/crkbd/rev1/split_scomm.c **** 
  76:keyboards/crkbd/rev1/split_scomm.c ****     if( !master_update && !need_retry) {
 116               		.loc 1 76 5 is_stmt 1 view .LVU19
 117               		.loc 1 76 24 is_stmt 0 view .LVU20
 118 0030 8091 0000 		lds r24,need_retry.1591
 119 0034 9091 0000 		lds r25,need_retry.1591+1
 120 0038 082B      		or r16,r24
 121               	.LVL8:
 122               		.loc 1 76 24 view .LVU21
 123 003a 192B      		or r17,r25
  77:keyboards/crkbd/rev1/split_scomm.c ****         status = soft_serial_transaction(GET_SLAVE_STATUS);
 124               		.loc 1 77 18 view .LVU22
 125 003c 90E0      		ldi r25,0
 126 003e 80E0      		ldi r24,0
  76:keyboards/crkbd/rev1/split_scomm.c ****         status = soft_serial_transaction(GET_SLAVE_STATUS);
 127               		.loc 1 76 24 view .LVU23
 128 0040 012B      		or r16,r17
 129 0042 01F0      		breq .L10
  78:keyboards/crkbd/rev1/split_scomm.c ****     } else {
  79:keyboards/crkbd/rev1/split_scomm.c ****         status = soft_serial_transaction(PUT_MASTER_GET_SLAVE_STATUS);
 130               		.loc 1 79 9 is_stmt 1 view .LVU24
 131               		.loc 1 79 18 is_stmt 0 view .LVU25
 132 0044 81E0      		ldi r24,lo8(1)
 133 0046 90E0      		ldi r25,0
 134               	.L10:
 135 0048 0E94 0000 		call soft_serial_transaction
 136               	.LVL9:
  80:keyboards/crkbd/rev1/split_scomm.c ****     }
  81:keyboards/crkbd/rev1/split_scomm.c ****     if( status == TRANSACTION_END ) {
 137               		.loc 1 81 5 is_stmt 1 view .LVU26
 138               		.loc 1 81 7 is_stmt 0 view .LVU27
 139 004c 892B      		or r24,r25
 140 004e 01F4      		brne .L7
  82:keyboards/crkbd/rev1/split_scomm.c ****         s_change_new = slave_buffer_change_count;
 141               		.loc 1 82 9 is_stmt 1 view .LVU28
 142               		.loc 1 82 22 is_stmt 0 view .LVU29
 143 0050 8091 0000 		lds r24,slave_buffer_change_count
 144               	.LVL10:
 145               		.loc 1 82 22 view .LVU30
 146 0054 8093 0000 		sts s_change_new,r24
  83:keyboards/crkbd/rev1/split_scomm.c ****         need_retry = 0;
 147               		.loc 1 83 9 is_stmt 1 view .LVU31
 148               		.loc 1 83 20 is_stmt 0 view .LVU32
 149 0058 1092 0000 		sts need_retry.1591+1,__zero_reg__
 150 005c 1092 0000 		sts need_retry.1591,__zero_reg__
 151               	.L3:
  84:keyboards/crkbd/rev1/split_scomm.c ****     } else {
  85:keyboards/crkbd/rev1/split_scomm.c ****         need_retry = 1;
  86:keyboards/crkbd/rev1/split_scomm.c ****     }
  87:keyboards/crkbd/rev1/split_scomm.c ****     return smatstatus;
  88:keyboards/crkbd/rev1/split_scomm.c **** }
 152               		.loc 1 88 1 view .LVU33
 153 0060 CE01      		movw r24,r28
 154               	/* epilogue start */
 155 0062 DF91      		pop r29
 156 0064 CF91      		pop r28
 157               	.LVL11:
 158               		.loc 1 88 1 view .LVU34
 159 0066 1F91      		pop r17
 160 0068 0F91      		pop r16
 161 006a 0895      		ret
 162               	.LVL12:
 163               	.L7:
  85:keyboards/crkbd/rev1/split_scomm.c ****     }
 164               		.loc 1 85 9 is_stmt 1 view .LVU35
  85:keyboards/crkbd/rev1/split_scomm.c ****     }
 165               		.loc 1 85 20 is_stmt 0 view .LVU36
 166 006c 81E0      		ldi r24,lo8(1)
 167 006e 90E0      		ldi r25,0
 168               	.LVL13:
  85:keyboards/crkbd/rev1/split_scomm.c ****     }
 169               		.loc 1 85 20 view .LVU37
 170 0070 9093 0000 		sts need_retry.1591+1,r25
 171 0074 8093 0000 		sts need_retry.1591,r24
  87:keyboards/crkbd/rev1/split_scomm.c **** }
 172               		.loc 1 87 5 is_stmt 1 view .LVU38
  87:keyboards/crkbd/rev1/split_scomm.c **** }
 173               		.loc 1 87 12 is_stmt 0 view .LVU39
 174 0078 00C0      		rjmp .L3
 175               		.cfi_endproc
 176               	.LFE2:
 178               		.section	.bss.need_retry.1591,"aw",@nobits
 181               	need_retry.1591:
 182 0000 0000      		.zero	2
 183               	.global	transactions
 184               		.section	.data.transactions,"aw"
 187               	transactions:
 188 0000 0000      		.word	status_com
 189 0002 00        		.byte	0
 190 0003 0000      		.word	0
 191 0005 01        		.byte	1
 192 0006 0000      		.word	slave_buffer_change_count
 193 0008 0000      		.word	status_com
 194 000a 04        		.byte	4
 195 000b 0000      		.word	serial_master_buffer
 196 000d 01        		.byte	1
 197 000e 0000      		.word	slave_buffer_change_count
 198 0010 0000      		.word	status1
 199 0012 00        		.byte	0
 200 0013 0000      		.word	0
 201 0015 04        		.byte	4
 202 0016 0000      		.word	serial_slave_buffer
 203               	.global	s_change_new
 204               		.section	.data.s_change_new,"aw"
 207               	s_change_new:
 208 0000 FF        		.byte	-1
 209               	.global	s_change_old
 210               		.section	.data.s_change_old,"aw"
 213               	s_change_old:
 214 0000 FF        		.byte	-1
 215               	.global	slave_buffer_change_count
 216               		.section	.bss.slave_buffer_change_count,"aw",@nobits
 219               	slave_buffer_change_count:
 220 0000 00        		.zero	1
 221               	.global	status1
 222               		.section	.bss.status1,"aw",@nobits
 225               	status1:
 226 0000 00        		.zero	1
 227               	.global	status_com
 228               		.section	.bss.status_com,"aw",@nobits
 231               	status_com:
 232 0000 00        		.zero	1
 233               	.global	serial_master_buffer
 234               		.section	.bss.serial_master_buffer,"aw",@nobits
 237               	serial_master_buffer:
 238 0000 0000 0000 		.zero	4
 239               	.global	serial_slave_buffer
 240               		.section	.bss.serial_slave_buffer,"aw",@nobits
 243               	serial_slave_buffer:
 244 0000 0000 0000 		.zero	4
 245               		.text
 246               	.Letext0:
 247               		.file 2 "keyboards/crkbd/rev1/split_scomm.h"
 248               		.file 3 "keyboards/crkbd/serial.h"
 249               		.file 4 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
DEFINED SYMBOLS
                            *ABS*:00000000 split_scomm.c
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:2      *ABS*:0000003e __SP_H__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:3      *ABS*:0000003d __SP_L__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:4      *ABS*:0000003f __SREG__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:6      *ABS*:00000001 __zero_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:13     .text.serial_master_init:00000000 serial_master_init
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:187    .data.transactions:00000000 transactions
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:35     .text.serial_slave_init:00000000 serial_slave_init
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:56     .text.serial_update_buffers:00000000 serial_update_buffers
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:213    .data.s_change_old:00000000 s_change_old
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:207    .data.s_change_new:00000000 s_change_new
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:181    .bss.need_retry.1591:00000000 need_retry.1591
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:219    .bss.slave_buffer_change_count:00000000 slave_buffer_change_count
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:231    .bss.status_com:00000000 status_com
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:237    .bss.serial_master_buffer:00000000 serial_master_buffer
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:225    .bss.status1:00000000 status1
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccAsniYt.s:243    .bss.serial_slave_buffer:00000000 serial_slave_buffer

UNDEFINED SYMBOLS
soft_serial_initiator_init
soft_serial_target_init
soft_serial_transaction
__do_copy_data
__do_clear_bss
