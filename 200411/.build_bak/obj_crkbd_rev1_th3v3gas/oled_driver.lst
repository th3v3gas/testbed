   1               		.file	"oled_driver.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.i2c_transmit_P.constprop.2,"ax",@progbits
  12               	i2c_transmit_P.constprop.2:
  13               	.LVL0:
  14               	.LFB32:
  15               		.file 1 "drivers/oled/oled_driver.c"
   1:drivers/oled/oled_driver.c **** /*
   2:drivers/oled/oled_driver.c **** Copyright 2019 Ryan Caltabiano <https://github.com/XScorpion2>
   3:drivers/oled/oled_driver.c **** 
   4:drivers/oled/oled_driver.c **** This program is free software: you can redistribute it and/or modify
   5:drivers/oled/oled_driver.c **** it under the terms of the GNU General Public License as published by
   6:drivers/oled/oled_driver.c **** the Free Software Foundation, either version 2 of the License, or
   7:drivers/oled/oled_driver.c **** (at your option) any later version.
   8:drivers/oled/oled_driver.c **** 
   9:drivers/oled/oled_driver.c **** This program is distributed in the hope that it will be useful,
  10:drivers/oled/oled_driver.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:drivers/oled/oled_driver.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:drivers/oled/oled_driver.c **** GNU General Public License for more details.
  13:drivers/oled/oled_driver.c **** 
  14:drivers/oled/oled_driver.c **** You should have received a copy of the GNU General Public License
  15:drivers/oled/oled_driver.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:drivers/oled/oled_driver.c **** */
  17:drivers/oled/oled_driver.c **** #include "i2c_master.h"
  18:drivers/oled/oled_driver.c **** #include "oled_driver.h"
  19:drivers/oled/oled_driver.c **** #include OLED_FONT_H
  20:drivers/oled/oled_driver.c **** #include "timer.h"
  21:drivers/oled/oled_driver.c **** #include "print.h"
  22:drivers/oled/oled_driver.c **** 
  23:drivers/oled/oled_driver.c **** #include <string.h>
  24:drivers/oled/oled_driver.c **** 
  25:drivers/oled/oled_driver.c **** #if defined(__AVR__)
  26:drivers/oled/oled_driver.c **** #    include <avr/io.h>
  27:drivers/oled/oled_driver.c **** #    include <avr/pgmspace.h>
  28:drivers/oled/oled_driver.c **** #elif defined(ESP8266)
  29:drivers/oled/oled_driver.c **** #    include <pgmspace.h>
  30:drivers/oled/oled_driver.c **** #else  // defined(ESP8266)
  31:drivers/oled/oled_driver.c **** #    define PROGMEM
  32:drivers/oled/oled_driver.c **** #    define memcpy_P(des, src, len) memcpy(des, src, len)
  33:drivers/oled/oled_driver.c **** #endif  // defined(__AVR__)
  34:drivers/oled/oled_driver.c **** 
  35:drivers/oled/oled_driver.c **** // Used commands from spec sheet: https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf
  36:drivers/oled/oled_driver.c **** // for SH1106: https://www.velleman.eu/downloads/29/infosheets/sh1106_datasheet.pdf
  37:drivers/oled/oled_driver.c **** 
  38:drivers/oled/oled_driver.c **** // Fundamental Commands
  39:drivers/oled/oled_driver.c **** #define CONTRAST 0x81
  40:drivers/oled/oled_driver.c **** #define DISPLAY_ALL_ON 0xA5
  41:drivers/oled/oled_driver.c **** #define DISPLAY_ALL_ON_RESUME 0xA4
  42:drivers/oled/oled_driver.c **** #define NORMAL_DISPLAY 0xA6
  43:drivers/oled/oled_driver.c **** #define DISPLAY_ON 0xAF
  44:drivers/oled/oled_driver.c **** #define DISPLAY_OFF 0xAE
  45:drivers/oled/oled_driver.c **** #define NOP 0xE3
  46:drivers/oled/oled_driver.c **** 
  47:drivers/oled/oled_driver.c **** // Scrolling Commands
  48:drivers/oled/oled_driver.c **** #define ACTIVATE_SCROLL 0x2F
  49:drivers/oled/oled_driver.c **** #define DEACTIVATE_SCROLL 0x2E
  50:drivers/oled/oled_driver.c **** #define SCROLL_RIGHT 0x26
  51:drivers/oled/oled_driver.c **** #define SCROLL_LEFT 0x27
  52:drivers/oled/oled_driver.c **** #define SCROLL_RIGHT_UP 0x29
  53:drivers/oled/oled_driver.c **** #define SCROLL_LEFT_UP 0x2A
  54:drivers/oled/oled_driver.c **** 
  55:drivers/oled/oled_driver.c **** // Addressing Setting Commands
  56:drivers/oled/oled_driver.c **** #define MEMORY_MODE 0x20
  57:drivers/oled/oled_driver.c **** #define COLUMN_ADDR 0x21
  58:drivers/oled/oled_driver.c **** #define PAGE_ADDR 0x22
  59:drivers/oled/oled_driver.c **** #define PAM_SETCOLUMN_LSB 0x00
  60:drivers/oled/oled_driver.c **** #define PAM_SETCOLUMN_MSB 0x10
  61:drivers/oled/oled_driver.c **** #define PAM_PAGE_ADDR 0xB0  // 0xb0 -- 0xb7
  62:drivers/oled/oled_driver.c **** 
  63:drivers/oled/oled_driver.c **** // Hardware Configuration Commands
  64:drivers/oled/oled_driver.c **** #define DISPLAY_START_LINE 0x40
  65:drivers/oled/oled_driver.c **** #define SEGMENT_REMAP 0xA0
  66:drivers/oled/oled_driver.c **** #define SEGMENT_REMAP_INV 0xA1
  67:drivers/oled/oled_driver.c **** #define MULTIPLEX_RATIO 0xA8
  68:drivers/oled/oled_driver.c **** #define COM_SCAN_INC 0xC0
  69:drivers/oled/oled_driver.c **** #define COM_SCAN_DEC 0xC8
  70:drivers/oled/oled_driver.c **** #define DISPLAY_OFFSET 0xD3
  71:drivers/oled/oled_driver.c **** #define COM_PINS 0xDA
  72:drivers/oled/oled_driver.c **** #define COM_PINS_SEQ 0x02
  73:drivers/oled/oled_driver.c **** #define COM_PINS_ALT 0x12
  74:drivers/oled/oled_driver.c **** #define COM_PINS_SEQ_LR 0x22
  75:drivers/oled/oled_driver.c **** #define COM_PINS_ALT_LR 0x32
  76:drivers/oled/oled_driver.c **** 
  77:drivers/oled/oled_driver.c **** // Timing & Driving Commands
  78:drivers/oled/oled_driver.c **** #define DISPLAY_CLOCK 0xD5
  79:drivers/oled/oled_driver.c **** #define PRE_CHARGE_PERIOD 0xD9
  80:drivers/oled/oled_driver.c **** #define VCOM_DETECT 0xDB
  81:drivers/oled/oled_driver.c **** 
  82:drivers/oled/oled_driver.c **** // Charge Pump Commands
  83:drivers/oled/oled_driver.c **** #define CHARGE_PUMP 0x8D
  84:drivers/oled/oled_driver.c **** 
  85:drivers/oled/oled_driver.c **** // Misc defines
  86:drivers/oled/oled_driver.c **** #define OLED_BLOCK_COUNT (sizeof(OLED_BLOCK_TYPE) * 8)
  87:drivers/oled/oled_driver.c **** #define OLED_BLOCK_SIZE (OLED_MATRIX_SIZE / OLED_BLOCK_COUNT)
  88:drivers/oled/oled_driver.c **** 
  89:drivers/oled/oled_driver.c **** // i2c defines
  90:drivers/oled/oled_driver.c **** #define I2C_CMD 0x00
  91:drivers/oled/oled_driver.c **** #define I2C_DATA 0x40
  92:drivers/oled/oled_driver.c **** #if defined(__AVR__)
  93:drivers/oled/oled_driver.c **** // already defined on ARM
  94:drivers/oled/oled_driver.c **** #    define I2C_TIMEOUT 100
  95:drivers/oled/oled_driver.c **** #    define I2C_TRANSMIT_P(data) i2c_transmit_P((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data)
  96:drivers/oled/oled_driver.c **** #else  // defined(__AVR__)
  97:drivers/oled/oled_driver.c **** #    define I2C_TRANSMIT_P(data) i2c_transmit((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data), 
  98:drivers/oled/oled_driver.c **** #endif  // defined(__AVR__)
  99:drivers/oled/oled_driver.c **** #define I2C_TRANSMIT(data) i2c_transmit((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data), I2C_TI
 100:drivers/oled/oled_driver.c **** #define I2C_WRITE_REG(mode, data, size) i2c_writeReg((OLED_DISPLAY_ADDRESS << 1), mode, data, size,
 101:drivers/oled/oled_driver.c **** 
 102:drivers/oled/oled_driver.c **** #define HAS_FLAGS(bits, flags) ((bits & flags) == flags)
 103:drivers/oled/oled_driver.c **** 
 104:drivers/oled/oled_driver.c **** // Display buffer's is the same as the OLED memory layout
 105:drivers/oled/oled_driver.c **** // this is so we don't end up with rounding errors with
 106:drivers/oled/oled_driver.c **** // parts of the display unusable or don't get cleared correctly
 107:drivers/oled/oled_driver.c **** // and also allows for drawing & inverting
 108:drivers/oled/oled_driver.c **** uint8_t         oled_buffer[OLED_MATRIX_SIZE];
 109:drivers/oled/oled_driver.c **** uint8_t *       oled_cursor;
 110:drivers/oled/oled_driver.c **** OLED_BLOCK_TYPE oled_dirty          = 0;
 111:drivers/oled/oled_driver.c **** bool            oled_initialized    = false;
 112:drivers/oled/oled_driver.c **** bool            oled_active         = false;
 113:drivers/oled/oled_driver.c **** bool            oled_scrolling      = false;
 114:drivers/oled/oled_driver.c **** uint8_t         oled_rotation       = 0;
 115:drivers/oled/oled_driver.c **** uint8_t         oled_rotation_width = 0;
 116:drivers/oled/oled_driver.c **** #if OLED_TIMEOUT > 0
 117:drivers/oled/oled_driver.c **** uint32_t oled_timeout;
 118:drivers/oled/oled_driver.c **** #endif
 119:drivers/oled/oled_driver.c **** #if OLED_SCROLL_TIMEOUT > 0
 120:drivers/oled/oled_driver.c **** uint32_t oled_scroll_timeout;
 121:drivers/oled/oled_driver.c **** #endif
 122:drivers/oled/oled_driver.c **** 
 123:drivers/oled/oled_driver.c **** // Internal variables to reduce math instructions
 124:drivers/oled/oled_driver.c **** 
 125:drivers/oled/oled_driver.c **** #if defined(__AVR__)
 126:drivers/oled/oled_driver.c **** // identical to i2c_transmit, but for PROGMEM since all initialization is in PROGMEM arrays current
 127:drivers/oled/oled_driver.c **** // probably should move this into i2c_master...
 128:drivers/oled/oled_driver.c **** static i2c_status_t i2c_transmit_P(uint8_t address, const uint8_t *data, uint16_t length, uint16_t 
  16               		.loc 1 128 21 view -0
  17               		.cfi_startproc
  18               		.loc 1 128 21 is_stmt 0 view .LVU1
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43 000c CF93      		push r28
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 28, -8
  47 000e DF93      		push r29
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 29, -9
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 8 */
  54               	.L__stack_usage = 8
  55 0010 6C01      		movw r12,r24
  56 0012 7B01      		movw r14,r22
  57               	.LVL1:
 129:drivers/oled/oled_driver.c ****     i2c_status_t status = i2c_start(address | I2C_WRITE, timeout);
  58               		.loc 1 129 5 is_stmt 1 view .LVU2
  59               		.loc 1 129 27 is_stmt 0 view .LVU3
  60 0014 64E6      		ldi r22,lo8(100)
  61 0016 70E0      		ldi r23,0
  62               	.LVL2:
  63               		.loc 1 129 27 view .LVU4
  64 0018 88E7      		ldi r24,lo8(120)
  65               	.LVL3:
  66               		.loc 1 129 27 view .LVU5
  67 001a 0E94 0000 		call i2c_start
  68               	.LVL4:
  69 001e EC01      		movw r28,r24
  70               	.LVL5:
 130:drivers/oled/oled_driver.c **** 
 131:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < length && status >= 0; i++) {
  71               		.loc 1 131 5 is_stmt 1 view .LVU6
  72               	.LBB4:
  73               		.loc 1 131 10 view .LVU7
  74               		.loc 1 131 37 is_stmt 0 view .LVU8
  75 0020 97FD      		sbrc r25,7
  76 0022 00C0      		rjmp .L2
  77               		.loc 1 131 19 view .LVU9
  78 0024 10E0      		ldi r17,0
  79 0026 00E0      		ldi r16,0
  80               	.LVL6:
  81               	.L3:
 132:drivers/oled/oled_driver.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
  82               		.loc 1 132 9 is_stmt 1 view .LVU10
  83               	.LBB5:
  84               		.loc 1 132 28 view .LVU11
  85               		.loc 1 132 28 view .LVU12
  86               		.loc 1 132 28 view .LVU13
  87 0028 F601      		movw r30,r12
  88 002a E00F      		add r30,r16
  89 002c F11F      		adc r31,r17
  90               	.LVL7:
  91               		.loc 1 132 28 is_stmt 0 view .LVU14
  92               	/* #APP */
  93               	 ;  132 "drivers/oled/oled_driver.c" 1
  94 002e 8491      		lpm r24, Z
  95               		
  96               	 ;  0 "" 2
  97               	.LVL8:
  98               		.loc 1 132 28 is_stmt 1 view .LVU15
  99               	/* #NOAPP */
 100               	.LBE5:
 101               		.loc 1 132 18 is_stmt 0 view .LVU16
 102 0030 64E6      		ldi r22,lo8(100)
 103 0032 70E0      		ldi r23,0
 104 0034 0E94 0000 		call i2c_write
 105               	.LVL9:
 106               		.loc 1 132 18 view .LVU17
 107 0038 EC01      		movw r28,r24
 108               	.LVL10:
 133:drivers/oled/oled_driver.c ****         if (status) break;
 109               		.loc 1 133 9 is_stmt 1 view .LVU18
 110               		.loc 1 133 12 is_stmt 0 view .LVU19
 111 003a 892B      		or r24,r25
 112 003c 01F4      		brne .L2
 131:drivers/oled/oled_driver.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 113               		.loc 1 131 54 view .LVU20
 114 003e 0F5F      		subi r16,-1
 115 0040 1F4F      		sbci r17,-1
 116               	.LVL11:
 131:drivers/oled/oled_driver.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 117               		.loc 1 131 5 view .LVU21
 118 0042 0E15      		cp r16,r14
 119 0044 1F05      		cpc r17,r15
 120 0046 01F4      		brne .L3
 121               	.LVL12:
 122               	.L2:
 131:drivers/oled/oled_driver.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 123               		.loc 1 131 5 view .LVU22
 124               	.LBE4:
 134:drivers/oled/oled_driver.c ****     }
 135:drivers/oled/oled_driver.c **** 
 136:drivers/oled/oled_driver.c ****     i2c_stop();
 125               		.loc 1 136 5 is_stmt 1 view .LVU23
 126 0048 0E94 0000 		call i2c_stop
 127               	.LVL13:
 137:drivers/oled/oled_driver.c **** 
 138:drivers/oled/oled_driver.c ****     return status;
 128               		.loc 1 138 5 view .LVU24
 139:drivers/oled/oled_driver.c **** }
 129               		.loc 1 139 1 is_stmt 0 view .LVU25
 130 004c CE01      		movw r24,r28
 131               	/* epilogue start */
 132 004e DF91      		pop r29
 133 0050 CF91      		pop r28
 134               	.LVL14:
 135               		.loc 1 139 1 view .LVU26
 136 0052 1F91      		pop r17
 137 0054 0F91      		pop r16
 138 0056 FF90      		pop r15
 139 0058 EF90      		pop r14
 140               	.LVL15:
 141               		.loc 1 139 1 view .LVU27
 142 005a DF90      		pop r13
 143 005c CF90      		pop r12
 144 005e 0895      		ret
 145               		.cfi_endproc
 146               	.LFE32:
 148               		.section	.text.oled_init_user,"ax",@progbits
 149               		.weak	oled_init_user
 151               	oled_init_user:
 152               	.LVL16:
 153               	.LFB6:
 140:drivers/oled/oled_driver.c **** #endif
 141:drivers/oled/oled_driver.c **** 
 142:drivers/oled/oled_driver.c **** // Flips the rendering bits for a character at the current cursor position
 143:drivers/oled/oled_driver.c **** static void InvertCharacter(uint8_t *cursor) {
 144:drivers/oled/oled_driver.c ****     const uint8_t *end = cursor + OLED_FONT_WIDTH;
 145:drivers/oled/oled_driver.c ****     while (cursor < end) {
 146:drivers/oled/oled_driver.c ****         *cursor = ~(*cursor);
 147:drivers/oled/oled_driver.c ****         cursor++;
 148:drivers/oled/oled_driver.c ****     }
 149:drivers/oled/oled_driver.c **** }
 150:drivers/oled/oled_driver.c **** 
 151:drivers/oled/oled_driver.c **** bool oled_init(uint8_t rotation) {
 152:drivers/oled/oled_driver.c ****     oled_rotation = oled_init_user(rotation);
 153:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 154:drivers/oled/oled_driver.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 155:drivers/oled/oled_driver.c ****     } else {
 156:drivers/oled/oled_driver.c ****         oled_rotation_width = OLED_DISPLAY_HEIGHT;
 157:drivers/oled/oled_driver.c ****     }
 158:drivers/oled/oled_driver.c ****     i2c_init();
 159:drivers/oled/oled_driver.c **** 
 160:drivers/oled/oled_driver.c ****     static const uint8_t PROGMEM display_setup1[] = {
 161:drivers/oled/oled_driver.c ****         I2C_CMD,
 162:drivers/oled/oled_driver.c ****         DISPLAY_OFF,
 163:drivers/oled/oled_driver.c ****         DISPLAY_CLOCK,
 164:drivers/oled/oled_driver.c ****         0x80,
 165:drivers/oled/oled_driver.c ****         MULTIPLEX_RATIO,
 166:drivers/oled/oled_driver.c ****         OLED_DISPLAY_HEIGHT - 1,
 167:drivers/oled/oled_driver.c ****         DISPLAY_OFFSET,
 168:drivers/oled/oled_driver.c ****         0x00,
 169:drivers/oled/oled_driver.c ****         DISPLAY_START_LINE | 0x00,
 170:drivers/oled/oled_driver.c ****         CHARGE_PUMP,
 171:drivers/oled/oled_driver.c ****         0x14,
 172:drivers/oled/oled_driver.c **** #if (OLED_IC != OLED_IC_SH1106)
 173:drivers/oled/oled_driver.c ****         // MEMORY_MODE is unsupported on SH1106 (Page Addressing only)
 174:drivers/oled/oled_driver.c ****         MEMORY_MODE,
 175:drivers/oled/oled_driver.c ****         0x00,  // Horizontal addressing mode
 176:drivers/oled/oled_driver.c **** #endif
 177:drivers/oled/oled_driver.c ****     };
 178:drivers/oled/oled_driver.c ****     if (I2C_TRANSMIT_P(display_setup1) != I2C_STATUS_SUCCESS) {
 179:drivers/oled/oled_driver.c ****         print("oled_init cmd set 1 failed\n");
 180:drivers/oled/oled_driver.c ****         return false;
 181:drivers/oled/oled_driver.c ****     }
 182:drivers/oled/oled_driver.c **** 
 183:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_180)) {
 184:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 185:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 186:drivers/oled/oled_driver.c ****             print("oled_init cmd normal rotation failed\n");
 187:drivers/oled/oled_driver.c ****             return false;
 188:drivers/oled/oled_driver.c ****         }
 189:drivers/oled/oled_driver.c ****     } else {
 190:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_flipped[] = {I2C_CMD, SEGMENT_REMAP, COM_SCAN_INC};
 191:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_flipped) != I2C_STATUS_SUCCESS) {
 192:drivers/oled/oled_driver.c ****             print("display_flipped failed\n");
 193:drivers/oled/oled_driver.c ****             return false;
 194:drivers/oled/oled_driver.c ****         }
 195:drivers/oled/oled_driver.c ****     }
 196:drivers/oled/oled_driver.c **** 
 197:drivers/oled/oled_driver.c ****     static const uint8_t PROGMEM display_setup2[] = {I2C_CMD, COM_PINS, OLED_COM_PINS, CONTRAST, 0x
 198:drivers/oled/oled_driver.c ****     if (I2C_TRANSMIT_P(display_setup2) != I2C_STATUS_SUCCESS) {
 199:drivers/oled/oled_driver.c ****         print("display_setup2 failed\n");
 200:drivers/oled/oled_driver.c ****         return false;
 201:drivers/oled/oled_driver.c ****     }
 202:drivers/oled/oled_driver.c **** 
 203:drivers/oled/oled_driver.c **** #if OLED_TIMEOUT > 0
 204:drivers/oled/oled_driver.c ****     oled_timeout = timer_read32() + OLED_TIMEOUT;
 205:drivers/oled/oled_driver.c **** #endif
 206:drivers/oled/oled_driver.c **** #if OLED_SCROLL_TIMEOUT > 0
 207:drivers/oled/oled_driver.c ****     oled_scroll_timeout = timer_read32() + OLED_SCROLL_TIMEOUT;
 208:drivers/oled/oled_driver.c **** #endif
 209:drivers/oled/oled_driver.c **** 
 210:drivers/oled/oled_driver.c ****     oled_clear();
 211:drivers/oled/oled_driver.c ****     oled_initialized = true;
 212:drivers/oled/oled_driver.c ****     oled_active      = true;
 213:drivers/oled/oled_driver.c ****     oled_scrolling   = false;
 214:drivers/oled/oled_driver.c ****     return true;
 215:drivers/oled/oled_driver.c **** }
 216:drivers/oled/oled_driver.c **** 
 217:drivers/oled/oled_driver.c **** __attribute__((weak)) oled_rotation_t oled_init_user(oled_rotation_t rotation) { return rotation; }
 154               		.loc 1 217 80 is_stmt 1 view -0
 155               		.cfi_startproc
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 0 */
 159               	.L__stack_usage = 0
 160               		.loc 1 217 82 view .LVU29
 161               	/* epilogue start */
 162               		.loc 1 217 1 is_stmt 0 view .LVU30
 163 0000 0895      		ret
 164               		.cfi_endproc
 165               	.LFE6:
 167               		.section	.text.oled_clear,"ax",@progbits
 168               	.global	oled_clear
 170               	oled_clear:
 171               	.LFB7:
 218:drivers/oled/oled_driver.c **** 
 219:drivers/oled/oled_driver.c **** void oled_clear(void) {
 172               		.loc 1 219 23 is_stmt 1 view -0
 173               		.cfi_startproc
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
 220:drivers/oled/oled_driver.c ****     memset(oled_buffer, 0, sizeof(oled_buffer));
 178               		.loc 1 220 5 view .LVU32
 179 0000 E0E0      		ldi r30,lo8(oled_buffer)
 180 0002 F0E0      		ldi r31,hi8(oled_buffer)
 181 0004 80E0      		ldi r24,0
 182 0006 92E0      		ldi r25,lo8(2)
 183 0008 DF01      		movw r26,r30
 184 000a 9C01      		movw r18,r24
 185               		0:
 186 000c 1D92      		st X+,__zero_reg__
 187 000e 2150      		subi r18,1
 188 0010 3040      		sbci r19,0
 189 0012 01F4      		brne 0b
 221:drivers/oled/oled_driver.c ****     oled_cursor = &oled_buffer[0];
 190               		.loc 1 221 5 view .LVU33
 191               		.loc 1 221 17 is_stmt 0 view .LVU34
 192 0014 F093 0000 		sts oled_cursor+1,r31
 193 0018 E093 0000 		sts oled_cursor,r30
 222:drivers/oled/oled_driver.c ****     oled_dirty  = -1;  // -1 will be max value as long as display_dirty is unsigned type
 194               		.loc 1 222 5 is_stmt 1 view .LVU35
 195               		.loc 1 222 17 is_stmt 0 view .LVU36
 196 001c 8FEF      		ldi r24,lo8(-1)
 197 001e 9FEF      		ldi r25,lo8(-1)
 198 0020 9093 0000 		sts oled_dirty+1,r25
 199 0024 8093 0000 		sts oled_dirty,r24
 200               	/* epilogue start */
 223:drivers/oled/oled_driver.c **** }
 201               		.loc 1 223 1 view .LVU37
 202 0028 0895      		ret
 203               		.cfi_endproc
 204               	.LFE7:
 206               		.section	.text.oled_init,"ax",@progbits
 207               	.global	oled_init
 209               	oled_init:
 210               	.LVL17:
 211               	.LFB5:
 151:drivers/oled/oled_driver.c ****     oled_rotation = oled_init_user(rotation);
 212               		.loc 1 151 34 is_stmt 1 view -0
 213               		.cfi_startproc
 214               	/* prologue: function */
 215               	/* frame size = 0 */
 216               	/* stack size = 0 */
 217               	.L__stack_usage = 0
 152:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 218               		.loc 1 152 5 view .LVU39
 152:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 219               		.loc 1 152 21 is_stmt 0 view .LVU40
 220 0000 0E94 0000 		call oled_init_user
 221               	.LVL18:
 152:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 222               		.loc 1 152 19 view .LVU41
 223 0004 8093 0000 		sts oled_rotation,r24
 153:drivers/oled/oled_driver.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 224               		.loc 1 153 5 is_stmt 1 view .LVU42
 153:drivers/oled/oled_driver.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 225               		.loc 1 153 8 is_stmt 0 view .LVU43
 226 0008 80FD      		sbrc r24,0
 227 000a 00C0      		rjmp .L8
 154:drivers/oled/oled_driver.c ****     } else {
 228               		.loc 1 154 9 is_stmt 1 view .LVU44
 154:drivers/oled/oled_driver.c ****     } else {
 229               		.loc 1 154 29 is_stmt 0 view .LVU45
 230 000c 80E8      		ldi r24,lo8(-128)
 231               	.L17:
 156:drivers/oled/oled_driver.c ****     }
 232               		.loc 1 156 29 view .LVU46
 233 000e 8093 0000 		sts oled_rotation_width,r24
 158:drivers/oled/oled_driver.c **** 
 234               		.loc 1 158 5 is_stmt 1 view .LVU47
 235 0012 0E94 0000 		call i2c_init
 236               	.LVL19:
 160:drivers/oled/oled_driver.c ****         I2C_CMD,
 237               		.loc 1 160 5 view .LVU48
 178:drivers/oled/oled_driver.c ****         print("oled_init cmd set 1 failed\n");
 238               		.loc 1 178 5 view .LVU49
 178:drivers/oled/oled_driver.c ****         print("oled_init cmd set 1 failed\n");
 239               		.loc 1 178 9 is_stmt 0 view .LVU50
 240 0016 6DE0      		ldi r22,lo8(13)
 241 0018 70E0      		ldi r23,0
 242 001a 80E0      		ldi r24,lo8(display_setup1.2003)
 243 001c 90E0      		ldi r25,hi8(display_setup1.2003)
 244 001e 0E94 0000 		call i2c_transmit_P.constprop.2
 245               	.LVL20:
 178:drivers/oled/oled_driver.c ****         print("oled_init cmd set 1 failed\n");
 246               		.loc 1 178 8 view .LVU51
 247 0022 892B      		or r24,r25
 248 0024 01F0      		breq .L10
 249               	.L13:
 180:drivers/oled/oled_driver.c ****     }
 250               		.loc 1 180 16 view .LVU52
 251 0026 80E0      		ldi r24,0
 252 0028 0895      		ret
 253               	.L8:
 156:drivers/oled/oled_driver.c ****     }
 254               		.loc 1 156 9 is_stmt 1 view .LVU53
 156:drivers/oled/oled_driver.c ****     }
 255               		.loc 1 156 29 is_stmt 0 view .LVU54
 256 002a 80E2      		ldi r24,lo8(32)
 257 002c 00C0      		rjmp .L17
 258               	.L10:
 183:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 259               		.loc 1 183 5 is_stmt 1 view .LVU55
 183:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 260               		.loc 1 183 8 is_stmt 0 view .LVU56
 261 002e 8091 0000 		lds r24,oled_rotation
 262               	.LBB6:
 185:drivers/oled/oled_driver.c ****             print("oled_init cmd normal rotation failed\n");
 263               		.loc 1 185 13 view .LVU57
 264 0032 63E0      		ldi r22,lo8(3)
 265 0034 70E0      		ldi r23,0
 266               	.LBE6:
 183:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 267               		.loc 1 183 8 view .LVU58
 268 0036 81FD      		sbrc r24,1
 269 0038 00C0      		rjmp .L12
 270               	.LBB7:
 184:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 271               		.loc 1 184 9 is_stmt 1 view .LVU59
 185:drivers/oled/oled_driver.c ****             print("oled_init cmd normal rotation failed\n");
 272               		.loc 1 185 9 view .LVU60
 185:drivers/oled/oled_driver.c ****             print("oled_init cmd normal rotation failed\n");
 273               		.loc 1 185 13 is_stmt 0 view .LVU61
 274 003a 80E0      		ldi r24,lo8(display_normal.2004)
 275 003c 90E0      		ldi r25,hi8(display_normal.2004)
 276               	.L18:
 277               	.LBE7:
 278               	.LBB8:
 191:drivers/oled/oled_driver.c ****             print("display_flipped failed\n");
 279               		.loc 1 191 13 view .LVU62
 280 003e 0E94 0000 		call i2c_transmit_P.constprop.2
 281               	.LVL21:
 191:drivers/oled/oled_driver.c ****             print("display_flipped failed\n");
 282               		.loc 1 191 12 view .LVU63
 283 0042 892B      		or r24,r25
 284 0044 01F4      		brne .L13
 285               	.LBE8:
 197:drivers/oled/oled_driver.c ****     if (I2C_TRANSMIT_P(display_setup2) != I2C_STATUS_SUCCESS) {
 286               		.loc 1 197 5 is_stmt 1 view .LVU64
 198:drivers/oled/oled_driver.c ****         print("display_setup2 failed\n");
 287               		.loc 1 198 5 view .LVU65
 198:drivers/oled/oled_driver.c ****         print("display_setup2 failed\n");
 288               		.loc 1 198 9 is_stmt 0 view .LVU66
 289 0046 6DE0      		ldi r22,lo8(13)
 290 0048 70E0      		ldi r23,0
 291 004a 80E0      		ldi r24,lo8(display_setup2.2006)
 292 004c 90E0      		ldi r25,hi8(display_setup2.2006)
 293 004e 0E94 0000 		call i2c_transmit_P.constprop.2
 294               	.LVL22:
 198:drivers/oled/oled_driver.c ****         print("display_setup2 failed\n");
 295               		.loc 1 198 8 view .LVU67
 296 0052 892B      		or r24,r25
 297 0054 01F4      		brne .L13
 210:drivers/oled/oled_driver.c ****     oled_initialized = true;
 298               		.loc 1 210 5 is_stmt 1 view .LVU68
 299 0056 0E94 0000 		call oled_clear
 300               	.LVL23:
 211:drivers/oled/oled_driver.c ****     oled_active      = true;
 301               		.loc 1 211 5 view .LVU69
 211:drivers/oled/oled_driver.c ****     oled_active      = true;
 302               		.loc 1 211 22 is_stmt 0 view .LVU70
 303 005a 81E0      		ldi r24,lo8(1)
 304 005c 8093 0000 		sts oled_initialized,r24
 212:drivers/oled/oled_driver.c ****     oled_scrolling   = false;
 305               		.loc 1 212 5 is_stmt 1 view .LVU71
 212:drivers/oled/oled_driver.c ****     oled_scrolling   = false;
 306               		.loc 1 212 22 is_stmt 0 view .LVU72
 307 0060 8093 0000 		sts oled_active,r24
 213:drivers/oled/oled_driver.c ****     return true;
 308               		.loc 1 213 5 is_stmt 1 view .LVU73
 213:drivers/oled/oled_driver.c ****     return true;
 309               		.loc 1 213 22 is_stmt 0 view .LVU74
 310 0064 1092 0000 		sts oled_scrolling,__zero_reg__
 214:drivers/oled/oled_driver.c **** }
 311               		.loc 1 214 5 is_stmt 1 view .LVU75
 312               	/* epilogue start */
 215:drivers/oled/oled_driver.c **** 
 313               		.loc 1 215 1 is_stmt 0 view .LVU76
 314 0068 0895      		ret
 315               	.L12:
 316               	.LBB9:
 190:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_flipped) != I2C_STATUS_SUCCESS) {
 317               		.loc 1 190 9 is_stmt 1 view .LVU77
 191:drivers/oled/oled_driver.c ****             print("display_flipped failed\n");
 318               		.loc 1 191 9 view .LVU78
 191:drivers/oled/oled_driver.c ****             print("display_flipped failed\n");
 319               		.loc 1 191 13 is_stmt 0 view .LVU79
 320 006a 80E0      		ldi r24,lo8(display_flipped.2005)
 321 006c 90E0      		ldi r25,hi8(display_flipped.2005)
 322 006e 00C0      		rjmp .L18
 323               	.LBE9:
 324               		.cfi_endproc
 325               	.LFE5:
 327               		.section	.text.crot,"ax",@progbits
 328               	.global	crot
 330               	crot:
 331               	.LVL24:
 332               	.LFB10:
 224:drivers/oled/oled_driver.c **** 
 225:drivers/oled/oled_driver.c **** static void calc_bounds(uint8_t update_start, uint8_t *cmd_array) {
 226:drivers/oled/oled_driver.c ****     // Calculate commands to set memory addressing bounds.
 227:drivers/oled/oled_driver.c ****     uint8_t start_page   = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_WIDTH;
 228:drivers/oled/oled_driver.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 229:drivers/oled/oled_driver.c **** #if (OLED_IC == OLED_IC_SH1106)
 230:drivers/oled/oled_driver.c ****     // Commands for Page Addressing Mode. Sets starting page and column; has no end bound.
 231:drivers/oled/oled_driver.c ****     // Column value must be split into high and low nybble and sent as two commands.
 232:drivers/oled/oled_driver.c ****     cmd_array[0] = PAM_PAGE_ADDR | start_page;
 233:drivers/oled/oled_driver.c ****     cmd_array[1] = PAM_SETCOLUMN_LSB | ((OLED_COLUMN_OFFSET + start_column) & 0x0f);
 234:drivers/oled/oled_driver.c ****     cmd_array[2] = PAM_SETCOLUMN_MSB | ((OLED_COLUMN_OFFSET + start_column) >> 4 & 0x0f);
 235:drivers/oled/oled_driver.c ****     cmd_array[3] = NOP;
 236:drivers/oled/oled_driver.c ****     cmd_array[4] = NOP;
 237:drivers/oled/oled_driver.c ****     cmd_array[5] = NOP;
 238:drivers/oled/oled_driver.c **** #else
 239:drivers/oled/oled_driver.c ****     // Commands for use in Horizontal Addressing mode.
 240:drivers/oled/oled_driver.c ****     cmd_array[1] = start_column;
 241:drivers/oled/oled_driver.c ****     cmd_array[4] = start_page;
 242:drivers/oled/oled_driver.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 243:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 244:drivers/oled/oled_driver.c **** #endif
 245:drivers/oled/oled_driver.c **** }
 246:drivers/oled/oled_driver.c **** 
 247:drivers/oled/oled_driver.c **** static void calc_bounds_90(uint8_t update_start, uint8_t *cmd_array) {
 248:drivers/oled/oled_driver.c ****     cmd_array[1] = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_HEIGHT * 8;
 249:drivers/oled/oled_driver.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 250:drivers/oled/oled_driver.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 251:drivers/oled/oled_driver.c ****     ;
 252:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) % OLED_DISPLAY_HEIGHT / 8;
 253:drivers/oled/oled_driver.c **** }
 254:drivers/oled/oled_driver.c **** 
 255:drivers/oled/oled_driver.c **** uint8_t crot(uint8_t a, int8_t n) {
 333               		.loc 1 255 35 is_stmt 1 view -0
 334               		.cfi_startproc
 335               	/* prologue: function */
 336               	/* frame size = 0 */
 337               	/* stack size = 0 */
 338               	.L__stack_usage = 0
 256:drivers/oled/oled_driver.c ****     const uint8_t mask = 0x7;
 339               		.loc 1 256 5 view .LVU81
 257:drivers/oled/oled_driver.c ****     n &= mask;
 340               		.loc 1 257 5 view .LVU82
 258:drivers/oled/oled_driver.c ****     return a << n | a >> (-n & mask);
 341               		.loc 1 258 5 view .LVU83
 257:drivers/oled/oled_driver.c ****     n &= mask;
 342               		.loc 1 257 7 is_stmt 0 view .LVU84
 343 0000 6770      		andi r22,lo8(7)
 344               	.LVL25:
 345               		.loc 1 258 14 view .LVU85
 346 0002 262F      		mov r18,r22
 347 0004 062E      		mov __tmp_reg__,r22
 348 0006 000C      		lsl r0
 349 0008 330B      		sbc r19,r19
 350               		.loc 1 258 19 view .LVU86
 351 000a 982F      		mov r25,r24
 352 000c 00C0      		rjmp 2f
 353               		1:
 354 000e 990F      		lsl r25
 355               		2:
 356 0010 6A95      		dec r22
 357 0012 02F4      		brpl 1b
 358 0014 3195      		neg r19
 359 0016 2195      		neg r18
 360 0018 3109      		sbc r19,__zero_reg__
 361 001a 2770      		andi r18,7
 362 001c 3327      		clr r19
 363 001e 00C0      		rjmp 2f
 364               		1:
 365 0020 8695      		lsr r24
 366               		2:
 367 0022 2A95      		dec r18
 368 0024 02F4      		brpl 1b
 369               	.LVL26:
 259:drivers/oled/oled_driver.c **** }
 370               		.loc 1 259 1 view .LVU87
 371 0026 892B      		or r24,r25
 372               	/* epilogue start */
 373 0028 0895      		ret
 374               		.cfi_endproc
 375               	.LFE10:
 377               		.section	.text.oled_set_cursor,"ax",@progbits
 378               	.global	oled_set_cursor
 380               	oled_set_cursor:
 381               	.LVL27:
 382               	.LFB13:
 260:drivers/oled/oled_driver.c **** 
 261:drivers/oled/oled_driver.c **** static void rotate_90(const uint8_t *src, uint8_t *dest) {
 262:drivers/oled/oled_driver.c ****     for (uint8_t i = 0, shift = 7; i < 8; ++i, --shift) {
 263:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 264:drivers/oled/oled_driver.c ****         for (uint8_t j = 0; j < 8; ++j) {
 265:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 266:drivers/oled/oled_driver.c ****         }
 267:drivers/oled/oled_driver.c ****     }
 268:drivers/oled/oled_driver.c **** }
 269:drivers/oled/oled_driver.c **** 
 270:drivers/oled/oled_driver.c **** void oled_render(void) {
 271:drivers/oled/oled_driver.c ****     // Do we have work to do?
 272:drivers/oled/oled_driver.c ****     if (!oled_dirty || oled_scrolling) {
 273:drivers/oled/oled_driver.c ****         return;
 274:drivers/oled/oled_driver.c ****     }
 275:drivers/oled/oled_driver.c **** 
 276:drivers/oled/oled_driver.c ****     // Find first dirty block
 277:drivers/oled/oled_driver.c ****     uint8_t update_start = 0;
 278:drivers/oled/oled_driver.c ****     while (!(oled_dirty & (1 << update_start))) {
 279:drivers/oled/oled_driver.c ****         ++update_start;
 280:drivers/oled/oled_driver.c ****     }
 281:drivers/oled/oled_driver.c **** 
 282:drivers/oled/oled_driver.c ****     // Set column & page position
 283:drivers/oled/oled_driver.c ****     static uint8_t display_start[] = {I2C_CMD, COLUMN_ADDR, 0, OLED_DISPLAY_WIDTH - 1, PAGE_ADDR, 0
 284:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 285:drivers/oled/oled_driver.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 286:drivers/oled/oled_driver.c ****     } else {
 287:drivers/oled/oled_driver.c ****         calc_bounds_90(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 288:drivers/oled/oled_driver.c ****     }
 289:drivers/oled/oled_driver.c **** 
 290:drivers/oled/oled_driver.c ****     // Send column & page position
 291:drivers/oled/oled_driver.c ****     if (I2C_TRANSMIT(display_start) != I2C_STATUS_SUCCESS) {
 292:drivers/oled/oled_driver.c ****         print("oled_render offset command failed\n");
 293:drivers/oled/oled_driver.c ****         return;
 294:drivers/oled/oled_driver.c ****     }
 295:drivers/oled/oled_driver.c **** 
 296:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 297:drivers/oled/oled_driver.c ****         // Send render data chunk as is
 298:drivers/oled/oled_driver.c ****         if (I2C_WRITE_REG(I2C_DATA, &oled_buffer[OLED_BLOCK_SIZE * update_start], OLED_BLOCK_SIZE) 
 299:drivers/oled/oled_driver.c ****             print("oled_render data failed\n");
 300:drivers/oled/oled_driver.c ****             return;
 301:drivers/oled/oled_driver.c ****         }
 302:drivers/oled/oled_driver.c ****     } else {
 303:drivers/oled/oled_driver.c ****         // Rotate the render chunks
 304:drivers/oled/oled_driver.c ****         const static uint8_t source_map[] = OLED_SOURCE_MAP;
 305:drivers/oled/oled_driver.c ****         const static uint8_t target_map[] = OLED_TARGET_MAP;
 306:drivers/oled/oled_driver.c **** 
 307:drivers/oled/oled_driver.c ****         static uint8_t temp_buffer[OLED_BLOCK_SIZE];
 308:drivers/oled/oled_driver.c ****         memset(temp_buffer, 0, sizeof(temp_buffer));
 309:drivers/oled/oled_driver.c ****         for (uint8_t i = 0; i < sizeof(source_map); ++i) {
 310:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 311:drivers/oled/oled_driver.c ****         }
 312:drivers/oled/oled_driver.c **** 
 313:drivers/oled/oled_driver.c ****         // Send render data chunk after rotating
 314:drivers/oled/oled_driver.c ****         if (I2C_WRITE_REG(I2C_DATA, &temp_buffer[0], OLED_BLOCK_SIZE) != I2C_STATUS_SUCCESS) {
 315:drivers/oled/oled_driver.c ****             print("oled_render90 data failed\n");
 316:drivers/oled/oled_driver.c ****             return;
 317:drivers/oled/oled_driver.c ****         }
 318:drivers/oled/oled_driver.c ****     }
 319:drivers/oled/oled_driver.c **** 
 320:drivers/oled/oled_driver.c ****     // Turn on display if it is off
 321:drivers/oled/oled_driver.c ****     oled_on();
 322:drivers/oled/oled_driver.c **** 
 323:drivers/oled/oled_driver.c ****     // Clear dirty flag
 324:drivers/oled/oled_driver.c ****     oled_dirty &= ~(1 << update_start);
 325:drivers/oled/oled_driver.c **** }
 326:drivers/oled/oled_driver.c **** 
 327:drivers/oled/oled_driver.c **** void oled_set_cursor(uint8_t col, uint8_t line) {
 383               		.loc 1 327 49 is_stmt 1 view -0
 384               		.cfi_startproc
 385               	/* prologue: function */
 386               	/* frame size = 0 */
 387               	/* stack size = 0 */
 388               	.L__stack_usage = 0
 328:drivers/oled/oled_driver.c ****     uint16_t index = line * oled_rotation_width + col * OLED_FONT_WIDTH;
 389               		.loc 1 328 5 view .LVU89
 390               		.loc 1 328 27 is_stmt 0 view .LVU90
 391 0000 2091 0000 		lds r18,oled_rotation_width
 392               		.loc 1 328 55 view .LVU91
 393 0004 36E0      		ldi r19,lo8(6)
 394 0006 839F      		mul r24,r19
 395 0008 C001      		movw r24,r0
 396 000a 1124      		clr __zero_reg__
 397               	.LVL28:
 398               		.loc 1 328 49 view .LVU92
 399 000c 629F      		mul r22,r18
 400 000e 800D      		add r24,r0
 401 0010 911D      		adc r25,r1
 402 0012 1124      		clr __zero_reg__
 403               	.LVL29:
 329:drivers/oled/oled_driver.c **** 
 330:drivers/oled/oled_driver.c ****     // Out of bounds?
 331:drivers/oled/oled_driver.c ****     if (index >= OLED_MATRIX_SIZE) {
 404               		.loc 1 331 5 is_stmt 1 view .LVU93
 405               		.loc 1 331 8 is_stmt 0 view .LVU94
 406 0014 8115      		cp r24,__zero_reg__
 407 0016 22E0      		ldi r18,2
 408 0018 9207      		cpc r25,r18
 409 001a 04F0      		brlt .L21
 410 001c 90E0      		ldi r25,0
 411 001e 80E0      		ldi r24,0
 412               	.LVL30:
 413               	.L21:
 332:drivers/oled/oled_driver.c ****         index = 0;
 333:drivers/oled/oled_driver.c ****     }
 334:drivers/oled/oled_driver.c **** 
 335:drivers/oled/oled_driver.c ****     oled_cursor = &oled_buffer[index];
 414               		.loc 1 335 5 is_stmt 1 view .LVU95
 415               		.loc 1 335 19 is_stmt 0 view .LVU96
 416 0020 8050      		subi r24,lo8(-(oled_buffer))
 417 0022 9040      		sbci r25,hi8(-(oled_buffer))
 418               	.LVL31:
 419               		.loc 1 335 17 view .LVU97
 420 0024 9093 0000 		sts oled_cursor+1,r25
 421 0028 8093 0000 		sts oled_cursor,r24
 422               	/* epilogue start */
 336:drivers/oled/oled_driver.c **** }
 423               		.loc 1 336 1 view .LVU98
 424 002c 0895      		ret
 425               		.cfi_endproc
 426               	.LFE13:
 428               		.section	.text.oled_advance_char,"ax",@progbits
 429               	.global	oled_advance_char
 431               	oled_advance_char:
 432               	.LFB15:
 337:drivers/oled/oled_driver.c **** 
 338:drivers/oled/oled_driver.c **** void oled_advance_page(bool clearPageRemainder) {
 339:drivers/oled/oled_driver.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 340:drivers/oled/oled_driver.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 341:drivers/oled/oled_driver.c **** 
 342:drivers/oled/oled_driver.c ****     if (clearPageRemainder) {
 343:drivers/oled/oled_driver.c ****         // Remaining Char count
 344:drivers/oled/oled_driver.c ****         remaining = remaining / OLED_FONT_WIDTH;
 345:drivers/oled/oled_driver.c **** 
 346:drivers/oled/oled_driver.c ****         // Write empty character until next line
 347:drivers/oled/oled_driver.c ****         while (remaining--) oled_write_char(' ', false);
 348:drivers/oled/oled_driver.c ****     } else {
 349:drivers/oled/oled_driver.c ****         // Next page index out of bounds?
 350:drivers/oled/oled_driver.c ****         if (index + remaining >= OLED_MATRIX_SIZE) {
 351:drivers/oled/oled_driver.c ****             index     = 0;
 352:drivers/oled/oled_driver.c ****             remaining = 0;
 353:drivers/oled/oled_driver.c ****         }
 354:drivers/oled/oled_driver.c **** 
 355:drivers/oled/oled_driver.c ****         oled_cursor = &oled_buffer[index + remaining];
 356:drivers/oled/oled_driver.c ****     }
 357:drivers/oled/oled_driver.c **** }
 358:drivers/oled/oled_driver.c **** 
 359:drivers/oled/oled_driver.c **** void oled_advance_char(void) {
 433               		.loc 1 359 30 is_stmt 1 view -0
 434               		.cfi_startproc
 435               	/* prologue: function */
 436               	/* frame size = 0 */
 437               	/* stack size = 0 */
 438               	.L__stack_usage = 0
 360:drivers/oled/oled_driver.c ****     uint16_t nextIndex      = oled_cursor - &oled_buffer[0] + OLED_FONT_WIDTH;
 439               		.loc 1 360 5 view .LVU100
 440               		.loc 1 360 43 is_stmt 0 view .LVU101
 441 0000 2091 0000 		lds r18,oled_cursor
 442 0004 3091 0000 		lds r19,oled_cursor+1
 443               		.loc 1 360 61 view .LVU102
 444 0008 2050      		subi r18,lo8(oled_buffer-6)
 445 000a 3040      		sbci r19,hi8(oled_buffer-6)
 446               	.LVL32:
 361:drivers/oled/oled_driver.c ****     uint8_t  remainingSpace = oled_rotation_width - (nextIndex % oled_rotation_width);
 447               		.loc 1 361 5 is_stmt 1 view .LVU103
 448               		.loc 1 361 51 is_stmt 0 view .LVU104
 449 000c 4091 0000 		lds r20,oled_rotation_width
 450               		.loc 1 361 64 view .LVU105
 451 0010 642F      		mov r22,r20
 452 0012 70E0      		ldi r23,0
 453 0014 C901      		movw r24,r18
 454 0016 0E94 0000 		call __udivmodhi4
 455               		.loc 1 361 14 view .LVU106
 456 001a 481B      		sub r20,r24
 457               	.LVL33:
 362:drivers/oled/oled_driver.c **** 
 363:drivers/oled/oled_driver.c ****     // Do we have enough space on the current line for the next character
 364:drivers/oled/oled_driver.c ****     if (remainingSpace < OLED_FONT_WIDTH) {
 458               		.loc 1 364 5 is_stmt 1 view .LVU107
 459               		.loc 1 364 8 is_stmt 0 view .LVU108
 460 001c 4630      		cpi r20,lo8(6)
 461 001e 00F4      		brsh .L23
 365:drivers/oled/oled_driver.c ****         nextIndex += remainingSpace;
 462               		.loc 1 365 9 is_stmt 1 view .LVU109
 463               		.loc 1 365 19 is_stmt 0 view .LVU110
 464 0020 240F      		add r18,r20
 465 0022 311D      		adc r19,__zero_reg__
 466               	.LVL34:
 467               	.L23:
 366:drivers/oled/oled_driver.c ****     }
 367:drivers/oled/oled_driver.c **** 
 368:drivers/oled/oled_driver.c ****     // Did we go out of bounds
 369:drivers/oled/oled_driver.c ****     if (nextIndex >= OLED_MATRIX_SIZE) {
 468               		.loc 1 369 5 is_stmt 1 view .LVU111
 469               		.loc 1 369 8 is_stmt 0 view .LVU112
 470 0024 2115      		cp r18,__zero_reg__
 471 0026 82E0      		ldi r24,2
 472 0028 3807      		cpc r19,r24
 473 002a 00F0      		brlo .L24
 370:drivers/oled/oled_driver.c ****         nextIndex = 0;
 474               		.loc 1 370 19 view .LVU113
 475 002c 30E0      		ldi r19,0
 476 002e 20E0      		ldi r18,0
 477               	.LVL35:
 478               	.L24:
 371:drivers/oled/oled_driver.c ****     }
 372:drivers/oled/oled_driver.c **** 
 373:drivers/oled/oled_driver.c ****     // Update cursor position
 374:drivers/oled/oled_driver.c ****     oled_cursor = &oled_buffer[nextIndex];
 479               		.loc 1 374 5 is_stmt 1 view .LVU114
 480               		.loc 1 374 19 is_stmt 0 view .LVU115
 481 0030 2050      		subi r18,lo8(-(oled_buffer))
 482 0032 3040      		sbci r19,hi8(-(oled_buffer))
 483               	.LVL36:
 484               		.loc 1 374 17 view .LVU116
 485 0034 3093 0000 		sts oled_cursor+1,r19
 486 0038 2093 0000 		sts oled_cursor,r18
 487               	/* epilogue start */
 375:drivers/oled/oled_driver.c **** }
 488               		.loc 1 375 1 view .LVU117
 489 003c 0895      		ret
 490               		.cfi_endproc
 491               	.LFE15:
 493               		.section	.text.oled_write_char,"ax",@progbits
 494               	.global	oled_write_char
 496               	oled_write_char:
 497               	.LVL37:
 498               	.LFB16:
 376:drivers/oled/oled_driver.c **** 
 377:drivers/oled/oled_driver.c **** // Main handler that writes character data to the display buffer
 378:drivers/oled/oled_driver.c **** void oled_write_char(const char data, bool invert) {
 499               		.loc 1 378 52 is_stmt 1 view -0
 500               		.cfi_startproc
 501               		.loc 1 378 52 is_stmt 0 view .LVU119
 502 0000 1F93      		push r17
 503               	.LCFI8:
 504               		.cfi_def_cfa_offset 3
 505               		.cfi_offset 17, -2
 506 0002 CF93      		push r28
 507               	.LCFI9:
 508               		.cfi_def_cfa_offset 4
 509               		.cfi_offset 28, -3
 510 0004 DF93      		push r29
 511               	.LCFI10:
 512               		.cfi_def_cfa_offset 5
 513               		.cfi_offset 29, -4
 514               	/* prologue: function */
 515               	/* frame size = 0 */
 516               	/* stack size = 3 */
 517               	.L__stack_usage = 3
 518 0006 162F      		mov r17,r22
 379:drivers/oled/oled_driver.c ****     // Advance to the next line if newline
 380:drivers/oled/oled_driver.c ****     if (data == '\n') {
 519               		.loc 1 380 5 is_stmt 1 view .LVU120
 520               		.loc 1 380 8 is_stmt 0 view .LVU121
 521 0008 8A30      		cpi r24,lo8(10)
 522 000a 01F4      		brne .L26
 381:drivers/oled/oled_driver.c ****         // Old source wrote ' ' until end of line...
 382:drivers/oled/oled_driver.c ****         oled_advance_page(true);
 523               		.loc 1 382 9 is_stmt 1 view .LVU122
 524 000c 81E0      		ldi r24,lo8(1)
 525               	.LVL38:
 526               	.L36:
 527               	/* epilogue start */
 383:drivers/oled/oled_driver.c ****         return;
 384:drivers/oled/oled_driver.c ****     }
 385:drivers/oled/oled_driver.c **** 
 386:drivers/oled/oled_driver.c ****     if (data == '\r') {
 387:drivers/oled/oled_driver.c ****         oled_advance_page(false);
 388:drivers/oled/oled_driver.c ****         return;
 389:drivers/oled/oled_driver.c ****     }
 390:drivers/oled/oled_driver.c **** 
 391:drivers/oled/oled_driver.c ****     // copy the current render buffer to check for dirty after
 392:drivers/oled/oled_driver.c ****     static uint8_t oled_temp_buffer[OLED_FONT_WIDTH];
 393:drivers/oled/oled_driver.c ****     memcpy(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH);
 394:drivers/oled/oled_driver.c **** 
 395:drivers/oled/oled_driver.c ****     _Static_assert(sizeof(font) >= ((OLED_FONT_END + 1 - OLED_FONT_START) * OLED_FONT_WIDTH), "OLED
 396:drivers/oled/oled_driver.c **** 
 397:drivers/oled/oled_driver.c ****     // set the reder buffer data
 398:drivers/oled/oled_driver.c ****     uint8_t cast_data = (uint8_t)data;  // font based on unsigned type for index
 399:drivers/oled/oled_driver.c ****     if (cast_data < OLED_FONT_START || cast_data > OLED_FONT_END) {
 400:drivers/oled/oled_driver.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 401:drivers/oled/oled_driver.c ****     } else {
 402:drivers/oled/oled_driver.c ****         const uint8_t *glyph = &font[(cast_data - OLED_FONT_START) * OLED_FONT_WIDTH];
 403:drivers/oled/oled_driver.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 404:drivers/oled/oled_driver.c ****     }
 405:drivers/oled/oled_driver.c **** 
 406:drivers/oled/oled_driver.c ****     // Invert if needed
 407:drivers/oled/oled_driver.c ****     if (invert) {
 408:drivers/oled/oled_driver.c ****         InvertCharacter(oled_cursor);
 409:drivers/oled/oled_driver.c ****     }
 410:drivers/oled/oled_driver.c **** 
 411:drivers/oled/oled_driver.c ****     // Dirty check
 412:drivers/oled/oled_driver.c ****     if (memcmp(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH)) {
 413:drivers/oled/oled_driver.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 414:drivers/oled/oled_driver.c ****         oled_dirty |= (1 << (index / OLED_BLOCK_SIZE));
 415:drivers/oled/oled_driver.c ****         // Edgecase check if the written data spans the 2 chunks
 416:drivers/oled/oled_driver.c ****         oled_dirty |= (1 << ((index + OLED_FONT_WIDTH) / OLED_BLOCK_SIZE));
 417:drivers/oled/oled_driver.c ****     }
 418:drivers/oled/oled_driver.c **** 
 419:drivers/oled/oled_driver.c ****     // Finally move to the next char
 420:drivers/oled/oled_driver.c ****     oled_advance_char();
 421:drivers/oled/oled_driver.c **** }
 528               		.loc 1 421 1 is_stmt 0 view .LVU123
 529 000e DF91      		pop r29
 530 0010 CF91      		pop r28
 531 0012 1F91      		pop r17
 387:drivers/oled/oled_driver.c ****         return;
 532               		.loc 1 387 9 view .LVU124
 533 0014 0C94 0000 		jmp oled_advance_page
 534               	.LVL39:
 535               	.L26:
 386:drivers/oled/oled_driver.c ****         oled_advance_page(false);
 536               		.loc 1 386 5 is_stmt 1 view .LVU125
 386:drivers/oled/oled_driver.c ****         oled_advance_page(false);
 537               		.loc 1 386 8 is_stmt 0 view .LVU126
 538 0018 8D30      		cpi r24,lo8(13)
 539 001a 01F4      		brne .L27
 387:drivers/oled/oled_driver.c ****         return;
 540               		.loc 1 387 9 is_stmt 1 view .LVU127
 541 001c 80E0      		ldi r24,0
 542               	.LVL40:
 387:drivers/oled/oled_driver.c ****         return;
 543               		.loc 1 387 9 is_stmt 0 view .LVU128
 544 001e 00C0      		rjmp .L36
 545               	.LVL41:
 546               	.L27:
 392:drivers/oled/oled_driver.c ****     memcpy(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH);
 547               		.loc 1 392 5 is_stmt 1 view .LVU129
 393:drivers/oled/oled_driver.c **** 
 548               		.loc 1 393 5 view .LVU130
 549 0020 C091 0000 		lds r28,oled_cursor
 550 0024 D091 0000 		lds r29,oled_cursor+1
 551 0028 96E0      		ldi r25,lo8(6)
 552 002a FE01      		movw r30,r28
 553 002c A0E0      		ldi r26,lo8(oled_temp_buffer.2079)
 554 002e B0E0      		ldi r27,hi8(oled_temp_buffer.2079)
 555               		0:
 556 0030 0190      		ld r0,Z+
 557 0032 0D92      		st X+,r0
 558 0034 9A95      		dec r25
 559 0036 01F4      		brne 0b
 395:drivers/oled/oled_driver.c **** 
 560               		.loc 1 395 5 view .LVU131
 398:drivers/oled/oled_driver.c ****     if (cast_data < OLED_FONT_START || cast_data > OLED_FONT_END) {
 561               		.loc 1 398 5 view .LVU132
 562               	.LVL42:
 399:drivers/oled/oled_driver.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 563               		.loc 1 399 5 view .LVU133
 399:drivers/oled/oled_driver.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 564               		.loc 1 399 8 is_stmt 0 view .LVU134
 565 0038 803E      		cpi r24,lo8(-32)
 566 003a 00F0      		brlo .L28
 400:drivers/oled/oled_driver.c ****     } else {
 567               		.loc 1 400 9 is_stmt 1 view .LVU135
 568 003c 86E0      		ldi r24,lo8(6)
 569               	.LVL43:
 400:drivers/oled/oled_driver.c ****     } else {
 570               		.loc 1 400 9 is_stmt 0 view .LVU136
 571 003e FE01      		movw r30,r28
 572               		0:
 573 0040 1192      		st Z+,__zero_reg__
 574 0042 8A95      		dec r24
 575 0044 01F4      		brne 0b
 576               	.L29:
 407:drivers/oled/oled_driver.c ****         InvertCharacter(oled_cursor);
 577               		.loc 1 407 5 is_stmt 1 view .LVU137
 407:drivers/oled/oled_driver.c ****         InvertCharacter(oled_cursor);
 578               		.loc 1 407 8 is_stmt 0 view .LVU138
 579 0046 1111      		cpse r17,__zero_reg__
 580 0048 00C0      		rjmp .L30
 581               	.L35:
 412:drivers/oled/oled_driver.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 582               		.loc 1 412 5 is_stmt 1 view .LVU139
 412:drivers/oled/oled_driver.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 583               		.loc 1 412 9 is_stmt 0 view .LVU140
 584 004a C091 0000 		lds r28,oled_cursor
 585 004e D091 0000 		lds r29,oled_cursor+1
 586 0052 46E0      		ldi r20,lo8(6)
 587 0054 50E0      		ldi r21,0
 588 0056 BE01      		movw r22,r28
 589 0058 80E0      		ldi r24,lo8(oled_temp_buffer.2079)
 590 005a 90E0      		ldi r25,hi8(oled_temp_buffer.2079)
 591 005c 0E94 0000 		call memcmp
 592               	.LVL44:
 412:drivers/oled/oled_driver.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 593               		.loc 1 412 8 view .LVU141
 594 0060 892B      		or r24,r25
 595 0062 01F4      		brne .L31
 596               	.L32:
 420:drivers/oled/oled_driver.c **** }
 597               		.loc 1 420 5 is_stmt 1 view .LVU142
 598               	/* epilogue start */
 599               		.loc 1 421 1 is_stmt 0 view .LVU143
 600 0064 DF91      		pop r29
 601 0066 CF91      		pop r28
 602 0068 1F91      		pop r17
 603               	.LVL45:
 420:drivers/oled/oled_driver.c **** }
 604               		.loc 1 420 5 view .LVU144
 605 006a 0C94 0000 		jmp oled_advance_char
 606               	.LVL46:
 607               	.L28:
 608               	.LBB14:
 402:drivers/oled/oled_driver.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 609               		.loc 1 402 9 is_stmt 1 view .LVU145
 403:drivers/oled/oled_driver.c ****     }
 610               		.loc 1 403 9 view .LVU146
 402:drivers/oled/oled_driver.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 611               		.loc 1 402 68 is_stmt 0 view .LVU147
 612 006e F6E0      		ldi r31,lo8(6)
 613 0070 8F9F      		mul r24,r31
 614 0072 B001      		movw r22,r0
 615 0074 1124      		clr __zero_reg__
 402:drivers/oled/oled_driver.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 616               		.loc 1 402 24 view .LVU148
 617 0076 6050      		subi r22,lo8(-(font))
 618 0078 7040      		sbci r23,hi8(-(font))
 403:drivers/oled/oled_driver.c ****     }
 619               		.loc 1 403 9 view .LVU149
 620 007a 46E0      		ldi r20,lo8(6)
 621 007c 50E0      		ldi r21,0
 622 007e CE01      		movw r24,r28
 623               	.LVL47:
 403:drivers/oled/oled_driver.c ****     }
 624               		.loc 1 403 9 view .LVU150
 625 0080 0E94 0000 		call memcpy_P
 626               	.LVL48:
 627 0084 00C0      		rjmp .L29
 628               	.LVL49:
 629               	.L30:
 403:drivers/oled/oled_driver.c ****     }
 630               		.loc 1 403 9 view .LVU151
 631 0086 E091 0000 		lds r30,oled_cursor
 632 008a F091 0000 		lds r31,oled_cursor+1
 633               	.LBE14:
 408:drivers/oled/oled_driver.c ****     }
 634               		.loc 1 408 9 is_stmt 1 view .LVU152
 635               	.LVL50:
 636               	.LBB15:
 637               	.LBI15:
 143:drivers/oled/oled_driver.c ****     const uint8_t *end = cursor + OLED_FONT_WIDTH;
 638               		.loc 1 143 13 view .LVU153
 639               	.LBB16:
 144:drivers/oled/oled_driver.c ****     while (cursor < end) {
 640               		.loc 1 144 5 view .LVU154
 144:drivers/oled/oled_driver.c ****     while (cursor < end) {
 641               		.loc 1 144 20 is_stmt 0 view .LVU155
 642 008e 9F01      		movw r18,r30
 643 0090 2A5F      		subi r18,-6
 644 0092 3F4F      		sbci r19,-1
 645               	.LVL51:
 145:drivers/oled/oled_driver.c ****         *cursor = ~(*cursor);
 646               		.loc 1 145 5 is_stmt 1 view .LVU156
 647               	.L33:
 145:drivers/oled/oled_driver.c ****         *cursor = ~(*cursor);
 648               		.loc 1 145 11 is_stmt 0 view .LVU157
 649 0094 2E17      		cp r18,r30
 650 0096 3F07      		cpc r19,r31
 651 0098 01F0      		breq .L35
 146:drivers/oled/oled_driver.c ****         cursor++;
 652               		.loc 1 146 9 is_stmt 1 view .LVU158
 146:drivers/oled/oled_driver.c ****         cursor++;
 653               		.loc 1 146 17 is_stmt 0 view .LVU159
 654 009a 8081      		ld r24,Z
 655 009c 8095      		com r24
 656 009e 8193      		st Z+,r24
 657               	.LVL52:
 147:drivers/oled/oled_driver.c ****     }
 658               		.loc 1 147 9 is_stmt 1 view .LVU160
 147:drivers/oled/oled_driver.c ****     }
 659               		.loc 1 147 9 is_stmt 0 view .LVU161
 660 00a0 00C0      		rjmp .L33
 661               	.LVL53:
 662               	.L31:
 147:drivers/oled/oled_driver.c ****     }
 663               		.loc 1 147 9 view .LVU162
 664               	.LBE16:
 665               	.LBE15:
 666               	.LBB17:
 413:drivers/oled/oled_driver.c ****         oled_dirty |= (1 << (index / OLED_BLOCK_SIZE));
 667               		.loc 1 413 9 is_stmt 1 view .LVU163
 413:drivers/oled/oled_driver.c ****         oled_dirty |= (1 << (index / OLED_BLOCK_SIZE));
 668               		.loc 1 413 38 is_stmt 0 view .LVU164
 669 00a2 C050      		subi r28,lo8(oled_buffer)
 670 00a4 D040      		sbci r29,hi8(oled_buffer)
 671               	.LVL54:
 414:drivers/oled/oled_driver.c ****         // Edgecase check if the written data spans the 2 chunks
 672               		.loc 1 414 9 is_stmt 1 view .LVU165
 416:drivers/oled/oled_driver.c ****     }
 673               		.loc 1 416 9 view .LVU166
 414:drivers/oled/oled_driver.c ****         // Edgecase check if the written data spans the 2 chunks
 674               		.loc 1 414 36 is_stmt 0 view .LVU167
 675 00a6 CE01      		movw r24,r28
 676 00a8 25E0      		ldi r18,5
 677               		1:
 678 00aa 9695      		lsr r25
 679 00ac 8795      		ror r24
 680 00ae 2A95      		dec r18
 681 00b0 01F4      		brne 1b
 414:drivers/oled/oled_driver.c ****         // Edgecase check if the written data spans the 2 chunks
 682               		.loc 1 414 26 view .LVU168
 683 00b2 21E0      		ldi r18,lo8(1)
 684 00b4 30E0      		ldi r19,0
 685 00b6 A901      		movw r20,r18
 686 00b8 00C0      		rjmp 2f
 687               		1:
 688 00ba 440F      		lsl r20
 689 00bc 551F      		rol r21
 690               		2:
 691 00be 8A95      		dec r24
 692 00c0 02F4      		brpl 1b
 693 00c2 CA01      		movw r24,r20
 414:drivers/oled/oled_driver.c ****         // Edgecase check if the written data spans the 2 chunks
 694               		.loc 1 414 20 view .LVU169
 695 00c4 4091 0000 		lds r20,oled_dirty
 696 00c8 5091 0000 		lds r21,oled_dirty+1
 697 00cc 842B      		or r24,r20
 698 00ce 952B      		or r25,r21
 416:drivers/oled/oled_driver.c ****     }
 699               		.loc 1 416 37 view .LVU170
 700 00d0 2696      		adiw r28,6
 701               	.LVL55:
 416:drivers/oled/oled_driver.c ****     }
 702               		.loc 1 416 56 view .LVU171
 703 00d2 45E0      		ldi r20,5
 704               		1:
 705 00d4 D695      		lsr r29
 706 00d6 C795      		ror r28
 707 00d8 4A95      		dec r20
 708 00da 01F4      		brne 1b
 709               	.LVL56:
 416:drivers/oled/oled_driver.c ****     }
 710               		.loc 1 416 26 view .LVU172
 711 00dc 00C0      		rjmp 2f
 712               		1:
 713 00de 220F      		lsl r18
 714 00e0 331F      		rol r19
 715               		2:
 716 00e2 CA95      		dec r28
 717 00e4 02F4      		brpl 1b
 416:drivers/oled/oled_driver.c ****     }
 718               		.loc 1 416 20 view .LVU173
 719 00e6 822B      		or r24,r18
 720 00e8 932B      		or r25,r19
 721 00ea 9093 0000 		sts oled_dirty+1,r25
 722 00ee 8093 0000 		sts oled_dirty,r24
 723 00f2 00C0      		rjmp .L32
 724               	.LBE17:
 725               		.cfi_endproc
 726               	.LFE16:
 728               		.section	.text.oled_advance_page,"ax",@progbits
 729               	.global	oled_advance_page
 731               	oled_advance_page:
 732               	.LVL57:
 733               	.LFB14:
 338:drivers/oled/oled_driver.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 734               		.loc 1 338 49 is_stmt 1 view -0
 735               		.cfi_startproc
 338:drivers/oled/oled_driver.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 736               		.loc 1 338 49 is_stmt 0 view .LVU175
 737 0000 CF93      		push r28
 738               	.LCFI11:
 739               		.cfi_def_cfa_offset 3
 740               		.cfi_offset 28, -2
 741               	/* prologue: function */
 742               	/* frame size = 0 */
 743               	/* stack size = 1 */
 744               	.L__stack_usage = 1
 745 0002 382F      		mov r19,r24
 339:drivers/oled/oled_driver.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 746               		.loc 1 339 5 is_stmt 1 view .LVU176
 339:drivers/oled/oled_driver.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 747               		.loc 1 339 38 is_stmt 0 view .LVU177
 748 0004 E091 0000 		lds r30,oled_cursor
 749 0008 F091 0000 		lds r31,oled_cursor+1
 750 000c E050      		subi r30,lo8(oled_buffer)
 751 000e F040      		sbci r31,hi8(oled_buffer)
 752               	.LVL58:
 340:drivers/oled/oled_driver.c **** 
 753               		.loc 1 340 5 is_stmt 1 view .LVU178
 340:drivers/oled/oled_driver.c **** 
 754               		.loc 1 340 46 is_stmt 0 view .LVU179
 755 0010 2091 0000 		lds r18,oled_rotation_width
 340:drivers/oled/oled_driver.c **** 
 756               		.loc 1 340 55 view .LVU180
 757 0014 622F      		mov r22,r18
 758 0016 70E0      		ldi r23,0
 759 0018 CF01      		movw r24,r30
 760               	.LVL59:
 340:drivers/oled/oled_driver.c **** 
 761               		.loc 1 340 55 view .LVU181
 762 001a 0E94 0000 		call __udivmodhi4
 340:drivers/oled/oled_driver.c **** 
 763               		.loc 1 340 14 view .LVU182
 764 001e 281B      		sub r18,r24
 765 0020 822F      		mov r24,r18
 766               	.LVL60:
 342:drivers/oled/oled_driver.c ****         // Remaining Char count
 767               		.loc 1 342 5 is_stmt 1 view .LVU183
 342:drivers/oled/oled_driver.c ****         // Remaining Char count
 768               		.loc 1 342 8 is_stmt 0 view .LVU184
 769 0022 3323      		tst r19
 770 0024 01F0      		breq .L38
 344:drivers/oled/oled_driver.c **** 
 771               		.loc 1 344 9 is_stmt 1 view .LVU185
 344:drivers/oled/oled_driver.c **** 
 772               		.loc 1 344 19 is_stmt 0 view .LVU186
 773 0026 66E0      		ldi r22,lo8(6)
 774 0028 0E94 0000 		call __udivmodqi4
 775 002c C82F      		mov r28,r24
 776               	.LVL61:
 347:drivers/oled/oled_driver.c ****     } else {
 777               		.loc 1 347 9 is_stmt 1 view .LVU187
 778               	.L39:
 347:drivers/oled/oled_driver.c ****     } else {
 779               		.loc 1 347 25 is_stmt 0 discriminator 1 view .LVU188
 780               	.LVL62:
 781 002e C150      		subi r28,1
 782 0030 00F4      		brcc .L40
 783               	.L37:
 784               	/* epilogue start */
 357:drivers/oled/oled_driver.c **** 
 785               		.loc 1 357 1 view .LVU189
 786 0032 CF91      		pop r28
 787 0034 0895      		ret
 788               	.LVL63:
 789               	.L40:
 347:drivers/oled/oled_driver.c ****     } else {
 790               		.loc 1 347 29 is_stmt 1 discriminator 2 view .LVU190
 791 0036 60E0      		ldi r22,0
 792 0038 80E2      		ldi r24,lo8(32)
 793 003a 0E94 0000 		call oled_write_char
 794               	.LVL64:
 795 003e 00C0      		rjmp .L39
 796               	.LVL65:
 797               	.L38:
 350:drivers/oled/oled_driver.c ****             index     = 0;
 798               		.loc 1 350 9 view .LVU191
 350:drivers/oled/oled_driver.c ****             index     = 0;
 799               		.loc 1 350 19 is_stmt 0 view .LVU192
 800 0040 9F01      		movw r18,r30
 801               	.LVL66:
 350:drivers/oled/oled_driver.c ****             index     = 0;
 802               		.loc 1 350 19 view .LVU193
 803 0042 280F      		add r18,r24
 804 0044 311D      		adc r19,__zero_reg__
 350:drivers/oled/oled_driver.c ****             index     = 0;
 805               		.loc 1 350 12 view .LVU194
 806 0046 2115      		cp r18,__zero_reg__
 807 0048 3240      		sbci r19,2
 808 004a 00F0      		brlo .L42
 352:drivers/oled/oled_driver.c ****         }
 809               		.loc 1 352 23 view .LVU195
 810 004c 80E0      		ldi r24,0
 811               	.LVL67:
 351:drivers/oled/oled_driver.c ****             remaining = 0;
 812               		.loc 1 351 23 view .LVU196
 813 004e F0E0      		ldi r31,0
 814 0050 E0E0      		ldi r30,0
 815               	.LVL68:
 816               	.L42:
 355:drivers/oled/oled_driver.c ****     }
 817               		.loc 1 355 9 is_stmt 1 view .LVU197
 355:drivers/oled/oled_driver.c ****     }
 818               		.loc 1 355 42 is_stmt 0 view .LVU198
 819 0052 8E0F      		add r24,r30
 820 0054 9F2F      		mov r25,r31
 821 0056 911D      		adc r25,__zero_reg__
 822               	.LVL69:
 355:drivers/oled/oled_driver.c ****     }
 823               		.loc 1 355 23 view .LVU199
 824 0058 8050      		subi r24,lo8(-(oled_buffer))
 825 005a 9040      		sbci r25,hi8(-(oled_buffer))
 355:drivers/oled/oled_driver.c ****     }
 826               		.loc 1 355 21 view .LVU200
 827 005c 9093 0000 		sts oled_cursor+1,r25
 828 0060 8093 0000 		sts oled_cursor,r24
 357:drivers/oled/oled_driver.c **** 
 829               		.loc 1 357 1 view .LVU201
 830 0064 00C0      		rjmp .L37
 831               		.cfi_endproc
 832               	.LFE14:
 834               		.section	.text.oled_write,"ax",@progbits
 835               	.global	oled_write
 837               	oled_write:
 838               	.LVL70:
 839               	.LFB17:
 422:drivers/oled/oled_driver.c **** 
 423:drivers/oled/oled_driver.c **** void oled_write(const char *data, bool invert) {
 840               		.loc 1 423 48 is_stmt 1 view -0
 841               		.cfi_startproc
 842               		.loc 1 423 48 is_stmt 0 view .LVU203
 843 0000 FF92      		push r15
 844               	.LCFI12:
 845               		.cfi_def_cfa_offset 3
 846               		.cfi_offset 15, -2
 847 0002 0F93      		push r16
 848               	.LCFI13:
 849               		.cfi_def_cfa_offset 4
 850               		.cfi_offset 16, -3
 851 0004 1F93      		push r17
 852               	.LCFI14:
 853               		.cfi_def_cfa_offset 5
 854               		.cfi_offset 17, -4
 855 0006 CF93      		push r28
 856               	.LCFI15:
 857               		.cfi_def_cfa_offset 6
 858               		.cfi_offset 28, -5
 859 0008 DF93      		push r29
 860               	.LCFI16:
 861               		.cfi_def_cfa_offset 7
 862               		.cfi_offset 29, -6
 863               	/* prologue: function */
 864               	/* frame size = 0 */
 865               	/* stack size = 5 */
 866               	.L__stack_usage = 5
 867 000a EC01      		movw r28,r24
 868 000c F62E      		mov r15,r22
 424:drivers/oled/oled_driver.c ****     const char *end = data + strlen(data);
 869               		.loc 1 424 5 is_stmt 1 view .LVU204
 870               		.loc 1 424 30 is_stmt 0 view .LVU205
 871 000e FC01      		movw r30,r24
 872               		0:
 873 0010 0190      		ld __tmp_reg__,Z+
 874 0012 0020      		tst __tmp_reg__
 875 0014 01F4      		brne 0b
 876               		.loc 1 424 17 view .LVU206
 877 0016 8F01      		movw r16,r30
 878 0018 0150      		subi r16,1
 879 001a 1109      		sbc r17,__zero_reg__
 880               	.LVL71:
 425:drivers/oled/oled_driver.c ****     while (data < end) {
 881               		.loc 1 425 5 is_stmt 1 view .LVU207
 882               	.L44:
 883               		.loc 1 425 11 is_stmt 0 view .LVU208
 884 001c C017      		cp r28,r16
 885 001e D107      		cpc r29,r17
 886 0020 00F0      		brlo .L45
 887               	/* epilogue start */
 426:drivers/oled/oled_driver.c ****         oled_write_char(*data, invert);
 427:drivers/oled/oled_driver.c ****         data++;
 428:drivers/oled/oled_driver.c ****     }
 429:drivers/oled/oled_driver.c **** }
 888               		.loc 1 429 1 view .LVU209
 889 0022 DF91      		pop r29
 890 0024 CF91      		pop r28
 891               	.LVL72:
 892               		.loc 1 429 1 view .LVU210
 893 0026 1F91      		pop r17
 894 0028 0F91      		pop r16
 895               	.LVL73:
 896               		.loc 1 429 1 view .LVU211
 897 002a FF90      		pop r15
 898               	.LVL74:
 899               		.loc 1 429 1 view .LVU212
 900 002c 0895      		ret
 901               	.LVL75:
 902               	.L45:
 426:drivers/oled/oled_driver.c ****         oled_write_char(*data, invert);
 903               		.loc 1 426 9 is_stmt 1 view .LVU213
 904 002e 6F2D      		mov r22,r15
 905 0030 8991      		ld r24,Y+
 906               	.LVL76:
 426:drivers/oled/oled_driver.c ****         oled_write_char(*data, invert);
 907               		.loc 1 426 9 is_stmt 0 view .LVU214
 908 0032 0E94 0000 		call oled_write_char
 909               	.LVL77:
 427:drivers/oled/oled_driver.c ****     }
 910               		.loc 1 427 9 is_stmt 1 view .LVU215
 427:drivers/oled/oled_driver.c ****     }
 911               		.loc 1 427 9 is_stmt 0 view .LVU216
 912 0036 00C0      		rjmp .L44
 913               		.cfi_endproc
 914               	.LFE17:
 916               		.section	.text.oled_write_ln,"ax",@progbits
 917               	.global	oled_write_ln
 919               	oled_write_ln:
 920               	.LVL78:
 921               	.LFB18:
 430:drivers/oled/oled_driver.c **** 
 431:drivers/oled/oled_driver.c **** void oled_write_ln(const char *data, bool invert) {
 922               		.loc 1 431 51 is_stmt 1 view -0
 923               		.cfi_startproc
 924               	/* prologue: function */
 925               	/* frame size = 0 */
 926               	/* stack size = 0 */
 927               	.L__stack_usage = 0
 432:drivers/oled/oled_driver.c ****     oled_write(data, invert);
 928               		.loc 1 432 5 view .LVU218
 929 0000 0E94 0000 		call oled_write
 930               	.LVL79:
 433:drivers/oled/oled_driver.c ****     oled_advance_page(true);
 931               		.loc 1 433 5 view .LVU219
 932 0004 81E0      		ldi r24,lo8(1)
 933 0006 0C94 0000 		jmp oled_advance_page
 934               	.LVL80:
 935               		.cfi_endproc
 936               	.LFE18:
 938               		.section	.text.oled_write_raw,"ax",@progbits
 939               	.global	oled_write_raw
 941               	oled_write_raw:
 942               	.LVL81:
 943               	.LFB19:
 434:drivers/oled/oled_driver.c **** }
 435:drivers/oled/oled_driver.c **** 
 436:drivers/oled/oled_driver.c **** void oled_write_raw(const char *data, uint16_t size) {
 944               		.loc 1 436 54 view -0
 945               		.cfi_startproc
 946               		.loc 1 436 54 is_stmt 0 view .LVU221
 947 0000 CF93      		push r28
 948               	.LCFI17:
 949               		.cfi_def_cfa_offset 3
 950               		.cfi_offset 28, -2
 951 0002 DF93      		push r29
 952               	.LCFI18:
 953               		.cfi_def_cfa_offset 4
 954               		.cfi_offset 29, -3
 955               	/* prologue: function */
 956               	/* frame size = 0 */
 957               	/* stack size = 2 */
 958               	.L__stack_usage = 2
 437:drivers/oled/oled_driver.c ****     if (size > OLED_MATRIX_SIZE) size = OLED_MATRIX_SIZE;
 959               		.loc 1 437 5 is_stmt 1 view .LVU222
 960 0004 6130      		cpi r22,1
 961 0006 22E0      		ldi r18,2
 962 0008 7207      		cpc r23,r18
 963 000a 00F0      		brlo .L48
 964 000c 60E0      		ldi r22,0
 965 000e 72E0      		ldi r23,lo8(2)
 966               	.LVL82:
 967               	.L48:
 438:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 968               		.loc 1 438 5 view .LVU223
 969               	.LBB18:
 970               		.loc 1 438 10 view .LVU224
 971               		.loc 1 438 10 is_stmt 0 view .LVU225
 972 0010 E0E0      		ldi r30,lo8(oled_buffer)
 973 0012 F0E0      		ldi r31,hi8(oled_buffer)
 974 0014 DC01      		movw r26,r24
 975               		.loc 1 438 19 view .LVU226
 976 0016 90E0      		ldi r25,0
 977 0018 80E0      		ldi r24,0
 978               	.LVL83:
 439:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 440:drivers/oled/oled_driver.c ****         oled_buffer[i] = data[i];
 441:drivers/oled/oled_driver.c ****         oled_dirty |= (1 << (i / OLED_BLOCK_SIZE));
 979               		.loc 1 441 26 view .LVU227
 980 001a 41E0      		ldi r20,lo8(1)
 981 001c 50E0      		ldi r21,0
 982               	.LVL84:
 983               	.L49:
 438:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 984               		.loc 1 438 5 discriminator 1 view .LVU228
 985 001e 8617      		cp r24,r22
 986 0020 9707      		cpc r25,r23
 987 0022 01F4      		brne .L51
 988               	/* epilogue start */
 989               	.LBE18:
 442:drivers/oled/oled_driver.c ****     }
 443:drivers/oled/oled_driver.c **** }
 990               		.loc 1 443 1 view .LVU229
 991 0024 DF91      		pop r29
 992 0026 CF91      		pop r28
 993 0028 0895      		ret
 994               	.L51:
 995               	.LBB19:
 439:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 996               		.loc 1 439 9 is_stmt 1 view .LVU230
 439:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 997               		.loc 1 439 28 is_stmt 0 view .LVU231
 998 002a 2D91      		ld r18,X+
 439:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 999               		.loc 1 439 12 view .LVU232
 1000 002c 3081      		ld r19,Z
 1001 002e 3217      		cp r19,r18
 1002 0030 01F0      		breq .L50
 440:drivers/oled/oled_driver.c ****         oled_dirty |= (1 << (i / OLED_BLOCK_SIZE));
 1003               		.loc 1 440 9 is_stmt 1 view .LVU233
 440:drivers/oled/oled_driver.c ****         oled_dirty |= (1 << (i / OLED_BLOCK_SIZE));
 1004               		.loc 1 440 24 is_stmt 0 view .LVU234
 1005 0032 2083      		st Z,r18
 441:drivers/oled/oled_driver.c ****     }
 1006               		.loc 1 441 9 is_stmt 1 view .LVU235
 441:drivers/oled/oled_driver.c ****     }
 1007               		.loc 1 441 32 is_stmt 0 view .LVU236
 1008 0034 9C01      		movw r18,r24
 1009 0036 C5E0      		ldi r28,5
 1010               		1:
 1011 0038 3695      		lsr r19
 1012 003a 2795      		ror r18
 1013 003c CA95      		dec r28
 1014 003e 01F4      		brne 1b
 441:drivers/oled/oled_driver.c ****     }
 1015               		.loc 1 441 26 view .LVU237
 1016 0040 EA01      		movw r28,r20
 1017 0042 00C0      		rjmp 2f
 1018               		1:
 1019 0044 CC0F      		lsl r28
 1020 0046 DD1F      		rol r29
 1021               		2:
 1022 0048 2A95      		dec r18
 1023 004a 02F4      		brpl 1b
 441:drivers/oled/oled_driver.c ****     }
 1024               		.loc 1 441 20 view .LVU238
 1025 004c 2091 0000 		lds r18,oled_dirty
 1026 0050 3091 0000 		lds r19,oled_dirty+1
 1027 0054 2C2B      		or r18,r28
 1028 0056 3D2B      		or r19,r29
 1029 0058 3093 0000 		sts oled_dirty+1,r19
 1030 005c 2093 0000 		sts oled_dirty,r18
 1031               	.L50:
 438:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 1032               		.loc 1 438 37 discriminator 2 view .LVU239
 1033 0060 0196      		adiw r24,1
 1034               	.LVL85:
 438:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 1035               		.loc 1 438 37 discriminator 2 view .LVU240
 1036 0062 3196      		adiw r30,1
 1037 0064 00C0      		rjmp .L49
 1038               	.LBE19:
 1039               		.cfi_endproc
 1040               	.LFE19:
 1042               		.section	.text.oled_write_P,"ax",@progbits
 1043               	.global	oled_write_P
 1045               	oled_write_P:
 1046               	.LVL86:
 1047               	.LFB20:
 444:drivers/oled/oled_driver.c **** 
 445:drivers/oled/oled_driver.c **** #if defined(__AVR__)
 446:drivers/oled/oled_driver.c **** void oled_write_P(const char *data, bool invert) {
 1048               		.loc 1 446 50 is_stmt 1 view -0
 1049               		.cfi_startproc
 1050               		.loc 1 446 50 is_stmt 0 view .LVU242
 1051 0000 1F93      		push r17
 1052               	.LCFI19:
 1053               		.cfi_def_cfa_offset 3
 1054               		.cfi_offset 17, -2
 1055 0002 CF93      		push r28
 1056               	.LCFI20:
 1057               		.cfi_def_cfa_offset 4
 1058               		.cfi_offset 28, -3
 1059 0004 DF93      		push r29
 1060               	.LCFI21:
 1061               		.cfi_def_cfa_offset 5
 1062               		.cfi_offset 29, -4
 1063               	/* prologue: function */
 1064               	/* frame size = 0 */
 1065               	/* stack size = 3 */
 1066               	.L__stack_usage = 3
 1067 0006 EC01      		movw r28,r24
 1068 0008 162F      		mov r17,r22
 1069               	.LVL87:
 1070               	.L55:
 1071               	.LBB20:
 447:drivers/oled/oled_driver.c ****     uint8_t c = pgm_read_byte(data);
 448:drivers/oled/oled_driver.c ****     while (c != 0) {
 449:drivers/oled/oled_driver.c ****         oled_write_char(c, invert);
 450:drivers/oled/oled_driver.c ****         c = pgm_read_byte(++data);
 1072               		.loc 1 450 13 is_stmt 1 view .LVU243
 1073               		.loc 1 450 13 view .LVU244
 1074 000a FE01      		movw r30,r28
 1075               	/* #APP */
 1076               	 ;  450 "drivers/oled/oled_driver.c" 1
 1077 000c 8491      		lpm r24, Z
 1078               		
 1079               	 ;  0 "" 2
 1080               	.LVL88:
 1081               		.loc 1 450 13 view .LVU245
 1082               		.loc 1 450 13 is_stmt 0 view .LVU246
 1083               	/* #NOAPP */
 1084               	.LBE20:
 448:drivers/oled/oled_driver.c ****         oled_write_char(c, invert);
 1085               		.loc 1 448 11 view .LVU247
 1086 000e 8111      		cpse r24,__zero_reg__
 1087 0010 00C0      		rjmp .L54
 1088               	/* epilogue start */
 451:drivers/oled/oled_driver.c ****     }
 452:drivers/oled/oled_driver.c **** }
 1089               		.loc 1 452 1 view .LVU248
 1090 0012 DF91      		pop r29
 1091 0014 CF91      		pop r28
 1092               	.LVL89:
 1093               		.loc 1 452 1 view .LVU249
 1094 0016 1F91      		pop r17
 1095               	.LVL90:
 1096               		.loc 1 452 1 view .LVU250
 1097 0018 0895      		ret
 1098               	.LVL91:
 1099               	.L54:
 449:drivers/oled/oled_driver.c ****         c = pgm_read_byte(++data);
 1100               		.loc 1 449 9 is_stmt 1 view .LVU251
 1101 001a 612F      		mov r22,r17
 1102 001c 0E94 0000 		call oled_write_char
 1103               	.LVL92:
 450:drivers/oled/oled_driver.c ****     }
 1104               		.loc 1 450 9 view .LVU252
 1105               	.LBB21:
 450:drivers/oled/oled_driver.c ****     }
 1106               		.loc 1 450 13 view .LVU253
 1107 0020 2196      		adiw r28,1
 1108               	.LVL93:
 450:drivers/oled/oled_driver.c ****     }
 1109               		.loc 1 450 13 is_stmt 0 view .LVU254
 1110 0022 00C0      		rjmp .L55
 1111               	.LBE21:
 1112               		.cfi_endproc
 1113               	.LFE20:
 1115               		.section	.text.oled_write_ln_P,"ax",@progbits
 1116               	.global	oled_write_ln_P
 1118               	oled_write_ln_P:
 1119               	.LVL94:
 1120               	.LFB21:
 453:drivers/oled/oled_driver.c **** 
 454:drivers/oled/oled_driver.c **** void oled_write_ln_P(const char *data, bool invert) {
 1121               		.loc 1 454 53 is_stmt 1 view -0
 1122               		.cfi_startproc
 1123               	/* prologue: function */
 1124               	/* frame size = 0 */
 1125               	/* stack size = 0 */
 1126               	.L__stack_usage = 0
 455:drivers/oled/oled_driver.c ****     oled_write_P(data, invert);
 1127               		.loc 1 455 5 view .LVU256
 1128 0000 0E94 0000 		call oled_write_P
 1129               	.LVL95:
 456:drivers/oled/oled_driver.c ****     oled_advance_page(true);
 1130               		.loc 1 456 5 view .LVU257
 1131 0004 81E0      		ldi r24,lo8(1)
 1132 0006 0C94 0000 		jmp oled_advance_page
 1133               	.LVL96:
 1134               		.cfi_endproc
 1135               	.LFE21:
 1137               		.section	.text.oled_write_raw_P,"ax",@progbits
 1138               	.global	oled_write_raw_P
 1140               	oled_write_raw_P:
 1141               	.LVL97:
 1142               	.LFB22:
 457:drivers/oled/oled_driver.c **** }
 458:drivers/oled/oled_driver.c **** 
 459:drivers/oled/oled_driver.c **** void oled_write_raw_P(const char *data, uint16_t size) {
 1143               		.loc 1 459 56 view -0
 1144               		.cfi_startproc
 1145               		.loc 1 459 56 is_stmt 0 view .LVU259
 1146 0000 0F93      		push r16
 1147               	.LCFI22:
 1148               		.cfi_def_cfa_offset 3
 1149               		.cfi_offset 16, -2
 1150 0002 1F93      		push r17
 1151               	.LCFI23:
 1152               		.cfi_def_cfa_offset 4
 1153               		.cfi_offset 17, -3
 1154 0004 CF93      		push r28
 1155               	.LCFI24:
 1156               		.cfi_def_cfa_offset 5
 1157               		.cfi_offset 28, -4
 1158 0006 DF93      		push r29
 1159               	.LCFI25:
 1160               		.cfi_def_cfa_offset 6
 1161               		.cfi_offset 29, -5
 1162               	/* prologue: function */
 1163               	/* frame size = 0 */
 1164               	/* stack size = 4 */
 1165               	.L__stack_usage = 4
 460:drivers/oled/oled_driver.c ****     if (size > OLED_MATRIX_SIZE) size = OLED_MATRIX_SIZE;
 1166               		.loc 1 460 5 is_stmt 1 view .LVU260
 1167 0008 6130      		cpi r22,1
 1168 000a 02E0      		ldi r16,2
 1169 000c 7007      		cpc r23,r16
 1170 000e 00F0      		brlo .L58
 1171 0010 60E0      		ldi r22,0
 1172 0012 72E0      		ldi r23,lo8(2)
 1173               	.LVL98:
 1174               	.L58:
 461:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 1175               		.loc 1 461 5 view .LVU261
 1176               	.LBB22:
 1177               		.loc 1 461 10 view .LVU262
 1178               		.loc 1 461 10 is_stmt 0 view .LVU263
 1179 0014 4091 0000 		lds r20,oled_dirty
 1180 0018 5091 0000 		lds r21,oled_dirty+1
 1181 001c A0E0      		ldi r26,lo8(oled_buffer)
 1182 001e B0E0      		ldi r27,hi8(oled_buffer)
 1183               		.loc 1 461 19 view .LVU264
 1184 0020 30E0      		ldi r19,0
 1185 0022 20E0      		ldi r18,0
 1186               	.LBB23:
 462:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(++data);
 463:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == c) continue;
 464:drivers/oled/oled_driver.c ****         oled_buffer[i] = c;
 465:drivers/oled/oled_driver.c ****         oled_dirty |= (1 << (i / OLED_BLOCK_SIZE));
 1187               		.loc 1 465 26 view .LVU265
 1188 0024 C1E0      		ldi r28,lo8(1)
 1189 0026 D0E0      		ldi r29,0
 1190               	.LVL99:
 1191               	.L59:
 1192               		.loc 1 465 26 view .LVU266
 1193               	.LBE23:
 461:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 1194               		.loc 1 461 5 discriminator 1 view .LVU267
 1195 0028 2617      		cp r18,r22
 1196 002a 3707      		cpc r19,r23
 1197 002c 01F4      		brne .L61
 461:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 1198               		.loc 1 461 5 discriminator 1 view .LVU268
 1199 002e 5093 0000 		sts oled_dirty+1,r21
 1200 0032 4093 0000 		sts oled_dirty,r20
 1201               	/* epilogue start */
 1202               	.LBE22:
 466:drivers/oled/oled_driver.c ****     }
 467:drivers/oled/oled_driver.c **** }
 1203               		.loc 1 467 1 view .LVU269
 1204 0036 DF91      		pop r29
 1205 0038 CF91      		pop r28
 1206 003a 1F91      		pop r17
 1207 003c 0F91      		pop r16
 1208 003e 0895      		ret
 1209               	.L61:
 1210               	.LBB26:
 1211               	.LBB25:
 462:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(++data);
 1212               		.loc 1 462 9 is_stmt 1 view .LVU270
 1213               	.LBB24:
 462:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(++data);
 1214               		.loc 1 462 21 view .LVU271
 1215 0040 0196      		adiw r24,1
 1216               	.LVL100:
 462:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(++data);
 1217               		.loc 1 462 21 view .LVU272
 462:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(++data);
 1218               		.loc 1 462 21 view .LVU273
 1219 0042 FC01      		movw r30,r24
 1220               	/* #APP */
 1221               	 ;  462 "drivers/oled/oled_driver.c" 1
 1222 0044 1491      		lpm r17, Z
 1223               		
 1224               	 ;  0 "" 2
 1225               	.LVL101:
 462:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(++data);
 1226               		.loc 1 462 21 view .LVU274
 462:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(++data);
 1227               		.loc 1 462 21 is_stmt 0 view .LVU275
 1228               	/* #NOAPP */
 1229               	.LBE24:
 463:drivers/oled/oled_driver.c ****         oled_buffer[i] = c;
 1230               		.loc 1 463 9 is_stmt 1 view .LVU276
 463:drivers/oled/oled_driver.c ****         oled_buffer[i] = c;
 1231               		.loc 1 463 12 is_stmt 0 view .LVU277
 1232 0046 FC91      		ld r31,X
 1233 0048 F117      		cp r31,r17
 1234 004a 01F0      		breq .L60
 464:drivers/oled/oled_driver.c ****         oled_dirty |= (1 << (i / OLED_BLOCK_SIZE));
 1235               		.loc 1 464 9 is_stmt 1 view .LVU278
 464:drivers/oled/oled_driver.c ****         oled_dirty |= (1 << (i / OLED_BLOCK_SIZE));
 1236               		.loc 1 464 24 is_stmt 0 view .LVU279
 1237 004c 1C93      		st X,r17
 465:drivers/oled/oled_driver.c ****     }
 1238               		.loc 1 465 9 is_stmt 1 view .LVU280
 465:drivers/oled/oled_driver.c ****     }
 1239               		.loc 1 465 32 is_stmt 0 view .LVU281
 1240 004e F901      		movw r30,r18
 1241 0050 15E0      		ldi r17,5
 1242               		1:
 1243 0052 F695      		lsr r31
 1244 0054 E795      		ror r30
 1245 0056 1A95      		dec r17
 1246 0058 01F4      		brne 1b
 1247               	.LVL102:
 465:drivers/oled/oled_driver.c ****     }
 1248               		.loc 1 465 26 view .LVU282
 1249 005a 8E01      		movw r16,r28
 1250 005c 00C0      		rjmp 2f
 1251               		1:
 1252 005e 000F      		lsl r16
 1253 0060 111F      		rol r17
 1254               		2:
 1255 0062 EA95      		dec r30
 1256 0064 02F4      		brpl 1b
 1257 0066 F801      		movw r30,r16
 465:drivers/oled/oled_driver.c ****     }
 1258               		.loc 1 465 20 view .LVU283
 1259 0068 402B      		or r20,r16
 1260 006a 5F2B      		or r21,r31
 1261               	.LVL103:
 1262               	.L60:
 465:drivers/oled/oled_driver.c ****     }
 1263               		.loc 1 465 20 view .LVU284
 1264               	.LBE25:
 461:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(++data);
 1265               		.loc 1 461 37 discriminator 2 view .LVU285
 1266 006c 2F5F      		subi r18,-1
 1267 006e 3F4F      		sbci r19,-1
 1268               	.LVL104:
 461:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(++data);
 1269               		.loc 1 461 37 discriminator 2 view .LVU286
 1270 0070 1196      		adiw r26,1
 1271 0072 00C0      		rjmp .L59
 1272               	.LBE26:
 1273               		.cfi_endproc
 1274               	.LFE22:
 1276               		.section	.text.oled_on,"ax",@progbits
 1277               	.global	oled_on
 1279               	oled_on:
 1280               	.LFB23:
 468:drivers/oled/oled_driver.c **** #endif  // defined(__AVR__)
 469:drivers/oled/oled_driver.c **** 
 470:drivers/oled/oled_driver.c **** bool oled_on(void) {
 1281               		.loc 1 470 20 is_stmt 1 view -0
 1282               		.cfi_startproc
 1283               	/* prologue: function */
 1284               	/* frame size = 0 */
 1285               	/* stack size = 0 */
 1286               	.L__stack_usage = 0
 471:drivers/oled/oled_driver.c **** #if OLED_TIMEOUT > 0
 472:drivers/oled/oled_driver.c ****     oled_timeout = timer_read32() + OLED_TIMEOUT;
 473:drivers/oled/oled_driver.c **** #endif
 474:drivers/oled/oled_driver.c **** 
 475:drivers/oled/oled_driver.c ****     static const uint8_t PROGMEM display_on[] = {I2C_CMD, DISPLAY_ON};
 1287               		.loc 1 475 5 view .LVU288
 476:drivers/oled/oled_driver.c ****     if (!oled_active) {
 1288               		.loc 1 476 5 view .LVU289
 1289               		.loc 1 476 8 is_stmt 0 view .LVU290
 1290 0000 8091 0000 		lds r24,oled_active
 1291 0004 8111      		cpse r24,__zero_reg__
 1292 0006 00C0      		rjmp .L63
 477:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 1293               		.loc 1 477 9 is_stmt 1 view .LVU291
 1294               		.loc 1 477 13 is_stmt 0 view .LVU292
 1295 0008 62E0      		ldi r22,lo8(2)
 1296 000a 70E0      		ldi r23,0
 1297 000c 80E0      		ldi r24,lo8(display_on.2138)
 1298 000e 90E0      		ldi r25,hi8(display_on.2138)
 1299 0010 0E94 0000 		call i2c_transmit_P.constprop.2
 1300               	.LVL105:
 1301               		.loc 1 477 12 view .LVU293
 1302 0014 892B      		or r24,r25
 1303 0016 01F0      		breq .L64
 1304               	.L63:
 478:drivers/oled/oled_driver.c ****             print("oled_on cmd failed\n");
 479:drivers/oled/oled_driver.c ****             return oled_active;
 480:drivers/oled/oled_driver.c ****         }
 481:drivers/oled/oled_driver.c ****         oled_active = true;
 482:drivers/oled/oled_driver.c ****     }
 483:drivers/oled/oled_driver.c ****     return oled_active;
 1305               		.loc 1 483 5 is_stmt 1 view .LVU294
 1306               		.loc 1 483 12 is_stmt 0 view .LVU295
 1307 0018 8091 0000 		lds r24,oled_active
 1308               	/* epilogue start */
 484:drivers/oled/oled_driver.c **** }
 1309               		.loc 1 484 1 view .LVU296
 1310 001c 0895      		ret
 1311               	.L64:
 481:drivers/oled/oled_driver.c ****     }
 1312               		.loc 1 481 9 is_stmt 1 view .LVU297
 481:drivers/oled/oled_driver.c ****     }
 1313               		.loc 1 481 21 is_stmt 0 view .LVU298
 1314 001e 81E0      		ldi r24,lo8(1)
 1315 0020 8093 0000 		sts oled_active,r24
 1316 0024 00C0      		rjmp .L63
 1317               		.cfi_endproc
 1318               	.LFE23:
 1320               		.section	.text.oled_render,"ax",@progbits
 1321               	.global	oled_render
 1323               	oled_render:
 1324               	.LFB12:
 270:drivers/oled/oled_driver.c ****     // Do we have work to do?
 1325               		.loc 1 270 24 is_stmt 1 view -0
 1326               		.cfi_startproc
 1327 0000 2F92      		push r2
 1328               	.LCFI26:
 1329               		.cfi_def_cfa_offset 3
 1330               		.cfi_offset 2, -2
 1331 0002 3F92      		push r3
 1332               	.LCFI27:
 1333               		.cfi_def_cfa_offset 4
 1334               		.cfi_offset 3, -3
 1335 0004 5F92      		push r5
 1336               	.LCFI28:
 1337               		.cfi_def_cfa_offset 5
 1338               		.cfi_offset 5, -4
 1339 0006 6F92      		push r6
 1340               	.LCFI29:
 1341               		.cfi_def_cfa_offset 6
 1342               		.cfi_offset 6, -5
 1343 0008 7F92      		push r7
 1344               	.LCFI30:
 1345               		.cfi_def_cfa_offset 7
 1346               		.cfi_offset 7, -6
 1347 000a 8F92      		push r8
 1348               	.LCFI31:
 1349               		.cfi_def_cfa_offset 8
 1350               		.cfi_offset 8, -7
 1351 000c 9F92      		push r9
 1352               	.LCFI32:
 1353               		.cfi_def_cfa_offset 9
 1354               		.cfi_offset 9, -8
 1355 000e AF92      		push r10
 1356               	.LCFI33:
 1357               		.cfi_def_cfa_offset 10
 1358               		.cfi_offset 10, -9
 1359 0010 BF92      		push r11
 1360               	.LCFI34:
 1361               		.cfi_def_cfa_offset 11
 1362               		.cfi_offset 11, -10
 1363 0012 CF92      		push r12
 1364               	.LCFI35:
 1365               		.cfi_def_cfa_offset 12
 1366               		.cfi_offset 12, -11
 1367 0014 DF92      		push r13
 1368               	.LCFI36:
 1369               		.cfi_def_cfa_offset 13
 1370               		.cfi_offset 13, -12
 1371 0016 EF92      		push r14
 1372               	.LCFI37:
 1373               		.cfi_def_cfa_offset 14
 1374               		.cfi_offset 14, -13
 1375 0018 FF92      		push r15
 1376               	.LCFI38:
 1377               		.cfi_def_cfa_offset 15
 1378               		.cfi_offset 15, -14
 1379 001a 0F93      		push r16
 1380               	.LCFI39:
 1381               		.cfi_def_cfa_offset 16
 1382               		.cfi_offset 16, -15
 1383 001c 1F93      		push r17
 1384               	.LCFI40:
 1385               		.cfi_def_cfa_offset 17
 1386               		.cfi_offset 17, -16
 1387 001e CF93      		push r28
 1388               	.LCFI41:
 1389               		.cfi_def_cfa_offset 18
 1390               		.cfi_offset 28, -17
 1391 0020 DF93      		push r29
 1392               	.LCFI42:
 1393               		.cfi_def_cfa_offset 19
 1394               		.cfi_offset 29, -18
 1395               	/* prologue: function */
 1396               	/* frame size = 0 */
 1397               	/* stack size = 17 */
 1398               	.L__stack_usage = 17
 272:drivers/oled/oled_driver.c ****         return;
 1399               		.loc 1 272 5 view .LVU300
 272:drivers/oled/oled_driver.c ****         return;
 1400               		.loc 1 272 9 is_stmt 0 view .LVU301
 1401 0022 2091 0000 		lds r18,oled_dirty
 1402 0026 3091 0000 		lds r19,oled_dirty+1
 272:drivers/oled/oled_driver.c ****         return;
 1403               		.loc 1 272 8 view .LVU302
 1404 002a 2115      		cp r18,__zero_reg__
 1405 002c 3105      		cpc r19,__zero_reg__
 1406 002e 01F0      		breq .L66
 272:drivers/oled/oled_driver.c ****         return;
 1407               		.loc 1 272 21 discriminator 1 view .LVU303
 1408 0030 8091 0000 		lds r24,oled_scrolling
 278:drivers/oled/oled_driver.c ****         ++update_start;
 1409               		.loc 1 278 30 discriminator 1 view .LVU304
 1410 0034 61E0      		ldi r22,lo8(1)
 1411 0036 70E0      		ldi r23,0
 272:drivers/oled/oled_driver.c ****         return;
 1412               		.loc 1 272 21 discriminator 1 view .LVU305
 1413 0038 8823      		tst r24
 1414 003a 01F0      		breq .L70
 1415               	.L66:
 1416               	/* epilogue start */
 325:drivers/oled/oled_driver.c **** 
 1417               		.loc 1 325 1 view .LVU306
 1418 003c DF91      		pop r29
 1419 003e CF91      		pop r28
 1420 0040 1F91      		pop r17
 1421 0042 0F91      		pop r16
 1422 0044 FF90      		pop r15
 1423 0046 EF90      		pop r14
 1424 0048 DF90      		pop r13
 1425 004a CF90      		pop r12
 1426 004c BF90      		pop r11
 1427 004e AF90      		pop r10
 1428 0050 9F90      		pop r9
 1429 0052 8F90      		pop r8
 1430 0054 7F90      		pop r7
 1431 0056 6F90      		pop r6
 1432 0058 5F90      		pop r5
 1433 005a 3F90      		pop r3
 1434 005c 2F90      		pop r2
 1435 005e 0895      		ret
 1436               	.LVL106:
 1437               	.L71:
 279:drivers/oled/oled_driver.c ****     }
 1438               		.loc 1 279 9 is_stmt 1 view .LVU307
 1439 0060 8F5F      		subi r24,lo8(-(1))
 1440               	.LVL107:
 1441               	.L70:
 278:drivers/oled/oled_driver.c ****         ++update_start;
 1442               		.loc 1 278 30 is_stmt 0 view .LVU308
 1443 0062 082F      		mov r16,r24
 1444 0064 10E0      		ldi r17,0
 1445 0066 1B01      		movw r2,r22
 1446 0068 082E      		mov r0,r24
 1447 006a 00C0      		rjmp 2f
 1448               		1:
 1449 006c 220C      		lsl r2
 1450 006e 331C      		rol r3
 1451               		2:
 1452 0070 0A94      		dec r0
 1453 0072 02F4      		brpl 1b
 278:drivers/oled/oled_driver.c ****         ++update_start;
 1454               		.loc 1 278 25 view .LVU309
 1455 0074 A101      		movw r20,r2
 1456 0076 4223      		and r20,r18
 1457 0078 5323      		and r21,r19
 278:drivers/oled/oled_driver.c ****         ++update_start;
 1458               		.loc 1 278 11 view .LVU310
 1459 007a 452B      		or r20,r21
 1460 007c 01F0      		breq .L71
 283:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 1461               		.loc 1 283 5 is_stmt 1 view .LVU311
 284:drivers/oled/oled_driver.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 1462               		.loc 1 284 5 view .LVU312
 284:drivers/oled/oled_driver.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 1463               		.loc 1 284 8 is_stmt 0 view .LVU313
 1464 007e 9091 0000 		lds r25,oled_rotation
 1465 0082 90FD      		sbrc r25,0
 1466 0084 00C0      		rjmp .L72
 285:drivers/oled/oled_driver.c ****     } else {
 1467               		.loc 1 285 9 is_stmt 1 view .LVU314
 1468               	.LVL108:
 1469               	.LBB40:
 1470               	.LBI40:
 225:drivers/oled/oled_driver.c ****     // Calculate commands to set memory addressing bounds.
 1471               		.loc 1 225 13 view .LVU315
 1472               	.LBB41:
 227:drivers/oled/oled_driver.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1473               		.loc 1 227 5 view .LVU316
 228:drivers/oled/oled_driver.c **** #if (OLED_IC == OLED_IC_SH1106)
 1474               		.loc 1 228 5 view .LVU317
 228:drivers/oled/oled_driver.c **** #if (OLED_IC == OLED_IC_SH1106)
 1475               		.loc 1 228 44 is_stmt 0 view .LVU318
 1476 0086 8295      		swap r24
 1477               	.LVL109:
 228:drivers/oled/oled_driver.c **** #if (OLED_IC == OLED_IC_SH1106)
 1478               		.loc 1 228 44 view .LVU319
 1479 0088 880F      		lsl r24
 228:drivers/oled/oled_driver.c **** #if (OLED_IC == OLED_IC_SH1106)
 1480               		.loc 1 228 13 view .LVU320
 1481 008a 8076      		andi r24,lo8(96)
 1482               	.LVL110:
 240:drivers/oled/oled_driver.c ****     cmd_array[4] = start_page;
 1483               		.loc 1 240 5 is_stmt 1 view .LVU321
 240:drivers/oled/oled_driver.c ****     cmd_array[4] = start_page;
 1484               		.loc 1 240 18 is_stmt 0 view .LVU322
 1485 008c 8093 0000 		sts display_start.2049+2,r24
 241:drivers/oled/oled_driver.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 1486               		.loc 1 241 5 is_stmt 1 view .LVU323
 227:drivers/oled/oled_driver.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1487               		.loc 1 227 59 is_stmt 0 view .LVU324
 1488 0090 9801      		movw r18,r16
 1489 0092 3695      		lsr r19
 1490 0094 2795      		ror r18
 1491 0096 3695      		lsr r19
 1492 0098 2795      		ror r18
 227:drivers/oled/oled_driver.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1493               		.loc 1 227 13 view .LVU325
 1494 009a 2093 0000 		sts display_start.2049+5,r18
 242:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1495               		.loc 1 242 5 is_stmt 1 view .LVU326
 242:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1496               		.loc 1 242 84 is_stmt 0 view .LVU327
 1497 009e 815E      		subi r24,lo8(-(31))
 1498               	.LVL111:
 242:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1499               		.loc 1 242 18 view .LVU328
 1500 00a0 8093 0000 		sts display_start.2049+3,r24
 243:drivers/oled/oled_driver.c **** #endif
 1501               		.loc 1 243 5 is_stmt 1 view .LVU329
 243:drivers/oled/oled_driver.c **** #endif
 1502               		.loc 1 243 18 is_stmt 0 view .LVU330
 1503 00a4 1092 0000 		sts display_start.2049+6,__zero_reg__
 1504               	.LVL112:
 1505               	.L73:
 243:drivers/oled/oled_driver.c **** #endif
 1506               		.loc 1 243 18 view .LVU331
 1507               	.LBE41:
 1508               	.LBE40:
 291:drivers/oled/oled_driver.c ****         print("oled_render offset command failed\n");
 1509               		.loc 1 291 5 is_stmt 1 view .LVU332
 291:drivers/oled/oled_driver.c ****         print("oled_render offset command failed\n");
 1510               		.loc 1 291 9 is_stmt 0 view .LVU333
 1511 00a8 24E6      		ldi r18,lo8(100)
 1512 00aa 30E0      		ldi r19,0
 1513 00ac 47E0      		ldi r20,lo8(7)
 1514 00ae 50E0      		ldi r21,0
 1515 00b0 60E0      		ldi r22,lo8(display_start.2049)
 1516 00b2 70E0      		ldi r23,hi8(display_start.2049)
 1517 00b4 88E7      		ldi r24,lo8(120)
 1518 00b6 0E94 0000 		call i2c_transmit
 1519               	.LVL113:
 291:drivers/oled/oled_driver.c ****         print("oled_render offset command failed\n");
 1520               		.loc 1 291 8 view .LVU334
 1521 00ba 892B      		or r24,r25
 1522 00bc 01F0      		breq .+2
 1523 00be 00C0      		rjmp .L66
 296:drivers/oled/oled_driver.c ****         // Send render data chunk as is
 1524               		.loc 1 296 5 is_stmt 1 view .LVU335
 1525 00c0 A801      		movw r20,r16
 1526 00c2 25E0      		ldi r18,5
 1527               		1:
 1528 00c4 440F      		lsl r20
 1529 00c6 551F      		rol r21
 1530 00c8 2A95      		dec r18
 1531 00ca 01F4      		brne 1b
 296:drivers/oled/oled_driver.c ****         // Send render data chunk as is
 1532               		.loc 1 296 8 is_stmt 0 view .LVU336
 1533 00cc 8091 0000 		lds r24,oled_rotation
 1534 00d0 80FD      		sbrc r24,0
 1535 00d2 00C0      		rjmp .L74
 298:drivers/oled/oled_driver.c ****             print("oled_render data failed\n");
 1536               		.loc 1 298 9 is_stmt 1 view .LVU337
 298:drivers/oled/oled_driver.c ****             print("oled_render data failed\n");
 1537               		.loc 1 298 13 is_stmt 0 view .LVU338
 1538 00d4 4050      		subi r20,lo8(-(oled_buffer))
 1539 00d6 5040      		sbci r21,hi8(-(oled_buffer))
 1540 00d8 04E6      		ldi r16,lo8(100)
 1541 00da 10E0      		ldi r17,0
 1542               	.LVL114:
 298:drivers/oled/oled_driver.c ****             print("oled_render data failed\n");
 1543               		.loc 1 298 13 view .LVU339
 1544 00dc 20E2      		ldi r18,lo8(32)
 1545 00de 30E0      		ldi r19,0
 1546               	.L82:
 1547 00e0 60E4      		ldi r22,lo8(64)
 1548 00e2 88E7      		ldi r24,lo8(120)
 1549 00e4 0E94 0000 		call i2c_writeReg
 1550               	.LVL115:
 298:drivers/oled/oled_driver.c ****             print("oled_render data failed\n");
 1551               		.loc 1 298 12 view .LVU340
 1552 00e8 892B      		or r24,r25
 1553 00ea 01F0      		breq .+2
 1554 00ec 00C0      		rjmp .L66
 321:drivers/oled/oled_driver.c **** 
 1555               		.loc 1 321 5 is_stmt 1 view .LVU341
 1556 00ee 0E94 0000 		call oled_on
 1557               	.LVL116:
 324:drivers/oled/oled_driver.c **** }
 1558               		.loc 1 324 5 view .LVU342
 324:drivers/oled/oled_driver.c **** }
 1559               		.loc 1 324 19 is_stmt 0 view .LVU343
 1560 00f2 E101      		movw r28,r2
 1561 00f4 C095      		com r28
 1562 00f6 D095      		com r29
 324:drivers/oled/oled_driver.c **** }
 1563               		.loc 1 324 16 view .LVU344
 1564 00f8 8091 0000 		lds r24,oled_dirty
 1565 00fc 9091 0000 		lds r25,oled_dirty+1
 1566 0100 C823      		and r28,r24
 1567 0102 D923      		and r29,r25
 1568 0104 D093 0000 		sts oled_dirty+1,r29
 1569 0108 C093 0000 		sts oled_dirty,r28
 1570 010c 00C0      		rjmp .L66
 1571               	.LVL117:
 1572               	.L72:
 287:drivers/oled/oled_driver.c ****     }
 1573               		.loc 1 287 9 is_stmt 1 view .LVU345
 1574               	.LBB42:
 1575               	.LBI42:
 247:drivers/oled/oled_driver.c ****     cmd_array[1] = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_HEIGHT * 8;
 1576               		.loc 1 247 13 view .LVU346
 1577               	.LBB43:
 248:drivers/oled/oled_driver.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 1578               		.loc 1 248 5 view .LVU347
 248:drivers/oled/oled_driver.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 1579               		.loc 1 248 73 is_stmt 0 view .LVU348
 1580 010e 880F      		lsl r24
 1581 0110 880F      		lsl r24
 1582 0112 880F      		lsl r24
 248:drivers/oled/oled_driver.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 1583               		.loc 1 248 18 view .LVU349
 1584 0114 8093 0000 		sts display_start.2049+2,r24
 249:drivers/oled/oled_driver.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 1585               		.loc 1 249 5 is_stmt 1 view .LVU350
 249:drivers/oled/oled_driver.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 1586               		.loc 1 249 18 is_stmt 0 view .LVU351
 1587 0118 1092 0000 		sts display_start.2049+5,__zero_reg__
 250:drivers/oled/oled_driver.c ****     ;
 1588               		.loc 1 250 5 is_stmt 1 view .LVU352
 250:drivers/oled/oled_driver.c ****     ;
 1589               		.loc 1 250 94 is_stmt 0 view .LVU353
 1590 011c 895F      		subi r24,lo8(-(7))
 250:drivers/oled/oled_driver.c ****     ;
 1591               		.loc 1 250 18 view .LVU354
 1592 011e 8093 0000 		sts display_start.2049+3,r24
 251:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) % OLED_DISPLAY_HEIGHT / 8;
 1593               		.loc 1 251 5 is_stmt 1 view .LVU355
 252:drivers/oled/oled_driver.c **** }
 1594               		.loc 1 252 5 view .LVU356
 252:drivers/oled/oled_driver.c **** }
 1595               		.loc 1 252 18 is_stmt 0 view .LVU357
 1596 0122 83E0      		ldi r24,lo8(3)
 1597 0124 8093 0000 		sts display_start.2049+6,r24
 1598 0128 00C0      		rjmp .L73
 1599               	.LVL118:
 1600               	.L74:
 252:drivers/oled/oled_driver.c **** }
 1601               		.loc 1 252 18 view .LVU358
 1602               	.LBE43:
 1603               	.LBE42:
 1604               	.LBB44:
 304:drivers/oled/oled_driver.c ****         const static uint8_t target_map[] = OLED_TARGET_MAP;
 1605               		.loc 1 304 9 is_stmt 1 view .LVU359
 305:drivers/oled/oled_driver.c **** 
 1606               		.loc 1 305 9 view .LVU360
 307:drivers/oled/oled_driver.c ****         memset(temp_buffer, 0, sizeof(temp_buffer));
 1607               		.loc 1 307 9 view .LVU361
 308:drivers/oled/oled_driver.c ****         for (uint8_t i = 0; i < sizeof(source_map); ++i) {
 1608               		.loc 1 308 9 view .LVU362
 1609 012a E0E0      		ldi r30,lo8(temp_buffer.2052)
 1610 012c F0E0      		ldi r31,hi8(temp_buffer.2052)
 1611 012e 80E2      		ldi r24,lo8(32)
 1612 0130 DF01      		movw r26,r30
 1613               		0:
 1614 0132 1D92      		st X+,__zero_reg__
 1615 0134 8A95      		dec r24
 1616 0136 01F4      		brne 0b
 309:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 1617               		.loc 1 309 9 view .LVU363
 1618               	.LBB45:
 309:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 1619               		.loc 1 309 14 view .LVU364
 1620               	.LVL119:
 309:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 1621               		.loc 1 309 14 is_stmt 0 view .LVU365
 1622 0138 A0E0      		ldi r26,lo8(target_map.2051)
 1623 013a B0E0      		ldi r27,hi8(target_map.2051)
 1624 013c 00E0      		ldi r16,lo8(source_map.2050)
 1625 013e 10E0      		ldi r17,hi8(source_map.2050)
 1626               	.LVL120:
 309:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 1627               		.loc 1 309 14 view .LVU366
 1628 0140 80E0      		ldi r24,lo8(target_map.2051+4)
 1629 0142 C82E      		mov r12,r24
 1630 0144 80E0      		ldi r24,hi8(target_map.2051+4)
 1631 0146 D82E      		mov r13,r24
 1632 0148 97E0      		ldi r25,lo8(7)
 1633 014a 592E      		mov r5,r25
 1634               	.LBB46:
 1635               	.LBB47:
 1636               	.LBB48:
 263:drivers/oled/oled_driver.c ****         for (uint8_t j = 0; j < 8; ++j) {
 1637               		.loc 1 263 31 view .LVU367
 1638 014c 7724      		clr r7
 1639 014e 7394      		inc r7
 1640               	.LVL121:
 1641               	.L77:
 263:drivers/oled/oled_driver.c ****         for (uint8_t j = 0; j < 8; ++j) {
 1642               		.loc 1 263 31 view .LVU368
 1643               	.LBE48:
 1644               	.LBE47:
 1645               	.LBE46:
 310:drivers/oled/oled_driver.c ****         }
 1646               		.loc 1 310 13 is_stmt 1 discriminator 3 view .LVU369
 310:drivers/oled/oled_driver.c ****         }
 1647               		.loc 1 310 108 is_stmt 0 discriminator 3 view .LVU370
 1648 0150 8D91      		ld r24,X+
 1649               	.LVL122:
 310:drivers/oled/oled_driver.c ****         }
 1650               		.loc 1 310 79 discriminator 3 view .LVU371
 1651 0152 E801      		movw r28,r16
 1652 0154 2991      		ld r18,Y+
 1653 0156 8E01      		movw r16,r28
 310:drivers/oled/oled_driver.c ****         }
 1654               		.loc 1 310 67 discriminator 3 view .LVU372
 1655 0158 240F      		add r18,r20
 1656 015a 352F      		mov r19,r21
 1657 015c 311D      		adc r19,__zero_reg__
 310:drivers/oled/oled_driver.c ****         }
 1658               		.loc 1 310 23 discriminator 3 view .LVU373
 1659 015e 2050      		subi r18,lo8(-(oled_buffer))
 1660 0160 3040      		sbci r19,hi8(-(oled_buffer))
 1661               	.LVL123:
 1662               	.LBB57:
 1663               	.LBI46:
 261:drivers/oled/oled_driver.c ****     for (uint8_t i = 0, shift = 7; i < 8; ++i, --shift) {
 1664               		.loc 1 261 13 is_stmt 1 discriminator 3 view .LVU374
 1665               	.LBE57:
 1666               	.LBE45:
 1667               	.LBE44:
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 1668               		.loc 1 262 5 discriminator 3 view .LVU375
 1669               	.LBB61:
 1670               	.LBB60:
 1671               	.LBB58:
 1672               	.LBB55:
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 1673               		.loc 1 262 10 discriminator 3 view .LVU376
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 1674               		.loc 1 262 10 is_stmt 0 discriminator 3 view .LVU377
 1675               	.LBE55:
 1676               	.LBE58:
 310:drivers/oled/oled_driver.c ****         }
 1677               		.loc 1 310 13 discriminator 3 view .LVU378
 1678 0162 E82F      		mov r30,r24
 1679 0164 F0E0      		ldi r31,0
 1680 0166 E050      		subi r30,lo8(-(temp_buffer.2052))
 1681 0168 F040      		sbci r31,hi8(-(temp_buffer.2052))
 310:drivers/oled/oled_driver.c ****         }
 1682               		.loc 1 310 23 discriminator 3 view .LVU379
 1683 016a 90E0      		ldi r25,0
 1684 016c 80E0      		ldi r24,0
 1685               	.LVL124:
 1686               	.L76:
 310:drivers/oled/oled_driver.c ****         }
 1687               		.loc 1 310 23 discriminator 3 view .LVU380
 1688 016e 652C      		mov r6,r5
 1689 0170 681A      		sub r6,r24
 1690               	.LVL125:
 1691               	.LBB59:
 1692               	.LBB56:
 1693               	.LBB54:
 263:drivers/oled/oled_driver.c ****         for (uint8_t j = 0; j < 8; ++j) {
 1694               		.loc 1 263 9 is_stmt 1 view .LVU381
 263:drivers/oled/oled_driver.c ****         for (uint8_t j = 0; j < 8; ++j) {
 1695               		.loc 1 263 17 is_stmt 0 view .LVU382
 1696 0172 872C      		mov r8,r7
 1697 0174 082E      		mov r0,r24
 1698 0176 00C0      		rjmp 2f
 1699               		1:
 1700 0178 880C      		lsl r8
 1701               		2:
 1702 017a 0A94      		dec r0
 1703 017c 02F4      		brpl 1b
 1704               	.LVL126:
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 1705               		.loc 1 264 9 is_stmt 1 view .LVU383
 1706               	.LBB49:
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 1707               		.loc 1 264 14 view .LVU384
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 1708               		.loc 1 264 14 is_stmt 0 view .LVU385
 1709 017e 7901      		movw r14,r18
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 1710               		.loc 1 264 22 view .LVU386
 1711 0180 A12C      		mov r10,__zero_reg__
 1712               	.LVL127:
 1713               	.L75:
 265:drivers/oled/oled_driver.c ****         }
 1714               		.loc 1 265 13 is_stmt 1 view .LVU387
 265:drivers/oled/oled_driver.c ****         }
 1715               		.loc 1 265 32 is_stmt 0 view .LVU388
 1716 0182 E701      		movw r28,r14
 1717 0184 B990      		ld r11,Y+
 1718 0186 7E01      		movw r14,r28
 1719               	.LVL128:
 1720               	.LBB50:
 1721               	.LBI50:
 255:drivers/oled/oled_driver.c ****     const uint8_t mask = 0x7;
 1722               		.loc 1 255 9 is_stmt 1 view .LVU389
 1723               	.LBB51:
 256:drivers/oled/oled_driver.c ****     n &= mask;
 1724               		.loc 1 256 5 view .LVU390
 257:drivers/oled/oled_driver.c ****     return a << n | a >> (-n & mask);
 1725               		.loc 1 257 5 view .LVU391
 258:drivers/oled/oled_driver.c **** }
 1726               		.loc 1 258 5 view .LVU392
 258:drivers/oled/oled_driver.c **** }
 1727               		.loc 1 258 5 is_stmt 0 view .LVU393
 1728               	.LBE51:
 1729               	.LBE50:
 265:drivers/oled/oled_driver.c ****         }
 1730               		.loc 1 265 24 view .LVU394
 1731 0188 B820      		and r11,r8
 1732               	.LBB53:
 1733               	.LBB52:
 257:drivers/oled/oled_driver.c ****     return a << n | a >> (-n & mask);
 1734               		.loc 1 257 7 view .LVU395
 1735 018a 662D      		mov r22,r6
 1736 018c 6A19      		sub r22,r10
 1737 018e 6770      		andi r22,lo8(7)
 1738 0190 962E      		mov r9,r22
 258:drivers/oled/oled_driver.c **** }
 1739               		.loc 1 258 14 view .LVU396
 1740 0192 062E      		mov __tmp_reg__,r22
 1741 0194 000C      		lsl r0
 1742 0196 770B      		sbc r23,r23
 1743               	.LBE52:
 1744               	.LBE53:
 265:drivers/oled/oled_driver.c ****         }
 1745               		.loc 1 265 21 view .LVU397
 1746 0198 DB2D      		mov r29,r11
 1747 019a 00C0      		rjmp 2f
 1748               		1:
 1749 019c DD0F      		lsl r29
 1750               		2:
 1751 019e 9A94      		dec r9
 1752 01a0 02F4      		brpl 1b
 1753 01a2 7195      		neg r23
 1754 01a4 6195      		neg r22
 1755 01a6 7109      		sbc r23,__zero_reg__
 1756 01a8 6770      		andi r22,7
 1757 01aa 7727      		clr r23
 1758 01ac 00C0      		rjmp 2f
 1759               		1:
 1760 01ae B694      		lsr r11
 1761               		2:
 1762 01b0 6A95      		dec r22
 1763 01b2 02F4      		brpl 1b
 1764 01b4 BD2A      		or r11,r29
 1765 01b6 6081      		ld r22,Z
 1766 01b8 962E      		mov r9,r22
 1767 01ba 9B28      		or r9,r11
 1768 01bc 9082      		st Z,r9
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 1769               		.loc 1 264 36 view .LVU398
 1770 01be A394      		inc r10
 1771               	.LVL129:
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 1772               		.loc 1 264 9 view .LVU399
 1773 01c0 68E0      		ldi r22,lo8(8)
 1774 01c2 A612      		cpse r10,r22
 1775 01c4 00C0      		rjmp .L75
 1776               	.LVL130:
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 1777               		.loc 1 264 9 view .LVU400
 1778 01c6 0196      		adiw r24,1
 1779               	.LVL131:
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 1780               		.loc 1 264 9 view .LVU401
 1781 01c8 3196      		adiw r30,1
 1782               	.LBE49:
 1783               	.LBE54:
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 1784               		.loc 1 262 5 view .LVU402
 1785 01ca 8830      		cpi r24,8
 1786 01cc 9105      		cpc r25,__zero_reg__
 1787 01ce 01F4      		brne .L76
 1788               	.LVL132:
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 1789               		.loc 1 262 5 view .LVU403
 1790               	.LBE56:
 1791               	.LBE59:
 309:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 1792               		.loc 1 309 9 discriminator 3 view .LVU404
 1793 01d0 CA16      		cp r12,r26
 1794 01d2 DB06      		cpc r13,r27
 1795 01d4 01F0      		breq .+2
 1796 01d6 00C0      		rjmp .L77
 1797               	.LBE60:
 314:drivers/oled/oled_driver.c ****             print("oled_render90 data failed\n");
 1798               		.loc 1 314 9 is_stmt 1 view .LVU405
 314:drivers/oled/oled_driver.c ****             print("oled_render90 data failed\n");
 1799               		.loc 1 314 13 is_stmt 0 view .LVU406
 1800 01d8 04E6      		ldi r16,lo8(100)
 1801 01da 10E0      		ldi r17,0
 1802 01dc 20E2      		ldi r18,lo8(32)
 1803 01de 30E0      		ldi r19,0
 1804 01e0 40E0      		ldi r20,lo8(temp_buffer.2052)
 1805 01e2 50E0      		ldi r21,hi8(temp_buffer.2052)
 1806 01e4 00C0      		rjmp .L82
 1807               	.LBE61:
 1808               		.cfi_endproc
 1809               	.LFE12:
 1811               		.section	.text.oled_off,"ax",@progbits
 1812               	.global	oled_off
 1814               	oled_off:
 1815               	.LFB24:
 485:drivers/oled/oled_driver.c **** 
 486:drivers/oled/oled_driver.c **** bool oled_off(void) {
 1816               		.loc 1 486 21 is_stmt 1 view -0
 1817               		.cfi_startproc
 1818               	/* prologue: function */
 1819               	/* frame size = 0 */
 1820               	/* stack size = 0 */
 1821               	.L__stack_usage = 0
 487:drivers/oled/oled_driver.c ****     static const uint8_t PROGMEM display_off[] = {I2C_CMD, DISPLAY_OFF};
 1822               		.loc 1 487 5 view .LVU408
 488:drivers/oled/oled_driver.c ****     if (oled_active) {
 1823               		.loc 1 488 5 view .LVU409
 1824               		.loc 1 488 8 is_stmt 0 view .LVU410
 1825 0000 8091 0000 		lds r24,oled_active
 1826 0004 8823      		tst r24
 1827 0006 01F0      		breq .L84
 489:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 1828               		.loc 1 489 9 is_stmt 1 view .LVU411
 1829               		.loc 1 489 13 is_stmt 0 view .LVU412
 1830 0008 62E0      		ldi r22,lo8(2)
 1831 000a 70E0      		ldi r23,0
 1832 000c 80E0      		ldi r24,lo8(display_off.2142)
 1833 000e 90E0      		ldi r25,hi8(display_off.2142)
 1834 0010 0E94 0000 		call i2c_transmit_P.constprop.2
 1835               	.LVL133:
 1836               		.loc 1 489 12 view .LVU413
 1837 0014 892B      		or r24,r25
 1838 0016 01F0      		breq .L85
 490:drivers/oled/oled_driver.c ****             print("oled_off cmd failed\n");
 1839               		.loc 1 490 43 is_stmt 1 view .LVU414
 491:drivers/oled/oled_driver.c ****             return oled_active;
 1840               		.loc 1 491 13 view .LVU415
 1841               		.loc 1 491 20 is_stmt 0 view .LVU416
 1842 0018 8091 0000 		lds r24,oled_active
 1843 001c 0895      		ret
 1844               	.L85:
 492:drivers/oled/oled_driver.c ****         }
 493:drivers/oled/oled_driver.c ****         oled_active = false;
 1845               		.loc 1 493 9 is_stmt 1 view .LVU417
 1846               		.loc 1 493 21 is_stmt 0 view .LVU418
 1847 001e 1092 0000 		sts oled_active,__zero_reg__
 1848               	.L84:
 494:drivers/oled/oled_driver.c ****     }
 495:drivers/oled/oled_driver.c ****     return !oled_active;
 1849               		.loc 1 495 5 is_stmt 1 view .LVU419
 1850 0022 8091 0000 		lds r24,oled_active
 1851 0026 91E0      		ldi r25,lo8(1)
 1852 0028 8927      		eor r24,r25
 1853               	/* epilogue start */
 496:drivers/oled/oled_driver.c **** }
 1854               		.loc 1 496 1 is_stmt 0 view .LVU420
 1855 002a 0895      		ret
 1856               		.cfi_endproc
 1857               	.LFE24:
 1859               		.section	.text.oled_scroll_right,"ax",@progbits
 1860               	.global	oled_scroll_right
 1862               	oled_scroll_right:
 1863               	.LFB25:
 497:drivers/oled/oled_driver.c **** 
 498:drivers/oled/oled_driver.c **** bool oled_scroll_right(void) {
 1864               		.loc 1 498 30 is_stmt 1 view -0
 1865               		.cfi_startproc
 1866               	/* prologue: function */
 1867               	/* frame size = 0 */
 1868               	/* stack size = 0 */
 1869               	.L__stack_usage = 0
 499:drivers/oled/oled_driver.c ****     // Dont enable scrolling if we need to update the display
 500:drivers/oled/oled_driver.c ****     // This prevents scrolling of bad data from starting the scroll too early after init
 501:drivers/oled/oled_driver.c ****     if (!oled_dirty && !oled_scrolling) {
 1870               		.loc 1 501 5 view .LVU422
 1871               		.loc 1 501 8 is_stmt 0 view .LVU423
 1872 0000 8091 0000 		lds r24,oled_dirty
 1873 0004 9091 0000 		lds r25,oled_dirty+1
 1874 0008 892B      		or r24,r25
 1875 000a 01F4      		brne .L91
 1876               		.loc 1 501 21 discriminator 1 view .LVU424
 1877 000c 8091 0000 		lds r24,oled_scrolling
 1878 0010 8111      		cpse r24,__zero_reg__
 1879 0012 00C0      		rjmp .L91
 1880               	.LBB62:
 502:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_scroll_right[] = {I2C_CMD, SCROLL_RIGHT, 0x00, 0x00, 0
 1881               		.loc 1 502 9 is_stmt 1 view .LVU425
 503:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_scroll_right) != I2C_STATUS_SUCCESS) {
 1882               		.loc 1 503 9 view .LVU426
 1883               		.loc 1 503 13 is_stmt 0 view .LVU427
 1884 0014 69E0      		ldi r22,lo8(9)
 1885 0016 70E0      		ldi r23,0
 1886 0018 80E0      		ldi r24,lo8(display_scroll_right.2146)
 1887 001a 90E0      		ldi r25,hi8(display_scroll_right.2146)
 1888 001c 0E94 0000 		call i2c_transmit_P.constprop.2
 1889               	.LVL134:
 1890               		.loc 1 503 12 view .LVU428
 1891 0020 892B      		or r24,r25
 1892 0022 01F0      		breq .L92
 1893               	.L91:
 1894               	.LBE62:
 504:drivers/oled/oled_driver.c ****             print("oled_scroll_right cmd failed\n");
 505:drivers/oled/oled_driver.c ****             return oled_scrolling;
 506:drivers/oled/oled_driver.c ****         }
 507:drivers/oled/oled_driver.c ****         oled_scrolling = true;
 508:drivers/oled/oled_driver.c ****     }
 509:drivers/oled/oled_driver.c ****     return oled_scrolling;
 1895               		.loc 1 509 5 is_stmt 1 view .LVU429
 1896               		.loc 1 509 12 is_stmt 0 view .LVU430
 1897 0024 8091 0000 		lds r24,oled_scrolling
 1898               	/* epilogue start */
 510:drivers/oled/oled_driver.c **** }
 1899               		.loc 1 510 1 view .LVU431
 1900 0028 0895      		ret
 1901               	.L92:
 1902               	.LBB63:
 507:drivers/oled/oled_driver.c ****     }
 1903               		.loc 1 507 9 is_stmt 1 view .LVU432
 507:drivers/oled/oled_driver.c ****     }
 1904               		.loc 1 507 24 is_stmt 0 view .LVU433
 1905 002a 81E0      		ldi r24,lo8(1)
 1906 002c 8093 0000 		sts oled_scrolling,r24
 1907 0030 00C0      		rjmp .L91
 1908               	.LBE63:
 1909               		.cfi_endproc
 1910               	.LFE25:
 1912               		.section	.text.oled_scroll_left,"ax",@progbits
 1913               	.global	oled_scroll_left
 1915               	oled_scroll_left:
 1916               	.LFB26:
 511:drivers/oled/oled_driver.c **** 
 512:drivers/oled/oled_driver.c **** bool oled_scroll_left(void) {
 1917               		.loc 1 512 29 is_stmt 1 view -0
 1918               		.cfi_startproc
 1919               	/* prologue: function */
 1920               	/* frame size = 0 */
 1921               	/* stack size = 0 */
 1922               	.L__stack_usage = 0
 513:drivers/oled/oled_driver.c ****     // Dont enable scrolling if we need to update the display
 514:drivers/oled/oled_driver.c ****     // This prevents scrolling of bad data from starting the scroll too early after init
 515:drivers/oled/oled_driver.c ****     if (!oled_dirty && !oled_scrolling) {
 1923               		.loc 1 515 5 view .LVU435
 1924               		.loc 1 515 8 is_stmt 0 view .LVU436
 1925 0000 8091 0000 		lds r24,oled_dirty
 1926 0004 9091 0000 		lds r25,oled_dirty+1
 1927 0008 892B      		or r24,r25
 1928 000a 01F4      		brne .L95
 1929               		.loc 1 515 21 discriminator 1 view .LVU437
 1930 000c 8091 0000 		lds r24,oled_scrolling
 1931 0010 8111      		cpse r24,__zero_reg__
 1932 0012 00C0      		rjmp .L95
 1933               	.LBB64:
 516:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_scroll_left[] = {I2C_CMD, SCROLL_LEFT, 0x00, 0x00, 0x0
 1934               		.loc 1 516 9 is_stmt 1 view .LVU438
 517:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_scroll_left) != I2C_STATUS_SUCCESS) {
 1935               		.loc 1 517 9 view .LVU439
 1936               		.loc 1 517 13 is_stmt 0 view .LVU440
 1937 0014 69E0      		ldi r22,lo8(9)
 1938 0016 70E0      		ldi r23,0
 1939 0018 80E0      		ldi r24,lo8(display_scroll_left.2150)
 1940 001a 90E0      		ldi r25,hi8(display_scroll_left.2150)
 1941 001c 0E94 0000 		call i2c_transmit_P.constprop.2
 1942               	.LVL135:
 1943               		.loc 1 517 12 view .LVU441
 1944 0020 892B      		or r24,r25
 1945 0022 01F0      		breq .L96
 1946               	.L95:
 1947               	.LBE64:
 518:drivers/oled/oled_driver.c ****             print("oled_scroll_left cmd failed\n");
 519:drivers/oled/oled_driver.c ****             return oled_scrolling;
 520:drivers/oled/oled_driver.c ****         }
 521:drivers/oled/oled_driver.c ****         oled_scrolling = true;
 522:drivers/oled/oled_driver.c ****     }
 523:drivers/oled/oled_driver.c ****     return oled_scrolling;
 1948               		.loc 1 523 5 is_stmt 1 view .LVU442
 1949               		.loc 1 523 12 is_stmt 0 view .LVU443
 1950 0024 8091 0000 		lds r24,oled_scrolling
 1951               	/* epilogue start */
 524:drivers/oled/oled_driver.c **** }
 1952               		.loc 1 524 1 view .LVU444
 1953 0028 0895      		ret
 1954               	.L96:
 1955               	.LBB65:
 521:drivers/oled/oled_driver.c ****     }
 1956               		.loc 1 521 9 is_stmt 1 view .LVU445
 521:drivers/oled/oled_driver.c ****     }
 1957               		.loc 1 521 24 is_stmt 0 view .LVU446
 1958 002a 81E0      		ldi r24,lo8(1)
 1959 002c 8093 0000 		sts oled_scrolling,r24
 1960 0030 00C0      		rjmp .L95
 1961               	.LBE65:
 1962               		.cfi_endproc
 1963               	.LFE26:
 1965               		.section	.text.oled_scroll_off,"ax",@progbits
 1966               	.global	oled_scroll_off
 1968               	oled_scroll_off:
 1969               	.LFB27:
 525:drivers/oled/oled_driver.c **** 
 526:drivers/oled/oled_driver.c **** bool oled_scroll_off(void) {
 1970               		.loc 1 526 28 is_stmt 1 view -0
 1971               		.cfi_startproc
 1972               	/* prologue: function */
 1973               	/* frame size = 0 */
 1974               	/* stack size = 0 */
 1975               	.L__stack_usage = 0
 527:drivers/oled/oled_driver.c ****     if (oled_scrolling) {
 1976               		.loc 1 527 5 view .LVU448
 1977               		.loc 1 527 8 is_stmt 0 view .LVU449
 1978 0000 8091 0000 		lds r24,oled_scrolling
 1979 0004 8823      		tst r24
 1980 0006 01F0      		breq .L99
 1981               	.LBB66:
 528:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 1982               		.loc 1 528 9 is_stmt 1 view .LVU450
 529:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_scroll_off) != I2C_STATUS_SUCCESS) {
 1983               		.loc 1 529 9 view .LVU451
 1984               		.loc 1 529 13 is_stmt 0 view .LVU452
 1985 0008 62E0      		ldi r22,lo8(2)
 1986 000a 70E0      		ldi r23,0
 1987 000c 80E0      		ldi r24,lo8(display_scroll_off.2154)
 1988 000e 90E0      		ldi r25,hi8(display_scroll_off.2154)
 1989 0010 0E94 0000 		call i2c_transmit_P.constprop.2
 1990               	.LVL136:
 1991               		.loc 1 529 12 view .LVU453
 1992 0014 892B      		or r24,r25
 1993 0016 01F0      		breq .L100
 530:drivers/oled/oled_driver.c ****             print("oled_scroll_off cmd failed\n");
 1994               		.loc 1 530 50 is_stmt 1 view .LVU454
 531:drivers/oled/oled_driver.c ****             return oled_scrolling;
 1995               		.loc 1 531 13 view .LVU455
 1996               		.loc 1 531 20 is_stmt 0 view .LVU456
 1997 0018 8091 0000 		lds r24,oled_scrolling
 1998 001c 0895      		ret
 1999               	.L100:
 532:drivers/oled/oled_driver.c ****         }
 533:drivers/oled/oled_driver.c ****         oled_scrolling = false;
 2000               		.loc 1 533 9 is_stmt 1 view .LVU457
 2001               		.loc 1 533 24 is_stmt 0 view .LVU458
 2002 001e 1092 0000 		sts oled_scrolling,__zero_reg__
 534:drivers/oled/oled_driver.c ****         oled_dirty     = -1;
 2003               		.loc 1 534 9 is_stmt 1 view .LVU459
 2004               		.loc 1 534 24 is_stmt 0 view .LVU460
 2005 0022 8FEF      		ldi r24,lo8(-1)
 2006 0024 9FEF      		ldi r25,lo8(-1)
 2007 0026 9093 0000 		sts oled_dirty+1,r25
 2008 002a 8093 0000 		sts oled_dirty,r24
 2009               	.L99:
 2010               	.LBE66:
 535:drivers/oled/oled_driver.c ****     }
 536:drivers/oled/oled_driver.c ****     return !oled_scrolling;
 2011               		.loc 1 536 5 is_stmt 1 view .LVU461
 2012 002e 8091 0000 		lds r24,oled_scrolling
 2013 0032 91E0      		ldi r25,lo8(1)
 2014 0034 8927      		eor r24,r25
 2015               	/* epilogue start */
 537:drivers/oled/oled_driver.c **** }
 2016               		.loc 1 537 1 is_stmt 0 view .LVU462
 2017 0036 0895      		ret
 2018               		.cfi_endproc
 2019               	.LFE27:
 2021               		.section	.text.oled_max_chars,"ax",@progbits
 2022               	.global	oled_max_chars
 2024               	oled_max_chars:
 2025               	.LFB28:
 538:drivers/oled/oled_driver.c **** 
 539:drivers/oled/oled_driver.c **** uint8_t oled_max_chars(void) {
 2026               		.loc 1 539 30 is_stmt 1 view -0
 2027               		.cfi_startproc
 2028               	/* prologue: function */
 2029               	/* frame size = 0 */
 2030               	/* stack size = 0 */
 2031               	.L__stack_usage = 0
 540:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 2032               		.loc 1 540 5 view .LVU464
 2033               		.loc 1 540 8 is_stmt 0 view .LVU465
 2034 0000 8091 0000 		lds r24,oled_rotation
 2035 0004 80FD      		sbrc r24,0
 2036 0006 00C0      		rjmp .L107
 541:drivers/oled/oled_driver.c ****         return OLED_DISPLAY_WIDTH / OLED_FONT_WIDTH;
 2037               		.loc 1 541 16 view .LVU466
 2038 0008 85E1      		ldi r24,lo8(21)
 2039 000a 0895      		ret
 2040               	.L107:
 542:drivers/oled/oled_driver.c ****     }
 543:drivers/oled/oled_driver.c ****     return OLED_DISPLAY_HEIGHT / OLED_FONT_WIDTH;
 2041               		.loc 1 543 12 view .LVU467
 2042 000c 85E0      		ldi r24,lo8(5)
 2043               	/* epilogue start */
 544:drivers/oled/oled_driver.c **** }
 2044               		.loc 1 544 1 view .LVU468
 2045 000e 0895      		ret
 2046               		.cfi_endproc
 2047               	.LFE28:
 2049               		.section	.text.oled_max_lines,"ax",@progbits
 2050               	.global	oled_max_lines
 2052               	oled_max_lines:
 2053               	.LFB29:
 545:drivers/oled/oled_driver.c **** 
 546:drivers/oled/oled_driver.c **** uint8_t oled_max_lines(void) {
 2054               		.loc 1 546 30 is_stmt 1 view -0
 2055               		.cfi_startproc
 2056               	/* prologue: function */
 2057               	/* frame size = 0 */
 2058               	/* stack size = 0 */
 2059               	.L__stack_usage = 0
 547:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 2060               		.loc 1 547 5 view .LVU470
 2061               		.loc 1 547 8 is_stmt 0 view .LVU471
 2062 0000 8091 0000 		lds r24,oled_rotation
 2063 0004 80FD      		sbrc r24,0
 2064 0006 00C0      		rjmp .L110
 548:drivers/oled/oled_driver.c ****         return OLED_DISPLAY_HEIGHT / OLED_FONT_HEIGHT;
 2065               		.loc 1 548 16 view .LVU472
 2066 0008 84E0      		ldi r24,lo8(4)
 2067 000a 0895      		ret
 2068               	.L110:
 549:drivers/oled/oled_driver.c ****     }
 550:drivers/oled/oled_driver.c ****     return OLED_DISPLAY_WIDTH / OLED_FONT_HEIGHT;
 2069               		.loc 1 550 12 view .LVU473
 2070 000c 80E1      		ldi r24,lo8(16)
 2071               	/* epilogue start */
 551:drivers/oled/oled_driver.c **** }
 2072               		.loc 1 551 1 view .LVU474
 2073 000e 0895      		ret
 2074               		.cfi_endproc
 2075               	.LFE29:
 2077               		.section	.text.oled_task_user,"ax",@progbits
 2078               		.weak	oled_task_user
 2080               	oled_task_user:
 2081               	.LFB31:
 552:drivers/oled/oled_driver.c **** 
 553:drivers/oled/oled_driver.c **** void oled_task(void) {
 554:drivers/oled/oled_driver.c ****     if (!oled_initialized) {
 555:drivers/oled/oled_driver.c ****         return;
 556:drivers/oled/oled_driver.c ****     }
 557:drivers/oled/oled_driver.c **** 
 558:drivers/oled/oled_driver.c ****     oled_set_cursor(0, 0);
 559:drivers/oled/oled_driver.c **** 
 560:drivers/oled/oled_driver.c ****     oled_task_user();
 561:drivers/oled/oled_driver.c **** 
 562:drivers/oled/oled_driver.c **** #if OLED_SCROLL_TIMEOUT > 0
 563:drivers/oled/oled_driver.c ****     if (oled_dirty && oled_scrolling) {
 564:drivers/oled/oled_driver.c ****         oled_scroll_timeout = timer_read32() + OLED_SCROLL_TIMEOUT;
 565:drivers/oled/oled_driver.c ****         oled_scroll_off();
 566:drivers/oled/oled_driver.c ****     }
 567:drivers/oled/oled_driver.c **** #endif
 568:drivers/oled/oled_driver.c **** 
 569:drivers/oled/oled_driver.c ****     // Smart render system, no need to check for dirty
 570:drivers/oled/oled_driver.c ****     oled_render();
 571:drivers/oled/oled_driver.c **** 
 572:drivers/oled/oled_driver.c ****     // Display timeout check
 573:drivers/oled/oled_driver.c **** #if OLED_TIMEOUT > 0
 574:drivers/oled/oled_driver.c ****     if (oled_active && timer_expired32(timer_read32(), oled_timeout)) {
 575:drivers/oled/oled_driver.c ****         oled_off();
 576:drivers/oled/oled_driver.c ****     }
 577:drivers/oled/oled_driver.c **** #endif
 578:drivers/oled/oled_driver.c **** 
 579:drivers/oled/oled_driver.c **** #if OLED_SCROLL_TIMEOUT > 0
 580:drivers/oled/oled_driver.c ****     if (!oled_scrolling && timer_expired32(timer_read32(), oled_scroll_timeout)) {
 581:drivers/oled/oled_driver.c **** #    ifdef OLED_SCROLL_TIMEOUT_RIGHT
 582:drivers/oled/oled_driver.c ****         oled_scroll_right();
 583:drivers/oled/oled_driver.c **** #    else
 584:drivers/oled/oled_driver.c ****         oled_scroll_left();
 585:drivers/oled/oled_driver.c **** #    endif
 586:drivers/oled/oled_driver.c ****     }
 587:drivers/oled/oled_driver.c **** #endif
 588:drivers/oled/oled_driver.c **** }
 589:drivers/oled/oled_driver.c **** 
 590:drivers/oled/oled_driver.c **** __attribute__((weak)) void oled_task_user(void) {}
 2082               		.loc 1 590 49 is_stmt 1 view -0
 2083               		.cfi_startproc
 2084               	/* prologue: function */
 2085               	/* frame size = 0 */
 2086               	/* stack size = 0 */
 2087               	.L__stack_usage = 0
 2088               		.loc 1 590 50 view .LVU476
 2089               	/* epilogue start */
 2090               		.loc 1 590 1 is_stmt 0 view .LVU477
 2091 0000 0895      		ret
 2092               		.cfi_endproc
 2093               	.LFE31:
 2095               		.section	.text.oled_task,"ax",@progbits
 2096               	.global	oled_task
 2098               	oled_task:
 2099               	.LFB30:
 553:drivers/oled/oled_driver.c ****     if (!oled_initialized) {
 2100               		.loc 1 553 22 is_stmt 1 view -0
 2101               		.cfi_startproc
 2102               	/* prologue: function */
 2103               	/* frame size = 0 */
 2104               	/* stack size = 0 */
 2105               	.L__stack_usage = 0
 554:drivers/oled/oled_driver.c ****         return;
 2106               		.loc 1 554 5 view .LVU479
 554:drivers/oled/oled_driver.c ****         return;
 2107               		.loc 1 554 8 is_stmt 0 view .LVU480
 2108 0000 8091 0000 		lds r24,oled_initialized
 2109 0004 8823      		tst r24
 2110 0006 01F0      		breq .L112
 558:drivers/oled/oled_driver.c **** 
 2111               		.loc 1 558 5 is_stmt 1 view .LVU481
 2112 0008 60E0      		ldi r22,0
 2113 000a 80E0      		ldi r24,0
 2114 000c 0E94 0000 		call oled_set_cursor
 2115               	.LVL137:
 560:drivers/oled/oled_driver.c **** 
 2116               		.loc 1 560 5 view .LVU482
 2117 0010 0E94 0000 		call oled_task_user
 2118               	.LVL138:
 570:drivers/oled/oled_driver.c **** 
 2119               		.loc 1 570 5 view .LVU483
 2120 0014 0C94 0000 		jmp oled_render
 2121               	.LVL139:
 2122               	.L112:
 2123               	/* epilogue start */
 588:drivers/oled/oled_driver.c **** 
 2124               		.loc 1 588 1 is_stmt 0 view .LVU484
 2125 0018 0895      		ret
 2126               		.cfi_endproc
 2127               	.LFE30:
 2129               		.section	.progmem.data.display_scroll_off.2154,"a"
 2132               	display_scroll_off.2154:
 2133 0000 00        		.byte	0
 2134 0001 2E        		.byte	46
 2135               		.section	.progmem.data.display_scroll_left.2150,"a"
 2138               	display_scroll_left.2150:
 2139 0000 00        		.byte	0
 2140 0001 27        		.byte	39
 2141 0002 00        		.byte	0
 2142 0003 00        		.byte	0
 2143 0004 00        		.byte	0
 2144 0005 0F        		.byte	15
 2145 0006 00        		.byte	0
 2146 0007 FF        		.byte	-1
 2147 0008 2F        		.byte	47
 2148               		.section	.progmem.data.display_scroll_right.2146,"a"
 2151               	display_scroll_right.2146:
 2152 0000 00        		.byte	0
 2153 0001 26        		.byte	38
 2154 0002 00        		.byte	0
 2155 0003 00        		.byte	0
 2156 0004 00        		.byte	0
 2157 0005 0F        		.byte	15
 2158 0006 00        		.byte	0
 2159 0007 FF        		.byte	-1
 2160 0008 2F        		.byte	47
 2161               		.section	.progmem.data.display_off.2142,"a"
 2164               	display_off.2142:
 2165 0000 00        		.byte	0
 2166 0001 AE        		.byte	-82
 2167               		.section	.progmem.data.display_on.2138,"a"
 2170               	display_on.2138:
 2171 0000 00        		.byte	0
 2172 0001 AF        		.byte	-81
 2173               		.section	.bss.oled_temp_buffer.2079,"aw",@nobits
 2176               	oled_temp_buffer.2079:
 2177 0000 0000 0000 		.zero	6
 2177      0000 
 2178               		.section	.rodata.source_map.2050,"a"
 2181               	source_map.2050:
 2182 0000 00        		.byte	0
 2183 0001 08        		.byte	8
 2184 0002 10        		.byte	16
 2185 0003 18        		.byte	24
 2186               		.section	.rodata.target_map.2051,"a"
 2189               	target_map.2051:
 2190 0000 18        		.byte	24
 2191 0001 10        		.byte	16
 2192 0002 08        		.byte	8
 2193 0003 00        		.byte	0
 2194               		.section	.bss.temp_buffer.2052,"aw",@nobits
 2197               	temp_buffer.2052:
 2198 0000 0000 0000 		.zero	32
 2198      0000 0000 
 2198      0000 0000 
 2198      0000 0000 
 2198      0000 0000 
 2199               		.section	.data.display_start.2049,"aw"
 2202               	display_start.2049:
 2203 0000 00        		.byte	0
 2204 0001 21        		.byte	33
 2205 0002 00        		.byte	0
 2206 0003 7F        		.byte	127
 2207 0004 22        		.byte	34
 2208 0005 00        		.byte	0
 2209 0006 03        		.byte	3
 2210               		.section	.progmem.data.display_setup2.2006,"a"
 2213               	display_setup2.2006:
 2214 0000 00        		.byte	0
 2215 0001 DA        		.byte	-38
 2216 0002 02        		.byte	2
 2217 0003 81        		.byte	-127
 2218 0004 8F        		.byte	-113
 2219 0005 D9        		.byte	-39
 2220 0006 F1        		.byte	-15
 2221 0007 DB        		.byte	-37
 2222 0008 40        		.byte	64
 2223 0009 A4        		.byte	-92
 2224 000a A6        		.byte	-90
 2225 000b 2E        		.byte	46
 2226 000c AF        		.byte	-81
 2227               		.section	.progmem.data.display_flipped.2005,"a"
 2230               	display_flipped.2005:
 2231 0000 00        		.byte	0
 2232 0001 A0        		.byte	-96
 2233 0002 C0        		.byte	-64
 2234               		.section	.progmem.data.display_normal.2004,"a"
 2237               	display_normal.2004:
 2238 0000 00        		.byte	0
 2239 0001 A1        		.byte	-95
 2240 0002 C8        		.byte	-56
 2241               		.section	.progmem.data.display_setup1.2003,"a"
 2244               	display_setup1.2003:
 2245 0000 00        		.byte	0
 2246 0001 AE        		.byte	-82
 2247 0002 D5        		.byte	-43
 2248 0003 80        		.byte	-128
 2249 0004 A8        		.byte	-88
 2250 0005 1F        		.byte	31
 2251 0006 D3        		.byte	-45
 2252 0007 00        		.byte	0
 2253 0008 40        		.byte	64
 2254 0009 8D        		.byte	-115
 2255 000a 14        		.byte	20
 2256 000b 20        		.byte	32
 2257 000c 00        		.byte	0
 2258               	.global	oled_rotation_width
 2259               		.section	.bss.oled_rotation_width,"aw",@nobits
 2262               	oled_rotation_width:
 2263 0000 00        		.zero	1
 2264               	.global	oled_rotation
 2265               		.section	.bss.oled_rotation,"aw",@nobits
 2268               	oled_rotation:
 2269 0000 00        		.zero	1
 2270               	.global	oled_scrolling
 2271               		.section	.bss.oled_scrolling,"aw",@nobits
 2274               	oled_scrolling:
 2275 0000 00        		.zero	1
 2276               	.global	oled_active
 2277               		.section	.bss.oled_active,"aw",@nobits
 2280               	oled_active:
 2281 0000 00        		.zero	1
 2282               	.global	oled_initialized
 2283               		.section	.bss.oled_initialized,"aw",@nobits
 2286               	oled_initialized:
 2287 0000 00        		.zero	1
 2288               	.global	oled_dirty
 2289               		.section	.bss.oled_dirty,"aw",@nobits
 2292               	oled_dirty:
 2293 0000 0000      		.zero	2
 2294               		.comm	oled_cursor,2,1
 2295               		.comm	oled_buffer,512,1
 2296               		.section	.progmem.data.font,"a"
 2299               	font:
 2300 0000 00        		.byte	0
 2301 0001 00        		.byte	0
 2302 0002 00        		.byte	0
 2303 0003 00        		.byte	0
 2304 0004 00        		.byte	0
 2305 0005 00        		.byte	0
 2306 0006 3E        		.byte	62
 2307 0007 5B        		.byte	91
 2308 0008 4F        		.byte	79
 2309 0009 5B        		.byte	91
 2310 000a 3E        		.byte	62
 2311 000b 00        		.byte	0
 2312 000c 3E        		.byte	62
 2313 000d 6B        		.byte	107
 2314 000e 4F        		.byte	79
 2315 000f 6B        		.byte	107
 2316 0010 3E        		.byte	62
 2317 0011 00        		.byte	0
 2318 0012 1C        		.byte	28
 2319 0013 3E        		.byte	62
 2320 0014 7C        		.byte	124
 2321 0015 3E        		.byte	62
 2322 0016 1C        		.byte	28
 2323 0017 00        		.byte	0
 2324 0018 18        		.byte	24
 2325 0019 3C        		.byte	60
 2326 001a 7E        		.byte	126
 2327 001b 3C        		.byte	60
 2328 001c 18        		.byte	24
 2329 001d 00        		.byte	0
 2330 001e 1C        		.byte	28
 2331 001f 57        		.byte	87
 2332 0020 7D        		.byte	125
 2333 0021 57        		.byte	87
 2334 0022 1C        		.byte	28
 2335 0023 00        		.byte	0
 2336 0024 1C        		.byte	28
 2337 0025 5E        		.byte	94
 2338 0026 7F        		.byte	127
 2339 0027 5E        		.byte	94
 2340 0028 1C        		.byte	28
 2341 0029 00        		.byte	0
 2342 002a 00        		.byte	0
 2343 002b 18        		.byte	24
 2344 002c 3C        		.byte	60
 2345 002d 18        		.byte	24
 2346 002e 00        		.byte	0
 2347 002f 00        		.byte	0
 2348 0030 FF        		.byte	-1
 2349 0031 E7        		.byte	-25
 2350 0032 C3        		.byte	-61
 2351 0033 E7        		.byte	-25
 2352 0034 FF        		.byte	-1
 2353 0035 00        		.byte	0
 2354 0036 00        		.byte	0
 2355 0037 18        		.byte	24
 2356 0038 24        		.byte	36
 2357 0039 18        		.byte	24
 2358 003a 00        		.byte	0
 2359 003b 00        		.byte	0
 2360 003c FF        		.byte	-1
 2361 003d E7        		.byte	-25
 2362 003e DB        		.byte	-37
 2363 003f E7        		.byte	-25
 2364 0040 FF        		.byte	-1
 2365 0041 00        		.byte	0
 2366 0042 30        		.byte	48
 2367 0043 48        		.byte	72
 2368 0044 3A        		.byte	58
 2369 0045 06        		.byte	6
 2370 0046 0E        		.byte	14
 2371 0047 00        		.byte	0
 2372 0048 26        		.byte	38
 2373 0049 29        		.byte	41
 2374 004a 79        		.byte	121
 2375 004b 29        		.byte	41
 2376 004c 26        		.byte	38
 2377 004d 00        		.byte	0
 2378 004e 40        		.byte	64
 2379 004f 7F        		.byte	127
 2380 0050 05        		.byte	5
 2381 0051 05        		.byte	5
 2382 0052 07        		.byte	7
 2383 0053 00        		.byte	0
 2384 0054 40        		.byte	64
 2385 0055 7F        		.byte	127
 2386 0056 05        		.byte	5
 2387 0057 25        		.byte	37
 2388 0058 3F        		.byte	63
 2389 0059 00        		.byte	0
 2390 005a 5A        		.byte	90
 2391 005b 3C        		.byte	60
 2392 005c E7        		.byte	-25
 2393 005d 3C        		.byte	60
 2394 005e 5A        		.byte	90
 2395 005f 00        		.byte	0
 2396 0060 7F        		.byte	127
 2397 0061 3E        		.byte	62
 2398 0062 1C        		.byte	28
 2399 0063 1C        		.byte	28
 2400 0064 08        		.byte	8
 2401 0065 00        		.byte	0
 2402 0066 08        		.byte	8
 2403 0067 1C        		.byte	28
 2404 0068 1C        		.byte	28
 2405 0069 3E        		.byte	62
 2406 006a 7F        		.byte	127
 2407 006b 00        		.byte	0
 2408 006c 14        		.byte	20
 2409 006d 22        		.byte	34
 2410 006e 7F        		.byte	127
 2411 006f 22        		.byte	34
 2412 0070 14        		.byte	20
 2413 0071 00        		.byte	0
 2414 0072 5F        		.byte	95
 2415 0073 5F        		.byte	95
 2416 0074 00        		.byte	0
 2417 0075 5F        		.byte	95
 2418 0076 5F        		.byte	95
 2419 0077 00        		.byte	0
 2420 0078 06        		.byte	6
 2421 0079 09        		.byte	9
 2422 007a 7F        		.byte	127
 2423 007b 01        		.byte	1
 2424 007c 7F        		.byte	127
 2425 007d 00        		.byte	0
 2426 007e 00        		.byte	0
 2427 007f 66        		.byte	102
 2428 0080 89        		.byte	-119
 2429 0081 95        		.byte	-107
 2430 0082 6A        		.byte	106
 2431 0083 00        		.byte	0
 2432 0084 60        		.byte	96
 2433 0085 60        		.byte	96
 2434 0086 60        		.byte	96
 2435 0087 60        		.byte	96
 2436 0088 60        		.byte	96
 2437 0089 00        		.byte	0
 2438 008a 94        		.byte	-108
 2439 008b A2        		.byte	-94
 2440 008c FF        		.byte	-1
 2441 008d A2        		.byte	-94
 2442 008e 94        		.byte	-108
 2443 008f 00        		.byte	0
 2444 0090 08        		.byte	8
 2445 0091 04        		.byte	4
 2446 0092 7E        		.byte	126
 2447 0093 04        		.byte	4
 2448 0094 08        		.byte	8
 2449 0095 00        		.byte	0
 2450 0096 10        		.byte	16
 2451 0097 20        		.byte	32
 2452 0098 7E        		.byte	126
 2453 0099 20        		.byte	32
 2454 009a 10        		.byte	16
 2455 009b 00        		.byte	0
 2456 009c 08        		.byte	8
 2457 009d 08        		.byte	8
 2458 009e 2A        		.byte	42
 2459 009f 1C        		.byte	28
 2460 00a0 08        		.byte	8
 2461 00a1 00        		.byte	0
 2462 00a2 08        		.byte	8
 2463 00a3 1C        		.byte	28
 2464 00a4 2A        		.byte	42
 2465 00a5 08        		.byte	8
 2466 00a6 08        		.byte	8
 2467 00a7 00        		.byte	0
 2468 00a8 1E        		.byte	30
 2469 00a9 10        		.byte	16
 2470 00aa 10        		.byte	16
 2471 00ab 10        		.byte	16
 2472 00ac 10        		.byte	16
 2473 00ad 00        		.byte	0
 2474 00ae 0C        		.byte	12
 2475 00af 1E        		.byte	30
 2476 00b0 0C        		.byte	12
 2477 00b1 1E        		.byte	30
 2478 00b2 0C        		.byte	12
 2479 00b3 00        		.byte	0
 2480 00b4 30        		.byte	48
 2481 00b5 38        		.byte	56
 2482 00b6 3E        		.byte	62
 2483 00b7 38        		.byte	56
 2484 00b8 30        		.byte	48
 2485 00b9 00        		.byte	0
 2486 00ba 06        		.byte	6
 2487 00bb 0E        		.byte	14
 2488 00bc 3E        		.byte	62
 2489 00bd 0E        		.byte	14
 2490 00be 06        		.byte	6
 2491 00bf 00        		.byte	0
 2492 00c0 00        		.byte	0
 2493 00c1 00        		.byte	0
 2494 00c2 00        		.byte	0
 2495 00c3 00        		.byte	0
 2496 00c4 00        		.byte	0
 2497 00c5 00        		.byte	0
 2498 00c6 00        		.byte	0
 2499 00c7 00        		.byte	0
 2500 00c8 5F        		.byte	95
 2501 00c9 00        		.byte	0
 2502 00ca 00        		.byte	0
 2503 00cb 00        		.byte	0
 2504 00cc 00        		.byte	0
 2505 00cd 07        		.byte	7
 2506 00ce 00        		.byte	0
 2507 00cf 07        		.byte	7
 2508 00d0 00        		.byte	0
 2509 00d1 00        		.byte	0
 2510 00d2 14        		.byte	20
 2511 00d3 7F        		.byte	127
 2512 00d4 14        		.byte	20
 2513 00d5 7F        		.byte	127
 2514 00d6 14        		.byte	20
 2515 00d7 00        		.byte	0
 2516 00d8 24        		.byte	36
 2517 00d9 2A        		.byte	42
 2518 00da 7F        		.byte	127
 2519 00db 2A        		.byte	42
 2520 00dc 12        		.byte	18
 2521 00dd 00        		.byte	0
 2522 00de 23        		.byte	35
 2523 00df 13        		.byte	19
 2524 00e0 08        		.byte	8
 2525 00e1 64        		.byte	100
 2526 00e2 62        		.byte	98
 2527 00e3 00        		.byte	0
 2528 00e4 36        		.byte	54
 2529 00e5 49        		.byte	73
 2530 00e6 56        		.byte	86
 2531 00e7 20        		.byte	32
 2532 00e8 50        		.byte	80
 2533 00e9 00        		.byte	0
 2534 00ea 00        		.byte	0
 2535 00eb 08        		.byte	8
 2536 00ec 07        		.byte	7
 2537 00ed 03        		.byte	3
 2538 00ee 00        		.byte	0
 2539 00ef 00        		.byte	0
 2540 00f0 00        		.byte	0
 2541 00f1 1C        		.byte	28
 2542 00f2 22        		.byte	34
 2543 00f3 41        		.byte	65
 2544 00f4 00        		.byte	0
 2545 00f5 00        		.byte	0
 2546 00f6 00        		.byte	0
 2547 00f7 41        		.byte	65
 2548 00f8 22        		.byte	34
 2549 00f9 1C        		.byte	28
 2550 00fa 00        		.byte	0
 2551 00fb 00        		.byte	0
 2552 00fc 2A        		.byte	42
 2553 00fd 1C        		.byte	28
 2554 00fe 7F        		.byte	127
 2555 00ff 1C        		.byte	28
 2556 0100 2A        		.byte	42
 2557 0101 00        		.byte	0
 2558 0102 08        		.byte	8
 2559 0103 08        		.byte	8
 2560 0104 3E        		.byte	62
 2561 0105 08        		.byte	8
 2562 0106 08        		.byte	8
 2563 0107 00        		.byte	0
 2564 0108 00        		.byte	0
 2565 0109 80        		.byte	-128
 2566 010a 70        		.byte	112
 2567 010b 30        		.byte	48
 2568 010c 00        		.byte	0
 2569 010d 00        		.byte	0
 2570 010e 08        		.byte	8
 2571 010f 08        		.byte	8
 2572 0110 08        		.byte	8
 2573 0111 08        		.byte	8
 2574 0112 08        		.byte	8
 2575 0113 00        		.byte	0
 2576 0114 00        		.byte	0
 2577 0115 00        		.byte	0
 2578 0116 60        		.byte	96
 2579 0117 60        		.byte	96
 2580 0118 00        		.byte	0
 2581 0119 00        		.byte	0
 2582 011a 20        		.byte	32
 2583 011b 10        		.byte	16
 2584 011c 08        		.byte	8
 2585 011d 04        		.byte	4
 2586 011e 02        		.byte	2
 2587 011f 00        		.byte	0
 2588 0120 3E        		.byte	62
 2589 0121 51        		.byte	81
 2590 0122 49        		.byte	73
 2591 0123 45        		.byte	69
 2592 0124 3E        		.byte	62
 2593 0125 00        		.byte	0
 2594 0126 00        		.byte	0
 2595 0127 42        		.byte	66
 2596 0128 7F        		.byte	127
 2597 0129 40        		.byte	64
 2598 012a 00        		.byte	0
 2599 012b 00        		.byte	0
 2600 012c 72        		.byte	114
 2601 012d 49        		.byte	73
 2602 012e 49        		.byte	73
 2603 012f 49        		.byte	73
 2604 0130 46        		.byte	70
 2605 0131 00        		.byte	0
 2606 0132 21        		.byte	33
 2607 0133 41        		.byte	65
 2608 0134 49        		.byte	73
 2609 0135 4D        		.byte	77
 2610 0136 33        		.byte	51
 2611 0137 00        		.byte	0
 2612 0138 18        		.byte	24
 2613 0139 14        		.byte	20
 2614 013a 12        		.byte	18
 2615 013b 7F        		.byte	127
 2616 013c 10        		.byte	16
 2617 013d 00        		.byte	0
 2618 013e 27        		.byte	39
 2619 013f 45        		.byte	69
 2620 0140 45        		.byte	69
 2621 0141 45        		.byte	69
 2622 0142 39        		.byte	57
 2623 0143 00        		.byte	0
 2624 0144 3C        		.byte	60
 2625 0145 4A        		.byte	74
 2626 0146 49        		.byte	73
 2627 0147 49        		.byte	73
 2628 0148 31        		.byte	49
 2629 0149 00        		.byte	0
 2630 014a 41        		.byte	65
 2631 014b 21        		.byte	33
 2632 014c 11        		.byte	17
 2633 014d 09        		.byte	9
 2634 014e 07        		.byte	7
 2635 014f 00        		.byte	0
 2636 0150 36        		.byte	54
 2637 0151 49        		.byte	73
 2638 0152 49        		.byte	73
 2639 0153 49        		.byte	73
 2640 0154 36        		.byte	54
 2641 0155 00        		.byte	0
 2642 0156 46        		.byte	70
 2643 0157 49        		.byte	73
 2644 0158 49        		.byte	73
 2645 0159 29        		.byte	41
 2646 015a 1E        		.byte	30
 2647 015b 00        		.byte	0
 2648 015c 00        		.byte	0
 2649 015d 00        		.byte	0
 2650 015e 14        		.byte	20
 2651 015f 00        		.byte	0
 2652 0160 00        		.byte	0
 2653 0161 00        		.byte	0
 2654 0162 00        		.byte	0
 2655 0163 40        		.byte	64
 2656 0164 34        		.byte	52
 2657 0165 00        		.byte	0
 2658 0166 00        		.byte	0
 2659 0167 00        		.byte	0
 2660 0168 00        		.byte	0
 2661 0169 08        		.byte	8
 2662 016a 14        		.byte	20
 2663 016b 22        		.byte	34
 2664 016c 41        		.byte	65
 2665 016d 00        		.byte	0
 2666 016e 14        		.byte	20
 2667 016f 14        		.byte	20
 2668 0170 14        		.byte	20
 2669 0171 14        		.byte	20
 2670 0172 14        		.byte	20
 2671 0173 00        		.byte	0
 2672 0174 00        		.byte	0
 2673 0175 41        		.byte	65
 2674 0176 22        		.byte	34
 2675 0177 14        		.byte	20
 2676 0178 08        		.byte	8
 2677 0179 00        		.byte	0
 2678 017a 02        		.byte	2
 2679 017b 01        		.byte	1
 2680 017c 59        		.byte	89
 2681 017d 09        		.byte	9
 2682 017e 06        		.byte	6
 2683 017f 00        		.byte	0
 2684 0180 3E        		.byte	62
 2685 0181 41        		.byte	65
 2686 0182 5D        		.byte	93
 2687 0183 59        		.byte	89
 2688 0184 4E        		.byte	78
 2689 0185 00        		.byte	0
 2690 0186 7C        		.byte	124
 2691 0187 12        		.byte	18
 2692 0188 11        		.byte	17
 2693 0189 12        		.byte	18
 2694 018a 7C        		.byte	124
 2695 018b 00        		.byte	0
 2696 018c 7F        		.byte	127
 2697 018d 49        		.byte	73
 2698 018e 49        		.byte	73
 2699 018f 49        		.byte	73
 2700 0190 36        		.byte	54
 2701 0191 00        		.byte	0
 2702 0192 3E        		.byte	62
 2703 0193 41        		.byte	65
 2704 0194 41        		.byte	65
 2705 0195 41        		.byte	65
 2706 0196 22        		.byte	34
 2707 0197 00        		.byte	0
 2708 0198 7F        		.byte	127
 2709 0199 41        		.byte	65
 2710 019a 41        		.byte	65
 2711 019b 41        		.byte	65
 2712 019c 3E        		.byte	62
 2713 019d 00        		.byte	0
 2714 019e 7F        		.byte	127
 2715 019f 49        		.byte	73
 2716 01a0 49        		.byte	73
 2717 01a1 49        		.byte	73
 2718 01a2 41        		.byte	65
 2719 01a3 00        		.byte	0
 2720 01a4 7F        		.byte	127
 2721 01a5 09        		.byte	9
 2722 01a6 09        		.byte	9
 2723 01a7 09        		.byte	9
 2724 01a8 01        		.byte	1
 2725 01a9 00        		.byte	0
 2726 01aa 3E        		.byte	62
 2727 01ab 41        		.byte	65
 2728 01ac 41        		.byte	65
 2729 01ad 51        		.byte	81
 2730 01ae 73        		.byte	115
 2731 01af 00        		.byte	0
 2732 01b0 7F        		.byte	127
 2733 01b1 08        		.byte	8
 2734 01b2 08        		.byte	8
 2735 01b3 08        		.byte	8
 2736 01b4 7F        		.byte	127
 2737 01b5 00        		.byte	0
 2738 01b6 00        		.byte	0
 2739 01b7 41        		.byte	65
 2740 01b8 7F        		.byte	127
 2741 01b9 41        		.byte	65
 2742 01ba 00        		.byte	0
 2743 01bb 00        		.byte	0
 2744 01bc 20        		.byte	32
 2745 01bd 40        		.byte	64
 2746 01be 41        		.byte	65
 2747 01bf 3F        		.byte	63
 2748 01c0 01        		.byte	1
 2749 01c1 00        		.byte	0
 2750 01c2 7F        		.byte	127
 2751 01c3 08        		.byte	8
 2752 01c4 14        		.byte	20
 2753 01c5 22        		.byte	34
 2754 01c6 41        		.byte	65
 2755 01c7 00        		.byte	0
 2756 01c8 7F        		.byte	127
 2757 01c9 40        		.byte	64
 2758 01ca 40        		.byte	64
 2759 01cb 40        		.byte	64
 2760 01cc 40        		.byte	64
 2761 01cd 00        		.byte	0
 2762 01ce 7F        		.byte	127
 2763 01cf 02        		.byte	2
 2764 01d0 1C        		.byte	28
 2765 01d1 02        		.byte	2
 2766 01d2 7F        		.byte	127
 2767 01d3 00        		.byte	0
 2768 01d4 7F        		.byte	127
 2769 01d5 04        		.byte	4
 2770 01d6 08        		.byte	8
 2771 01d7 10        		.byte	16
 2772 01d8 7F        		.byte	127
 2773 01d9 00        		.byte	0
 2774 01da 3E        		.byte	62
 2775 01db 41        		.byte	65
 2776 01dc 41        		.byte	65
 2777 01dd 41        		.byte	65
 2778 01de 3E        		.byte	62
 2779 01df 00        		.byte	0
 2780 01e0 7F        		.byte	127
 2781 01e1 09        		.byte	9
 2782 01e2 09        		.byte	9
 2783 01e3 09        		.byte	9
 2784 01e4 06        		.byte	6
 2785 01e5 00        		.byte	0
 2786 01e6 3E        		.byte	62
 2787 01e7 41        		.byte	65
 2788 01e8 51        		.byte	81
 2789 01e9 21        		.byte	33
 2790 01ea 5E        		.byte	94
 2791 01eb 00        		.byte	0
 2792 01ec 7F        		.byte	127
 2793 01ed 09        		.byte	9
 2794 01ee 19        		.byte	25
 2795 01ef 29        		.byte	41
 2796 01f0 46        		.byte	70
 2797 01f1 00        		.byte	0
 2798 01f2 26        		.byte	38
 2799 01f3 49        		.byte	73
 2800 01f4 49        		.byte	73
 2801 01f5 49        		.byte	73
 2802 01f6 32        		.byte	50
 2803 01f7 00        		.byte	0
 2804 01f8 03        		.byte	3
 2805 01f9 01        		.byte	1
 2806 01fa 7F        		.byte	127
 2807 01fb 01        		.byte	1
 2808 01fc 03        		.byte	3
 2809 01fd 00        		.byte	0
 2810 01fe 3F        		.byte	63
 2811 01ff 40        		.byte	64
 2812 0200 40        		.byte	64
 2813 0201 40        		.byte	64
 2814 0202 3F        		.byte	63
 2815 0203 00        		.byte	0
 2816 0204 1F        		.byte	31
 2817 0205 20        		.byte	32
 2818 0206 40        		.byte	64
 2819 0207 20        		.byte	32
 2820 0208 1F        		.byte	31
 2821 0209 00        		.byte	0
 2822 020a 3F        		.byte	63
 2823 020b 40        		.byte	64
 2824 020c 38        		.byte	56
 2825 020d 40        		.byte	64
 2826 020e 3F        		.byte	63
 2827 020f 00        		.byte	0
 2828 0210 63        		.byte	99
 2829 0211 14        		.byte	20
 2830 0212 08        		.byte	8
 2831 0213 14        		.byte	20
 2832 0214 63        		.byte	99
 2833 0215 00        		.byte	0
 2834 0216 03        		.byte	3
 2835 0217 04        		.byte	4
 2836 0218 78        		.byte	120
 2837 0219 04        		.byte	4
 2838 021a 03        		.byte	3
 2839 021b 00        		.byte	0
 2840 021c 61        		.byte	97
 2841 021d 59        		.byte	89
 2842 021e 49        		.byte	73
 2843 021f 4D        		.byte	77
 2844 0220 43        		.byte	67
 2845 0221 00        		.byte	0
 2846 0222 00        		.byte	0
 2847 0223 7F        		.byte	127
 2848 0224 41        		.byte	65
 2849 0225 41        		.byte	65
 2850 0226 41        		.byte	65
 2851 0227 00        		.byte	0
 2852 0228 02        		.byte	2
 2853 0229 04        		.byte	4
 2854 022a 08        		.byte	8
 2855 022b 10        		.byte	16
 2856 022c 20        		.byte	32
 2857 022d 00        		.byte	0
 2858 022e 00        		.byte	0
 2859 022f 41        		.byte	65
 2860 0230 41        		.byte	65
 2861 0231 41        		.byte	65
 2862 0232 7F        		.byte	127
 2863 0233 00        		.byte	0
 2864 0234 04        		.byte	4
 2865 0235 02        		.byte	2
 2866 0236 01        		.byte	1
 2867 0237 02        		.byte	2
 2868 0238 04        		.byte	4
 2869 0239 00        		.byte	0
 2870 023a 40        		.byte	64
 2871 023b 40        		.byte	64
 2872 023c 40        		.byte	64
 2873 023d 40        		.byte	64
 2874 023e 40        		.byte	64
 2875 023f 00        		.byte	0
 2876 0240 00        		.byte	0
 2877 0241 03        		.byte	3
 2878 0242 07        		.byte	7
 2879 0243 08        		.byte	8
 2880 0244 00        		.byte	0
 2881 0245 00        		.byte	0
 2882 0246 20        		.byte	32
 2883 0247 54        		.byte	84
 2884 0248 54        		.byte	84
 2885 0249 78        		.byte	120
 2886 024a 40        		.byte	64
 2887 024b 00        		.byte	0
 2888 024c 7F        		.byte	127
 2889 024d 28        		.byte	40
 2890 024e 44        		.byte	68
 2891 024f 44        		.byte	68
 2892 0250 38        		.byte	56
 2893 0251 00        		.byte	0
 2894 0252 38        		.byte	56
 2895 0253 44        		.byte	68
 2896 0254 44        		.byte	68
 2897 0255 44        		.byte	68
 2898 0256 28        		.byte	40
 2899 0257 00        		.byte	0
 2900 0258 38        		.byte	56
 2901 0259 44        		.byte	68
 2902 025a 44        		.byte	68
 2903 025b 28        		.byte	40
 2904 025c 7F        		.byte	127
 2905 025d 00        		.byte	0
 2906 025e 38        		.byte	56
 2907 025f 54        		.byte	84
 2908 0260 54        		.byte	84
 2909 0261 54        		.byte	84
 2910 0262 18        		.byte	24
 2911 0263 00        		.byte	0
 2912 0264 00        		.byte	0
 2913 0265 08        		.byte	8
 2914 0266 7E        		.byte	126
 2915 0267 09        		.byte	9
 2916 0268 02        		.byte	2
 2917 0269 00        		.byte	0
 2918 026a 18        		.byte	24
 2919 026b A4        		.byte	-92
 2920 026c A4        		.byte	-92
 2921 026d 9C        		.byte	-100
 2922 026e 78        		.byte	120
 2923 026f 00        		.byte	0
 2924 0270 7F        		.byte	127
 2925 0271 08        		.byte	8
 2926 0272 04        		.byte	4
 2927 0273 04        		.byte	4
 2928 0274 78        		.byte	120
 2929 0275 00        		.byte	0
 2930 0276 00        		.byte	0
 2931 0277 44        		.byte	68
 2932 0278 7D        		.byte	125
 2933 0279 40        		.byte	64
 2934 027a 00        		.byte	0
 2935 027b 00        		.byte	0
 2936 027c 20        		.byte	32
 2937 027d 40        		.byte	64
 2938 027e 40        		.byte	64
 2939 027f 3D        		.byte	61
 2940 0280 00        		.byte	0
 2941 0281 00        		.byte	0
 2942 0282 7F        		.byte	127
 2943 0283 10        		.byte	16
 2944 0284 28        		.byte	40
 2945 0285 44        		.byte	68
 2946 0286 00        		.byte	0
 2947 0287 00        		.byte	0
 2948 0288 00        		.byte	0
 2949 0289 41        		.byte	65
 2950 028a 7F        		.byte	127
 2951 028b 40        		.byte	64
 2952 028c 00        		.byte	0
 2953 028d 00        		.byte	0
 2954 028e 7C        		.byte	124
 2955 028f 04        		.byte	4
 2956 0290 78        		.byte	120
 2957 0291 04        		.byte	4
 2958 0292 78        		.byte	120
 2959 0293 00        		.byte	0
 2960 0294 7C        		.byte	124
 2961 0295 08        		.byte	8
 2962 0296 04        		.byte	4
 2963 0297 04        		.byte	4
 2964 0298 78        		.byte	120
 2965 0299 00        		.byte	0
 2966 029a 38        		.byte	56
 2967 029b 44        		.byte	68
 2968 029c 44        		.byte	68
 2969 029d 44        		.byte	68
 2970 029e 38        		.byte	56
 2971 029f 00        		.byte	0
 2972 02a0 FC        		.byte	-4
 2973 02a1 18        		.byte	24
 2974 02a2 24        		.byte	36
 2975 02a3 24        		.byte	36
 2976 02a4 18        		.byte	24
 2977 02a5 00        		.byte	0
 2978 02a6 18        		.byte	24
 2979 02a7 24        		.byte	36
 2980 02a8 24        		.byte	36
 2981 02a9 18        		.byte	24
 2982 02aa FC        		.byte	-4
 2983 02ab 00        		.byte	0
 2984 02ac 7C        		.byte	124
 2985 02ad 08        		.byte	8
 2986 02ae 04        		.byte	4
 2987 02af 04        		.byte	4
 2988 02b0 08        		.byte	8
 2989 02b1 00        		.byte	0
 2990 02b2 48        		.byte	72
 2991 02b3 54        		.byte	84
 2992 02b4 54        		.byte	84
 2993 02b5 54        		.byte	84
 2994 02b6 24        		.byte	36
 2995 02b7 00        		.byte	0
 2996 02b8 04        		.byte	4
 2997 02b9 04        		.byte	4
 2998 02ba 3F        		.byte	63
 2999 02bb 44        		.byte	68
 3000 02bc 24        		.byte	36
 3001 02bd 00        		.byte	0
 3002 02be 3C        		.byte	60
 3003 02bf 40        		.byte	64
 3004 02c0 40        		.byte	64
 3005 02c1 20        		.byte	32
 3006 02c2 7C        		.byte	124
 3007 02c3 00        		.byte	0
 3008 02c4 1C        		.byte	28
 3009 02c5 20        		.byte	32
 3010 02c6 40        		.byte	64
 3011 02c7 20        		.byte	32
 3012 02c8 1C        		.byte	28
 3013 02c9 00        		.byte	0
 3014 02ca 3C        		.byte	60
 3015 02cb 40        		.byte	64
 3016 02cc 30        		.byte	48
 3017 02cd 40        		.byte	64
 3018 02ce 3C        		.byte	60
 3019 02cf 00        		.byte	0
 3020 02d0 44        		.byte	68
 3021 02d1 28        		.byte	40
 3022 02d2 10        		.byte	16
 3023 02d3 28        		.byte	40
 3024 02d4 44        		.byte	68
 3025 02d5 00        		.byte	0
 3026 02d6 4C        		.byte	76
 3027 02d7 90        		.byte	-112
 3028 02d8 90        		.byte	-112
 3029 02d9 90        		.byte	-112
 3030 02da 7C        		.byte	124
 3031 02db 00        		.byte	0
 3032 02dc 44        		.byte	68
 3033 02dd 64        		.byte	100
 3034 02de 54        		.byte	84
 3035 02df 4C        		.byte	76
 3036 02e0 44        		.byte	68
 3037 02e1 00        		.byte	0
 3038 02e2 00        		.byte	0
 3039 02e3 08        		.byte	8
 3040 02e4 36        		.byte	54
 3041 02e5 41        		.byte	65
 3042 02e6 00        		.byte	0
 3043 02e7 00        		.byte	0
 3044 02e8 00        		.byte	0
 3045 02e9 00        		.byte	0
 3046 02ea 77        		.byte	119
 3047 02eb 00        		.byte	0
 3048 02ec 00        		.byte	0
 3049 02ed 00        		.byte	0
 3050 02ee 00        		.byte	0
 3051 02ef 41        		.byte	65
 3052 02f0 36        		.byte	54
 3053 02f1 08        		.byte	8
 3054 02f2 00        		.byte	0
 3055 02f3 00        		.byte	0
 3056 02f4 02        		.byte	2
 3057 02f5 01        		.byte	1
 3058 02f6 02        		.byte	2
 3059 02f7 04        		.byte	4
 3060 02f8 02        		.byte	2
 3061 02f9 00        		.byte	0
 3062 02fa 3C        		.byte	60
 3063 02fb 26        		.byte	38
 3064 02fc 23        		.byte	35
 3065 02fd 26        		.byte	38
 3066 02fe 3C        		.byte	60
 3067 02ff 00        		.byte	0
 3068 0300 00        		.byte	0
 3069 0301 00        		.byte	0
 3070 0302 00        		.byte	0
 3071 0303 00        		.byte	0
 3072 0304 00        		.byte	0
 3073 0305 00        		.byte	0
 3074 0306 40        		.byte	64
 3075 0307 40        		.byte	64
 3076 0308 40        		.byte	64
 3077 0309 F0        		.byte	-16
 3078 030a F8        		.byte	-8
 3079 030b F8        		.byte	-8
 3080 030c FF        		.byte	-1
 3081 030d 38        		.byte	56
 3082 030e FF        		.byte	-1
 3083 030f F8        		.byte	-8
 3084 0310 F8        		.byte	-8
 3085 0311 3F        		.byte	63
 3086 0312 F8        		.byte	-8
 3087 0313 F8        		.byte	-8
 3088 0314 FF        		.byte	-1
 3089 0315 38        		.byte	56
 3090 0316 FF        		.byte	-1
 3091 0317 F8        		.byte	-8
 3092 0318 F8        		.byte	-8
 3093 0319 F0        		.byte	-16
 3094 031a 40        		.byte	64
 3095 031b 40        		.byte	64
 3096 031c 40        		.byte	64
 3097 031d 00        		.byte	0
 3098 031e 00        		.byte	0
 3099 031f 00        		.byte	0
 3100 0320 00        		.byte	0
 3101 0321 00        		.byte	0
 3102 0322 00        		.byte	0
 3103 0323 80        		.byte	-128
 3104 0324 C0        		.byte	-64
 3105 0325 C0        		.byte	-64
 3106 0326 C0        		.byte	-64
 3107 0327 80        		.byte	-128
 3108 0328 00        		.byte	0
 3109 0329 00        		.byte	0
 3110 032a C0        		.byte	-64
 3111 032b C0        		.byte	-64
 3112 032c 80        		.byte	-128
 3113 032d 00        		.byte	0
 3114 032e 00        		.byte	0
 3115 032f 00        		.byte	0
 3116 0330 80        		.byte	-128
 3117 0331 C0        		.byte	-64
 3118 0332 C0        		.byte	-64
 3119 0333 00        		.byte	0
 3120 0334 C0        		.byte	-64
 3121 0335 C0        		.byte	-64
 3122 0336 00        		.byte	0
 3123 0337 00        		.byte	0
 3124 0338 80        		.byte	-128
 3125 0339 C0        		.byte	-64
 3126 033a C0        		.byte	-64
 3127 033b 00        		.byte	0
 3128 033c 00        		.byte	0
 3129 033d 00        		.byte	0
 3130 033e 00        		.byte	0
 3131 033f 00        		.byte	0
 3132 0340 C0        		.byte	-64
 3133 0341 C0        		.byte	-64
 3134 0342 C0        		.byte	-64
 3135 0343 C0        		.byte	-64
 3136 0344 C0        		.byte	-64
 3137 0345 00        		.byte	0
 3138 0346 C0        		.byte	-64
 3139 0347 C0        		.byte	-64
 3140 0348 00        		.byte	0
 3141 0349 00        		.byte	0
 3142 034a 00        		.byte	0
 3143 034b 00        		.byte	0
 3144 034c 00        		.byte	0
 3145 034d 00        		.byte	0
 3146 034e 00        		.byte	0
 3147 034f 00        		.byte	0
 3148 0350 00        		.byte	0
 3149 0351 00        		.byte	0
 3150 0352 00        		.byte	0
 3151 0353 00        		.byte	0
 3152 0354 00        		.byte	0
 3153 0355 00        		.byte	0
 3154 0356 00        		.byte	0
 3155 0357 00        		.byte	0
 3156 0358 00        		.byte	0
 3157 0359 00        		.byte	0
 3158 035a 00        		.byte	0
 3159 035b 00        		.byte	0
 3160 035c 00        		.byte	0
 3161 035d 00        		.byte	0
 3162 035e 00        		.byte	0
 3163 035f 00        		.byte	0
 3164 0360 00        		.byte	0
 3165 0361 00        		.byte	0
 3166 0362 00        		.byte	0
 3167 0363 00        		.byte	0
 3168 0364 00        		.byte	0
 3169 0365 00        		.byte	0
 3170 0366 00        		.byte	0
 3171 0367 00        		.byte	0
 3172 0368 00        		.byte	0
 3173 0369 00        		.byte	0
 3174 036a 00        		.byte	0
 3175 036b 00        		.byte	0
 3176 036c 00        		.byte	0
 3177 036d 00        		.byte	0
 3178 036e 00        		.byte	0
 3179 036f 00        		.byte	0
 3180 0370 00        		.byte	0
 3181 0371 00        		.byte	0
 3182 0372 00        		.byte	0
 3183 0373 00        		.byte	0
 3184 0374 00        		.byte	0
 3185 0375 00        		.byte	0
 3186 0376 00        		.byte	0
 3187 0377 00        		.byte	0
 3188 0378 00        		.byte	0
 3189 0379 00        		.byte	0
 3190 037a 00        		.byte	0
 3191 037b 00        		.byte	0
 3192 037c 00        		.byte	0
 3193 037d 00        		.byte	0
 3194 037e 00        		.byte	0
 3195 037f C0        		.byte	-64
 3196 0380 F0        		.byte	-16
 3197 0381 F8        		.byte	-8
 3198 0382 FC        		.byte	-4
 3199 0383 3E        		.byte	62
 3200 0384 1E        		.byte	30
 3201 0385 06        		.byte	6
 3202 0386 01        		.byte	1
 3203 0387 00        		.byte	0
 3204 0388 00        		.byte	0
 3205 0389 00        		.byte	0
 3206 038a 7F        		.byte	127
 3207 038b 41        		.byte	65
 3208 038c 41        		.byte	65
 3209 038d 41        		.byte	65
 3210 038e 7F        		.byte	127
 3211 038f 00        		.byte	0
 3212 0390 7F        		.byte	127
 3213 0391 41        		.byte	65
 3214 0392 41        		.byte	65
 3215 0393 41        		.byte	65
 3216 0394 7F        		.byte	127
 3217 0395 00        		.byte	0
 3218 0396 00        		.byte	0
 3219 0397 80        		.byte	-128
 3220 0398 C0        		.byte	-64
 3221 0399 E0        		.byte	-32
 3222 039a 7E        		.byte	126
 3223 039b 5B        		.byte	91
 3224 039c 4F        		.byte	79
 3225 039d 5B        		.byte	91
 3226 039e FE        		.byte	-2
 3227 039f C0        		.byte	-64
 3228 03a0 00        		.byte	0
 3229 03a1 00        		.byte	0
 3230 03a2 C0        		.byte	-64
 3231 03a3 00        		.byte	0
 3232 03a4 DC        		.byte	-36
 3233 03a5 D7        		.byte	-41
 3234 03a6 DE        		.byte	-34
 3235 03a7 DE        		.byte	-34
 3236 03a8 DE        		.byte	-34
 3237 03a9 D7        		.byte	-41
 3238 03aa DC        		.byte	-36
 3239 03ab 00        		.byte	0
 3240 03ac C0        		.byte	-64
 3241 03ad 00        		.byte	0
 3242 03ae 00        		.byte	0
 3243 03af 00        		.byte	0
 3244 03b0 00        		.byte	0
 3245 03b1 00        		.byte	0
 3246 03b2 00        		.byte	0
 3247 03b3 00        		.byte	0
 3248 03b4 00        		.byte	0
 3249 03b5 00        		.byte	0
 3250 03b6 00        		.byte	0
 3251 03b7 00        		.byte	0
 3252 03b8 00        		.byte	0
 3253 03b9 00        		.byte	0
 3254 03ba 00        		.byte	0
 3255 03bb 00        		.byte	0
 3256 03bc 00        		.byte	0
 3257 03bd 00        		.byte	0
 3258 03be 00        		.byte	0
 3259 03bf 00        		.byte	0
 3260 03c0 00        		.byte	0
 3261 03c1 00        		.byte	0
 3262 03c2 00        		.byte	0
 3263 03c3 00        		.byte	0
 3264 03c4 00        		.byte	0
 3265 03c5 00        		.byte	0
 3266 03c6 49        		.byte	73
 3267 03c7 49        		.byte	73
 3268 03c8 49        		.byte	73
 3269 03c9 FF        		.byte	-1
 3270 03ca FF        		.byte	-1
 3271 03cb FF        		.byte	-1
 3272 03cc FF        		.byte	-1
 3273 03cd E0        		.byte	-32
 3274 03ce DF        		.byte	-33
 3275 03cf BF        		.byte	-65
 3276 03d0 BF        		.byte	-65
 3277 03d1 00        		.byte	0
 3278 03d2 BF        		.byte	-65
 3279 03d3 BF        		.byte	-65
 3280 03d4 DF        		.byte	-33
 3281 03d5 E0        		.byte	-32
 3282 03d6 FF        		.byte	-1
 3283 03d7 FF        		.byte	-1
 3284 03d8 FF        		.byte	-1
 3285 03d9 FF        		.byte	-1
 3286 03da 49        		.byte	73
 3287 03db 49        		.byte	73
 3288 03dc 49        		.byte	73
 3289 03dd 00        		.byte	0
 3290 03de 00        		.byte	0
 3291 03df 00        		.byte	0
 3292 03e0 00        		.byte	0
 3293 03e1 00        		.byte	0
 3294 03e2 1F        		.byte	31
 3295 03e3 3F        		.byte	63
 3296 03e4 60        		.byte	96
 3297 03e5 60        		.byte	96
 3298 03e6 E0        		.byte	-32
 3299 03e7 BF        		.byte	-65
 3300 03e8 1F        		.byte	31
 3301 03e9 00        		.byte	0
 3302 03ea 7F        		.byte	127
 3303 03eb 7F        		.byte	127
 3304 03ec 07        		.byte	7
 3305 03ed 1E        		.byte	30
 3306 03ee 38        		.byte	56
 3307 03ef 1E        		.byte	30
 3308 03f0 07        		.byte	7
 3309 03f1 7F        		.byte	127
 3310 03f2 7F        		.byte	127
 3311 03f3 00        		.byte	0
 3312 03f4 7F        		.byte	127
 3313 03f5 7F        		.byte	127
 3314 03f6 0E        		.byte	14
 3315 03f7 1F        		.byte	31
 3316 03f8 3B        		.byte	59
 3317 03f9 71        		.byte	113
 3318 03fa 60        		.byte	96
 3319 03fb 00        		.byte	0
 3320 03fc 00        		.byte	0
 3321 03fd 00        		.byte	0
 3322 03fe 00        		.byte	0
 3323 03ff 00        		.byte	0
 3324 0400 7F        		.byte	127
 3325 0401 7F        		.byte	127
 3326 0402 0C        		.byte	12
 3327 0403 0C        		.byte	12
 3328 0404 0C        		.byte	12
 3329 0405 00        		.byte	0
 3330 0406 7E        		.byte	126
 3331 0407 7E        		.byte	126
 3332 0408 00        		.byte	0
 3333 0409 7F        		.byte	127
 3334 040a 7E        		.byte	126
 3335 040b 03        		.byte	3
 3336 040c 03        		.byte	3
 3337 040d 00        		.byte	0
 3338 040e 7F        		.byte	127
 3339 040f 7E        		.byte	126
 3340 0410 03        		.byte	3
 3341 0411 03        		.byte	3
 3342 0412 7E        		.byte	126
 3343 0413 7E        		.byte	126
 3344 0414 03        		.byte	3
 3345 0415 03        		.byte	3
 3346 0416 7F        		.byte	127
 3347 0417 7E        		.byte	126
 3348 0418 00        		.byte	0
 3349 0419 0F        		.byte	15
 3350 041a 3E        		.byte	62
 3351 041b 70        		.byte	112
 3352 041c 3C        		.byte	60
 3353 041d 06        		.byte	6
 3354 041e 3C        		.byte	60
 3355 041f 70        		.byte	112
 3356 0420 3E        		.byte	62
 3357 0421 0F        		.byte	15
 3358 0422 00        		.byte	0
 3359 0423 32        		.byte	50
 3360 0424 7B        		.byte	123
 3361 0425 49        		.byte	73
 3362 0426 49        		.byte	73
 3363 0427 3F        		.byte	63
 3364 0428 7E        		.byte	126
 3365 0429 00        		.byte	0
 3366 042a 7F        		.byte	127
 3367 042b 7E        		.byte	126
 3368 042c 03        		.byte	3
 3369 042d 03        		.byte	3
 3370 042e 00        		.byte	0
 3371 042f 1E        		.byte	30
 3372 0430 3F        		.byte	63
 3373 0431 69        		.byte	105
 3374 0432 69        		.byte	105
 3375 0433 6F        		.byte	111
 3376 0434 26        		.byte	38
 3377 0435 00        		.byte	0
 3378 0436 00        		.byte	0
 3379 0437 00        		.byte	0
 3380 0438 00        		.byte	0
 3381 0439 00        		.byte	0
 3382 043a 00        		.byte	0
 3383 043b 00        		.byte	0
 3384 043c 00        		.byte	0
 3385 043d 00        		.byte	0
 3386 043e 00        		.byte	0
 3387 043f 03        		.byte	3
 3388 0440 0F        		.byte	15
 3389 0441 1F        		.byte	31
 3390 0442 3F        		.byte	63
 3391 0443 3C        		.byte	60
 3392 0444 78        		.byte	120
 3393 0445 70        		.byte	112
 3394 0446 60        		.byte	96
 3395 0447 00        		.byte	0
 3396 0448 00        		.byte	0
 3397 0449 00        		.byte	0
 3398 044a 7F        		.byte	127
 3399 044b 41        		.byte	65
 3400 044c 41        		.byte	65
 3401 044d 41        		.byte	65
 3402 044e 7F        		.byte	127
 3403 044f 00        		.byte	0
 3404 0450 7F        		.byte	127
 3405 0451 41        		.byte	65
 3406 0452 41        		.byte	65
 3407 0453 41        		.byte	65
 3408 0454 7F        		.byte	127
 3409 0455 00        		.byte	0
 3410 0456 30        		.byte	48
 3411 0457 7B        		.byte	123
 3412 0458 7F        		.byte	127
 3413 0459 78        		.byte	120
 3414 045a 30        		.byte	48
 3415 045b 20        		.byte	32
 3416 045c 20        		.byte	32
 3417 045d 30        		.byte	48
 3418 045e 78        		.byte	120
 3419 045f 7F        		.byte	127
 3420 0460 3B        		.byte	59
 3421 0461 00        		.byte	0
 3422 0462 03        		.byte	3
 3423 0463 00        		.byte	0
 3424 0464 0F        		.byte	15
 3425 0465 7F        		.byte	127
 3426 0466 0F        		.byte	15
 3427 0467 0F        		.byte	15
 3428 0468 0F        		.byte	15
 3429 0469 7F        		.byte	127
 3430 046a 0F        		.byte	15
 3431 046b 00        		.byte	0
 3432 046c 03        		.byte	3
 3433 046d 00        		.byte	0
 3434 046e 00        		.byte	0
 3435 046f 00        		.byte	0
 3436 0470 00        		.byte	0
 3437 0471 00        		.byte	0
 3438 0472 00        		.byte	0
 3439 0473 00        		.byte	0
 3440 0474 00        		.byte	0
 3441 0475 00        		.byte	0
 3442 0476 00        		.byte	0
 3443 0477 00        		.byte	0
 3444 0478 00        		.byte	0
 3445 0479 00        		.byte	0
 3446 047a 00        		.byte	0
 3447 047b 00        		.byte	0
 3448 047c 00        		.byte	0
 3449 047d 00        		.byte	0
 3450 047e 00        		.byte	0
 3451 047f 00        		.byte	0
 3452 0480 00        		.byte	0
 3453 0481 00        		.byte	0
 3454 0482 00        		.byte	0
 3455 0483 00        		.byte	0
 3456 0484 00        		.byte	0
 3457 0485 00        		.byte	0
 3458 0486 01        		.byte	1
 3459 0487 01        		.byte	1
 3460 0488 01        		.byte	1
 3461 0489 07        		.byte	7
 3462 048a 0F        		.byte	15
 3463 048b 0F        		.byte	15
 3464 048c 7F        		.byte	127
 3465 048d 0F        		.byte	15
 3466 048e 7F        		.byte	127
 3467 048f 0F        		.byte	15
 3468 0490 0F        		.byte	15
 3469 0491 7E        		.byte	126
 3470 0492 0F        		.byte	15
 3471 0493 0F        		.byte	15
 3472 0494 7F        		.byte	127
 3473 0495 0F        		.byte	15
 3474 0496 7F        		.byte	127
 3475 0497 0F        		.byte	15
 3476 0498 0F        		.byte	15
 3477 0499 07        		.byte	7
 3478 049a 01        		.byte	1
 3479 049b 01        		.byte	1
 3480 049c 01        		.byte	1
 3481 049d 00        		.byte	0
 3482 049e 00        		.byte	0
 3483 049f 00        		.byte	0
 3484 04a0 00        		.byte	0
 3485 04a1 00        		.byte	0
 3486 04a2 00        		.byte	0
 3487 04a3 00        		.byte	0
 3488 04a4 00        		.byte	0
 3489 04a5 00        		.byte	0
 3490 04a6 00        		.byte	0
 3491 04a7 01        		.byte	1
 3492 04a8 01        		.byte	1
 3493 04a9 00        		.byte	0
 3494 04aa 00        		.byte	0
 3495 04ab 00        		.byte	0
 3496 04ac 00        		.byte	0
 3497 04ad 00        		.byte	0
 3498 04ae 00        		.byte	0
 3499 04af 00        		.byte	0
 3500 04b0 00        		.byte	0
 3501 04b1 00        		.byte	0
 3502 04b2 00        		.byte	0
 3503 04b3 00        		.byte	0
 3504 04b4 00        		.byte	0
 3505 04b5 00        		.byte	0
 3506 04b6 00        		.byte	0
 3507 04b7 00        		.byte	0
 3508 04b8 00        		.byte	0
 3509 04b9 00        		.byte	0
 3510 04ba 00        		.byte	0
 3511 04bb 00        		.byte	0
 3512 04bc 00        		.byte	0
 3513 04bd 00        		.byte	0
 3514 04be 00        		.byte	0
 3515 04bf 00        		.byte	0
 3516 04c0 00        		.byte	0
 3517 04c1 00        		.byte	0
 3518 04c2 00        		.byte	0
 3519 04c3 00        		.byte	0
 3520 04c4 00        		.byte	0
 3521 04c5 00        		.byte	0
 3522 04c6 00        		.byte	0
 3523 04c7 00        		.byte	0
 3524 04c8 00        		.byte	0
 3525 04c9 00        		.byte	0
 3526 04ca 00        		.byte	0
 3527 04cb 00        		.byte	0
 3528 04cc 00        		.byte	0
 3529 04cd 00        		.byte	0
 3530 04ce 00        		.byte	0
 3531 04cf 00        		.byte	0
 3532 04d0 00        		.byte	0
 3533 04d1 00        		.byte	0
 3534 04d2 00        		.byte	0
 3535 04d3 00        		.byte	0
 3536 04d4 00        		.byte	0
 3537 04d5 00        		.byte	0
 3538 04d6 00        		.byte	0
 3539 04d7 00        		.byte	0
 3540 04d8 00        		.byte	0
 3541 04d9 00        		.byte	0
 3542 04da 00        		.byte	0
 3543 04db 00        		.byte	0
 3544 04dc 00        		.byte	0
 3545 04dd 00        		.byte	0
 3546 04de 00        		.byte	0
 3547 04df 00        		.byte	0
 3548 04e0 00        		.byte	0
 3549 04e1 00        		.byte	0
 3550 04e2 00        		.byte	0
 3551 04e3 00        		.byte	0
 3552 04e4 00        		.byte	0
 3553 04e5 00        		.byte	0
 3554 04e6 00        		.byte	0
 3555 04e7 00        		.byte	0
 3556 04e8 00        		.byte	0
 3557 04e9 00        		.byte	0
 3558 04ea 00        		.byte	0
 3559 04eb 00        		.byte	0
 3560 04ec 00        		.byte	0
 3561 04ed 00        		.byte	0
 3562 04ee 00        		.byte	0
 3563 04ef 00        		.byte	0
 3564 04f0 00        		.byte	0
 3565 04f1 00        		.byte	0
 3566 04f2 00        		.byte	0
 3567 04f3 00        		.byte	0
 3568 04f4 00        		.byte	0
 3569 04f5 00        		.byte	0
 3570 04f6 00        		.byte	0
 3571 04f7 00        		.byte	0
 3572 04f8 00        		.byte	0
 3573 04f9 00        		.byte	0
 3574 04fa 00        		.byte	0
 3575 04fb 00        		.byte	0
 3576 04fc 00        		.byte	0
 3577 04fd 00        		.byte	0
 3578 04fe 00        		.byte	0
 3579 04ff 00        		.byte	0
 3580 0500 00        		.byte	0
 3581 0501 00        		.byte	0
 3582 0502 00        		.byte	0
 3583 0503 00        		.byte	0
 3584 0504 00        		.byte	0
 3585 0505 00        		.byte	0
 3586 0506 00        		.byte	0
 3587 0507 00        		.byte	0
 3588 0508 00        		.byte	0
 3589 0509 00        		.byte	0
 3590 050a 00        		.byte	0
 3591 050b 00        		.byte	0
 3592 050c 00        		.byte	0
 3593 050d 00        		.byte	0
 3594 050e 00        		.byte	0
 3595 050f 00        		.byte	0
 3596 0510 00        		.byte	0
 3597 0511 00        		.byte	0
 3598 0512 00        		.byte	0
 3599 0513 00        		.byte	0
 3600 0514 00        		.byte	0
 3601 0515 00        		.byte	0
 3602 0516 00        		.byte	0
 3603 0517 00        		.byte	0
 3604 0518 00        		.byte	0
 3605 0519 00        		.byte	0
 3606 051a 00        		.byte	0
 3607 051b 00        		.byte	0
 3608 051c 00        		.byte	0
 3609 051d 00        		.byte	0
 3610 051e 00        		.byte	0
 3611 051f 00        		.byte	0
 3612 0520 00        		.byte	0
 3613 0521 00        		.byte	0
 3614 0522 00        		.byte	0
 3615 0523 00        		.byte	0
 3616 0524 00        		.byte	0
 3617 0525 00        		.byte	0
 3618 0526 00        		.byte	0
 3619 0527 00        		.byte	0
 3620 0528 00        		.byte	0
 3621 0529 00        		.byte	0
 3622 052a 00        		.byte	0
 3623 052b 00        		.byte	0
 3624 052c 00        		.byte	0
 3625 052d 00        		.byte	0
 3626 052e 00        		.byte	0
 3627 052f 00        		.byte	0
 3628 0530 00        		.byte	0
 3629 0531 00        		.byte	0
 3630 0532 00        		.byte	0
 3631 0533 00        		.byte	0
 3632 0534 00        		.byte	0
 3633 0535 00        		.byte	0
 3634 0536 00        		.byte	0
 3635 0537 00        		.byte	0
 3636 0538 00        		.byte	0
 3637 0539 00        		.byte	0
 3638 053a 00        		.byte	0
 3639 053b 00        		.byte	0
 3640 053c 00        		.byte	0
 3641 053d 00        		.byte	0
 3642 053e 00        		.byte	0
 3643 053f 00        		.byte	0
 3644               		.text
 3645               	.Letext0:
 3646               		.file 2 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 3647               		.file 3 "drivers/avr/i2c_master.h"
 3648               		.file 4 "drivers/oled/oled_driver.h"
 3649               		.file 5 "tmk_core/common/timer.h"
 3650               		.file 6 "drivers/oled/glcdfont.c"
 3651               		.file 7 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 3652               		.file 8 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
DEFINED SYMBOLS
                            *ABS*:00000000 oled_driver.c
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2      *ABS*:0000003e __SP_H__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:3      *ABS*:0000003d __SP_L__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:4      *ABS*:0000003f __SREG__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:6      *ABS*:00000001 __zero_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:12     .text.i2c_transmit_P.constprop.2:00000000 i2c_transmit_P.constprop.2
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:151    .text.oled_init_user:00000000 oled_init_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:170    .text.oled_clear:00000000 oled_clear
                            *COM*:00000200 oled_buffer
                            *COM*:00000002 oled_cursor
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2292   .bss.oled_dirty:00000000 oled_dirty
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:209    .text.oled_init:00000000 oled_init
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2268   .bss.oled_rotation:00000000 oled_rotation
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2262   .bss.oled_rotation_width:00000000 oled_rotation_width
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2244   .progmem.data.display_setup1.2003:00000000 display_setup1.2003
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2237   .progmem.data.display_normal.2004:00000000 display_normal.2004
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2213   .progmem.data.display_setup2.2006:00000000 display_setup2.2006
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2286   .bss.oled_initialized:00000000 oled_initialized
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2280   .bss.oled_active:00000000 oled_active
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2274   .bss.oled_scrolling:00000000 oled_scrolling
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2230   .progmem.data.display_flipped.2005:00000000 display_flipped.2005
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:330    .text.crot:00000000 crot
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:380    .text.oled_set_cursor:00000000 oled_set_cursor
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:431    .text.oled_advance_char:00000000 oled_advance_char
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:496    .text.oled_write_char:00000000 oled_write_char
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:731    .text.oled_advance_page:00000000 oled_advance_page
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2176   .bss.oled_temp_buffer.2079:00000000 oled_temp_buffer.2079
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2299   .progmem.data.font:00000000 font
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:837    .text.oled_write:00000000 oled_write
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:919    .text.oled_write_ln:00000000 oled_write_ln
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:941    .text.oled_write_raw:00000000 oled_write_raw
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:1045   .text.oled_write_P:00000000 oled_write_P
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:1118   .text.oled_write_ln_P:00000000 oled_write_ln_P
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:1140   .text.oled_write_raw_P:00000000 oled_write_raw_P
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:1279   .text.oled_on:00000000 oled_on
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2170   .progmem.data.display_on.2138:00000000 display_on.2138
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:1323   .text.oled_render:00000000 oled_render
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2202   .data.display_start.2049:00000000 display_start.2049
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2197   .bss.temp_buffer.2052:00000000 temp_buffer.2052
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2189   .rodata.target_map.2051:00000000 target_map.2051
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2181   .rodata.source_map.2050:00000000 source_map.2050
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:1814   .text.oled_off:00000000 oled_off
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2164   .progmem.data.display_off.2142:00000000 display_off.2142
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:1862   .text.oled_scroll_right:00000000 oled_scroll_right
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2151   .progmem.data.display_scroll_right.2146:00000000 display_scroll_right.2146
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:1915   .text.oled_scroll_left:00000000 oled_scroll_left
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2138   .progmem.data.display_scroll_left.2150:00000000 display_scroll_left.2150
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:1968   .text.oled_scroll_off:00000000 oled_scroll_off
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2132   .progmem.data.display_scroll_off.2154:00000000 display_scroll_off.2154
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2024   .text.oled_max_chars:00000000 oled_max_chars
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2052   .text.oled_max_lines:00000000 oled_max_lines
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2080   .text.oled_task_user:00000000 oled_task_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\cc2oYqLp.s:2098   .text.oled_task:00000000 oled_task

UNDEFINED SYMBOLS
i2c_start
i2c_write
i2c_stop
i2c_init
__udivmodhi4
memcmp
memcpy_P
__udivmodqi4
i2c_transmit
i2c_writeReg
__do_copy_data
__do_clear_bss
