   1               		.file	"serial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.sync_recv,"ax",@progbits
  12               	sync_recv:
  13               	.LFB16:
  14               		.file 1 "keyboards/crkbd/serial.c"
   1:keyboards/crkbd/serial.c **** /*
   2:keyboards/crkbd/serial.c ****  * WARNING: be careful changing this code, it is very timing dependent
   3:keyboards/crkbd/serial.c ****  *
   4:keyboards/crkbd/serial.c ****  * 2018-10-28 checked
   5:keyboards/crkbd/serial.c ****  *  avr-gcc 4.9.2
   6:keyboards/crkbd/serial.c ****  *  avr-gcc 5.4.0
   7:keyboards/crkbd/serial.c ****  *  avr-gcc 7.3.0
   8:keyboards/crkbd/serial.c ****  */
   9:keyboards/crkbd/serial.c **** 
  10:keyboards/crkbd/serial.c **** #ifndef F_CPU
  11:keyboards/crkbd/serial.c **** #define F_CPU 16000000
  12:keyboards/crkbd/serial.c **** #endif
  13:keyboards/crkbd/serial.c **** 
  14:keyboards/crkbd/serial.c **** #include <avr/io.h>
  15:keyboards/crkbd/serial.c **** #include <avr/interrupt.h>
  16:keyboards/crkbd/serial.c **** #include <util/delay.h>
  17:keyboards/crkbd/serial.c **** #include <stddef.h>
  18:keyboards/crkbd/serial.c **** #include <stdbool.h>
  19:keyboards/crkbd/serial.c **** #include "serial.h"
  20:keyboards/crkbd/serial.c **** 
  21:keyboards/crkbd/serial.c **** #ifdef SOFT_SERIAL_PIN
  22:keyboards/crkbd/serial.c **** 
  23:keyboards/crkbd/serial.c **** #ifdef __AVR_ATmega32U4__
  24:keyboards/crkbd/serial.c ****   // if using ATmega32U4 I2C, can not use PD0 and PD1 in soft serial.
  25:keyboards/crkbd/serial.c ****   #ifdef USE_I2C
  26:keyboards/crkbd/serial.c ****     #if SOFT_SERIAL_PIN == D0 || SOFT_SERIAL_PIN == D1
  27:keyboards/crkbd/serial.c ****       #error Using ATmega32U4 I2C, so can not use PD0, PD1
  28:keyboards/crkbd/serial.c ****     #endif
  29:keyboards/crkbd/serial.c ****   #endif
  30:keyboards/crkbd/serial.c **** 
  31:keyboards/crkbd/serial.c ****   #if SOFT_SERIAL_PIN >= D0 && SOFT_SERIAL_PIN <= D3
  32:keyboards/crkbd/serial.c ****     #define SERIAL_PIN_DDR   DDRD
  33:keyboards/crkbd/serial.c ****     #define SERIAL_PIN_PORT  PORTD
  34:keyboards/crkbd/serial.c ****     #define SERIAL_PIN_INPUT PIND
  35:keyboards/crkbd/serial.c ****     #if SOFT_SERIAL_PIN == D0
  36:keyboards/crkbd/serial.c ****       #define SERIAL_PIN_MASK _BV(PD0)
  37:keyboards/crkbd/serial.c ****       #define EIMSK_BIT       _BV(INT0)
  38:keyboards/crkbd/serial.c ****       #define EICRx_BIT       (~(_BV(ISC00) | _BV(ISC01)))
  39:keyboards/crkbd/serial.c ****       #define SERIAL_PIN_INTERRUPT INT0_vect
  40:keyboards/crkbd/serial.c ****     #elif  SOFT_SERIAL_PIN == D1
  41:keyboards/crkbd/serial.c ****       #define SERIAL_PIN_MASK _BV(PD1)
  42:keyboards/crkbd/serial.c ****       #define EIMSK_BIT       _BV(INT1)
  43:keyboards/crkbd/serial.c ****       #define EICRx_BIT       (~(_BV(ISC10) | _BV(ISC11)))
  44:keyboards/crkbd/serial.c ****       #define SERIAL_PIN_INTERRUPT INT1_vect
  45:keyboards/crkbd/serial.c ****     #elif  SOFT_SERIAL_PIN == D2
  46:keyboards/crkbd/serial.c ****       #define SERIAL_PIN_MASK _BV(PD2)
  47:keyboards/crkbd/serial.c ****       #define EIMSK_BIT       _BV(INT2)
  48:keyboards/crkbd/serial.c ****       #define EICRx_BIT       (~(_BV(ISC20) | _BV(ISC21)))
  49:keyboards/crkbd/serial.c ****       #define SERIAL_PIN_INTERRUPT INT2_vect
  50:keyboards/crkbd/serial.c ****     #elif  SOFT_SERIAL_PIN == D3
  51:keyboards/crkbd/serial.c ****       #define SERIAL_PIN_MASK _BV(PD3)
  52:keyboards/crkbd/serial.c ****       #define EIMSK_BIT       _BV(INT3)
  53:keyboards/crkbd/serial.c ****       #define EICRx_BIT       (~(_BV(ISC30) | _BV(ISC31)))
  54:keyboards/crkbd/serial.c ****       #define SERIAL_PIN_INTERRUPT INT3_vect
  55:keyboards/crkbd/serial.c ****     #endif
  56:keyboards/crkbd/serial.c ****   #elif  SOFT_SERIAL_PIN == E6
  57:keyboards/crkbd/serial.c ****     #define SERIAL_PIN_DDR   DDRE
  58:keyboards/crkbd/serial.c ****     #define SERIAL_PIN_PORT  PORTE
  59:keyboards/crkbd/serial.c ****     #define SERIAL_PIN_INPUT PINE
  60:keyboards/crkbd/serial.c ****     #define SERIAL_PIN_MASK  _BV(PE6)
  61:keyboards/crkbd/serial.c ****     #define EIMSK_BIT        _BV(INT6)
  62:keyboards/crkbd/serial.c ****     #define EICRx_BIT        (~(_BV(ISC60) | _BV(ISC61)))
  63:keyboards/crkbd/serial.c ****     #define SERIAL_PIN_INTERRUPT INT6_vect
  64:keyboards/crkbd/serial.c ****   #else
  65:keyboards/crkbd/serial.c ****   #error invalid SOFT_SERIAL_PIN value
  66:keyboards/crkbd/serial.c ****   #endif
  67:keyboards/crkbd/serial.c **** 
  68:keyboards/crkbd/serial.c **** #else
  69:keyboards/crkbd/serial.c ****  #error serial.c now support ATmega32U4 only
  70:keyboards/crkbd/serial.c **** #endif
  71:keyboards/crkbd/serial.c **** 
  72:keyboards/crkbd/serial.c **** //////////////// for backward compatibility ////////////////////////////////
  73:keyboards/crkbd/serial.c **** #ifndef SERIAL_USE_MULTI_TRANSACTION
  74:keyboards/crkbd/serial.c **** /* --- USE Simple API (OLD API, compatible with let's split serial.c) */
  75:keyboards/crkbd/serial.c ****   #if SERIAL_SLAVE_BUFFER_LENGTH > 0
  76:keyboards/crkbd/serial.c ****   uint8_t volatile serial_slave_buffer[SERIAL_SLAVE_BUFFER_LENGTH] = {0};
  77:keyboards/crkbd/serial.c ****   #endif
  78:keyboards/crkbd/serial.c ****   #if SERIAL_MASTER_BUFFER_LENGTH > 0
  79:keyboards/crkbd/serial.c ****   uint8_t volatile serial_master_buffer[SERIAL_MASTER_BUFFER_LENGTH] = {0};
  80:keyboards/crkbd/serial.c ****   #endif
  81:keyboards/crkbd/serial.c ****   uint8_t volatile status0 = 0;
  82:keyboards/crkbd/serial.c **** 
  83:keyboards/crkbd/serial.c **** SSTD_t transactions[] = {
  84:keyboards/crkbd/serial.c ****     { (uint8_t *)&status0,
  85:keyboards/crkbd/serial.c ****   #if SERIAL_MASTER_BUFFER_LENGTH > 0
  86:keyboards/crkbd/serial.c ****       sizeof(serial_master_buffer), (uint8_t *)serial_master_buffer,
  87:keyboards/crkbd/serial.c ****   #else
  88:keyboards/crkbd/serial.c ****       0, (uint8_t *)NULL,
  89:keyboards/crkbd/serial.c ****   #endif
  90:keyboards/crkbd/serial.c ****   #if SERIAL_SLAVE_BUFFER_LENGTH > 0
  91:keyboards/crkbd/serial.c ****       sizeof(serial_slave_buffer), (uint8_t *)serial_slave_buffer
  92:keyboards/crkbd/serial.c ****   #else
  93:keyboards/crkbd/serial.c ****       0, (uint8_t *)NULL,
  94:keyboards/crkbd/serial.c ****   #endif
  95:keyboards/crkbd/serial.c ****   }
  96:keyboards/crkbd/serial.c **** };
  97:keyboards/crkbd/serial.c **** 
  98:keyboards/crkbd/serial.c **** void serial_master_init(void)
  99:keyboards/crkbd/serial.c **** { soft_serial_initiator_init(transactions, TID_LIMIT(transactions)); }
 100:keyboards/crkbd/serial.c **** 
 101:keyboards/crkbd/serial.c **** void serial_slave_init(void)
 102:keyboards/crkbd/serial.c **** { soft_serial_target_init(transactions, TID_LIMIT(transactions)); }
 103:keyboards/crkbd/serial.c **** 
 104:keyboards/crkbd/serial.c **** // 0 => no error
 105:keyboards/crkbd/serial.c **** // 1 => slave did not respond
 106:keyboards/crkbd/serial.c **** // 2 => checksum error
 107:keyboards/crkbd/serial.c **** int serial_update_buffers()
 108:keyboards/crkbd/serial.c **** {
 109:keyboards/crkbd/serial.c ****     int result;
 110:keyboards/crkbd/serial.c ****     result = soft_serial_transaction();
 111:keyboards/crkbd/serial.c ****     return result;
 112:keyboards/crkbd/serial.c **** }
 113:keyboards/crkbd/serial.c **** 
 114:keyboards/crkbd/serial.c **** #endif // end of Simple API (OLD API, compatible with let's split serial.c)
 115:keyboards/crkbd/serial.c **** ////////////////////////////////////////////////////////////////////////////
 116:keyboards/crkbd/serial.c **** 
 117:keyboards/crkbd/serial.c **** #define ALWAYS_INLINE __attribute__((always_inline))
 118:keyboards/crkbd/serial.c **** #define NO_INLINE __attribute__((noinline))
 119:keyboards/crkbd/serial.c **** #define _delay_sub_us(x)    __builtin_avr_delay_cycles(x)
 120:keyboards/crkbd/serial.c **** 
 121:keyboards/crkbd/serial.c **** // parity check
 122:keyboards/crkbd/serial.c **** #define ODD_PARITY 1
 123:keyboards/crkbd/serial.c **** #define EVEN_PARITY 0
 124:keyboards/crkbd/serial.c **** #define PARITY EVEN_PARITY
 125:keyboards/crkbd/serial.c **** 
 126:keyboards/crkbd/serial.c **** #ifdef SERIAL_DELAY
 127:keyboards/crkbd/serial.c ****   // custom setup in config.h
 128:keyboards/crkbd/serial.c ****   // #define TID_SEND_ADJUST 2
 129:keyboards/crkbd/serial.c ****   // #define SERIAL_DELAY 6             // micro sec
 130:keyboards/crkbd/serial.c ****   // #define READ_WRITE_START_ADJUST 30 // cycles
 131:keyboards/crkbd/serial.c ****   // #define READ_WRITE_WIDTH_ADJUST 8 // cycles
 132:keyboards/crkbd/serial.c **** #else
 133:keyboards/crkbd/serial.c **** // ============ Standard setups ============
 134:keyboards/crkbd/serial.c **** 
 135:keyboards/crkbd/serial.c **** #ifndef SELECT_SOFT_SERIAL_SPEED
 136:keyboards/crkbd/serial.c **** #define SELECT_SOFT_SERIAL_SPEED 1
 137:keyboards/crkbd/serial.c **** //  0: about 189kbps
 138:keyboards/crkbd/serial.c **** //  1: about 137kbps (default)
 139:keyboards/crkbd/serial.c **** //  2: about 75kbps
 140:keyboards/crkbd/serial.c **** //  3: about 39kbps
 141:keyboards/crkbd/serial.c **** //  4: about 26kbps
 142:keyboards/crkbd/serial.c **** //  5: about 20kbps
 143:keyboards/crkbd/serial.c **** #endif
 144:keyboards/crkbd/serial.c **** 
 145:keyboards/crkbd/serial.c **** #if __GNUC__ < 6
 146:keyboards/crkbd/serial.c ****   #define TID_SEND_ADJUST 14
 147:keyboards/crkbd/serial.c **** #else
 148:keyboards/crkbd/serial.c ****   #define TID_SEND_ADJUST 2
 149:keyboards/crkbd/serial.c **** #endif
 150:keyboards/crkbd/serial.c **** 
 151:keyboards/crkbd/serial.c **** #if SELECT_SOFT_SERIAL_SPEED == 0
 152:keyboards/crkbd/serial.c ****   // Very High speed
 153:keyboards/crkbd/serial.c ****   #define SERIAL_DELAY 4             // micro sec
 154:keyboards/crkbd/serial.c ****   #if __GNUC__ < 6
 155:keyboards/crkbd/serial.c ****     #define READ_WRITE_START_ADJUST 33 // cycles
 156:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 3 // cycles
 157:keyboards/crkbd/serial.c ****   #else
 158:keyboards/crkbd/serial.c ****     #define READ_WRITE_START_ADJUST 34 // cycles
 159:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 7 // cycles
 160:keyboards/crkbd/serial.c ****   #endif
 161:keyboards/crkbd/serial.c **** #elif SELECT_SOFT_SERIAL_SPEED == 1
 162:keyboards/crkbd/serial.c ****   // High speed
 163:keyboards/crkbd/serial.c ****   #define SERIAL_DELAY 6             // micro sec
 164:keyboards/crkbd/serial.c ****   #if __GNUC__ < 6
 165:keyboards/crkbd/serial.c ****     #define READ_WRITE_START_ADJUST 30 // cycles
 166:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 3 // cycles
 167:keyboards/crkbd/serial.c ****   #else
 168:keyboards/crkbd/serial.c ****     #define READ_WRITE_START_ADJUST 33 // cycles
 169:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 7 // cycles
 170:keyboards/crkbd/serial.c ****   #endif
 171:keyboards/crkbd/serial.c **** #elif SELECT_SOFT_SERIAL_SPEED == 2
 172:keyboards/crkbd/serial.c ****   // Middle speed
 173:keyboards/crkbd/serial.c ****   #define SERIAL_DELAY 12            // micro sec
 174:keyboards/crkbd/serial.c ****   #define READ_WRITE_START_ADJUST 30 // cycles
 175:keyboards/crkbd/serial.c ****   #if __GNUC__ < 6
 176:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 3 // cycles
 177:keyboards/crkbd/serial.c ****   #else
 178:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 7 // cycles
 179:keyboards/crkbd/serial.c ****   #endif
 180:keyboards/crkbd/serial.c **** #elif SELECT_SOFT_SERIAL_SPEED == 3
 181:keyboards/crkbd/serial.c ****   // Low speed
 182:keyboards/crkbd/serial.c ****   #define SERIAL_DELAY 24            // micro sec
 183:keyboards/crkbd/serial.c ****   #define READ_WRITE_START_ADJUST 30 // cycles
 184:keyboards/crkbd/serial.c ****   #if __GNUC__ < 6
 185:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 3 // cycles
 186:keyboards/crkbd/serial.c ****   #else
 187:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 7 // cycles
 188:keyboards/crkbd/serial.c ****   #endif
 189:keyboards/crkbd/serial.c **** #elif SELECT_SOFT_SERIAL_SPEED == 4
 190:keyboards/crkbd/serial.c ****   // Very Low speed
 191:keyboards/crkbd/serial.c ****   #define SERIAL_DELAY 36            // micro sec
 192:keyboards/crkbd/serial.c ****   #define READ_WRITE_START_ADJUST 30 // cycles
 193:keyboards/crkbd/serial.c ****   #if __GNUC__ < 6
 194:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 3 // cycles
 195:keyboards/crkbd/serial.c ****   #else
 196:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 7 // cycles
 197:keyboards/crkbd/serial.c ****   #endif
 198:keyboards/crkbd/serial.c **** #elif SELECT_SOFT_SERIAL_SPEED == 5
 199:keyboards/crkbd/serial.c ****   // Ultra Low speed
 200:keyboards/crkbd/serial.c ****   #define SERIAL_DELAY 48            // micro sec
 201:keyboards/crkbd/serial.c ****   #define READ_WRITE_START_ADJUST 30 // cycles
 202:keyboards/crkbd/serial.c ****   #if __GNUC__ < 6
 203:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 3 // cycles
 204:keyboards/crkbd/serial.c ****   #else
 205:keyboards/crkbd/serial.c ****     #define READ_WRITE_WIDTH_ADJUST 7 // cycles
 206:keyboards/crkbd/serial.c ****   #endif
 207:keyboards/crkbd/serial.c **** #else
 208:keyboards/crkbd/serial.c **** #error invalid SELECT_SOFT_SERIAL_SPEED value
 209:keyboards/crkbd/serial.c **** #endif /* SELECT_SOFT_SERIAL_SPEED */
 210:keyboards/crkbd/serial.c **** #endif /* SERIAL_DELAY */
 211:keyboards/crkbd/serial.c **** 
 212:keyboards/crkbd/serial.c **** #define SERIAL_DELAY_HALF1 (SERIAL_DELAY/2)
 213:keyboards/crkbd/serial.c **** #define SERIAL_DELAY_HALF2 (SERIAL_DELAY - SERIAL_DELAY/2)
 214:keyboards/crkbd/serial.c **** 
 215:keyboards/crkbd/serial.c **** #define SLAVE_INT_WIDTH_US 1
 216:keyboards/crkbd/serial.c **** #ifndef SERIAL_USE_MULTI_TRANSACTION
 217:keyboards/crkbd/serial.c ****   #define SLAVE_INT_RESPONSE_TIME SERIAL_DELAY
 218:keyboards/crkbd/serial.c **** #else
 219:keyboards/crkbd/serial.c ****   #define SLAVE_INT_ACK_WIDTH_UNIT 2
 220:keyboards/crkbd/serial.c ****   #define SLAVE_INT_ACK_WIDTH 4
 221:keyboards/crkbd/serial.c **** #endif
 222:keyboards/crkbd/serial.c **** 
 223:keyboards/crkbd/serial.c **** static SSTD_t *Transaction_table = NULL;
 224:keyboards/crkbd/serial.c **** static uint8_t Transaction_table_size = 0;
 225:keyboards/crkbd/serial.c **** 
 226:keyboards/crkbd/serial.c **** inline static void serial_delay(void) ALWAYS_INLINE;
 227:keyboards/crkbd/serial.c **** inline static
 228:keyboards/crkbd/serial.c **** void serial_delay(void) {
 229:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY);
 230:keyboards/crkbd/serial.c **** }
 231:keyboards/crkbd/serial.c **** 
 232:keyboards/crkbd/serial.c **** inline static void serial_delay_half1(void) ALWAYS_INLINE;
 233:keyboards/crkbd/serial.c **** inline static
 234:keyboards/crkbd/serial.c **** void serial_delay_half1(void) {
 235:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF1);
 236:keyboards/crkbd/serial.c **** }
 237:keyboards/crkbd/serial.c **** 
 238:keyboards/crkbd/serial.c **** inline static void serial_delay_half2(void) ALWAYS_INLINE;
 239:keyboards/crkbd/serial.c **** inline static
 240:keyboards/crkbd/serial.c **** void serial_delay_half2(void) {
 241:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF2);
 242:keyboards/crkbd/serial.c **** }
 243:keyboards/crkbd/serial.c **** 
 244:keyboards/crkbd/serial.c **** inline static void serial_output(void) ALWAYS_INLINE;
 245:keyboards/crkbd/serial.c **** inline static
 246:keyboards/crkbd/serial.c **** void serial_output(void) {
 247:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
 248:keyboards/crkbd/serial.c **** }
 249:keyboards/crkbd/serial.c **** 
 250:keyboards/crkbd/serial.c **** // make the serial pin an input with pull-up resistor
 251:keyboards/crkbd/serial.c **** inline static void serial_input_with_pullup(void) ALWAYS_INLINE;
 252:keyboards/crkbd/serial.c **** inline static
 253:keyboards/crkbd/serial.c **** void serial_input_with_pullup(void) {
 254:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
 255:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 256:keyboards/crkbd/serial.c **** }
 257:keyboards/crkbd/serial.c **** 
 258:keyboards/crkbd/serial.c **** inline static uint8_t serial_read_pin(void) ALWAYS_INLINE;
 259:keyboards/crkbd/serial.c **** inline static
 260:keyboards/crkbd/serial.c **** uint8_t serial_read_pin(void) {
 261:keyboards/crkbd/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
 262:keyboards/crkbd/serial.c **** }
 263:keyboards/crkbd/serial.c **** 
 264:keyboards/crkbd/serial.c **** inline static void serial_low(void) ALWAYS_INLINE;
 265:keyboards/crkbd/serial.c **** inline static
 266:keyboards/crkbd/serial.c **** void serial_low(void) {
 267:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 268:keyboards/crkbd/serial.c **** }
 269:keyboards/crkbd/serial.c **** 
 270:keyboards/crkbd/serial.c **** inline static void serial_high(void) ALWAYS_INLINE;
 271:keyboards/crkbd/serial.c **** inline static
 272:keyboards/crkbd/serial.c **** void serial_high(void) {
 273:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 274:keyboards/crkbd/serial.c **** }
 275:keyboards/crkbd/serial.c **** 
 276:keyboards/crkbd/serial.c **** void soft_serial_initiator_init(SSTD_t *sstd_table, int sstd_table_size)
 277:keyboards/crkbd/serial.c **** {
 278:keyboards/crkbd/serial.c ****     Transaction_table = sstd_table;
 279:keyboards/crkbd/serial.c ****     Transaction_table_size = (uint8_t)sstd_table_size;
 280:keyboards/crkbd/serial.c ****     serial_output();
 281:keyboards/crkbd/serial.c ****     serial_high();
 282:keyboards/crkbd/serial.c **** }
 283:keyboards/crkbd/serial.c **** 
 284:keyboards/crkbd/serial.c **** void soft_serial_target_init(SSTD_t *sstd_table, int sstd_table_size)
 285:keyboards/crkbd/serial.c **** {
 286:keyboards/crkbd/serial.c ****     Transaction_table = sstd_table;
 287:keyboards/crkbd/serial.c ****     Transaction_table_size = (uint8_t)sstd_table_size;
 288:keyboards/crkbd/serial.c ****     serial_input_with_pullup();
 289:keyboards/crkbd/serial.c **** 
 290:keyboards/crkbd/serial.c ****     // Enable INT0-INT3,INT6
 291:keyboards/crkbd/serial.c ****     EIMSK |= EIMSK_BIT;
 292:keyboards/crkbd/serial.c **** #if SERIAL_PIN_MASK == _BV(PE6)
 293:keyboards/crkbd/serial.c ****     // Trigger on falling edge of INT6
 294:keyboards/crkbd/serial.c ****     EICRB &= EICRx_BIT;
 295:keyboards/crkbd/serial.c **** #else
 296:keyboards/crkbd/serial.c ****     // Trigger on falling edge of INT0-INT3
 297:keyboards/crkbd/serial.c ****     EICRA &= EICRx_BIT;
 298:keyboards/crkbd/serial.c **** #endif
 299:keyboards/crkbd/serial.c **** }
 300:keyboards/crkbd/serial.c **** 
 301:keyboards/crkbd/serial.c **** // Used by the sender to synchronize timing with the reciver.
 302:keyboards/crkbd/serial.c **** static void sync_recv(void) NO_INLINE;
 303:keyboards/crkbd/serial.c **** static
 304:keyboards/crkbd/serial.c **** void sync_recv(void) {
  15               		.loc 1 304 22 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 305:keyboards/crkbd/serial.c ****   for (uint8_t i = 0; i < SERIAL_DELAY*5 && serial_read_pin(); i++ ) {
  21               		.loc 1 305 3 view .LVU1
  22               	.LBB124:
  23               		.loc 1 305 8 view .LVU2
  24               	.LVL0:
  25               		.loc 1 305 8 is_stmt 0 view .LVU3
  26               	.LBE124:
 304:keyboards/crkbd/serial.c ****   for (uint8_t i = 0; i < SERIAL_DELAY*5 && serial_read_pin(); i++ ) {
  27               		.loc 1 304 22 view .LVU4
  28 0000 8EE1      		ldi r24,lo8(30)
  29               	.LVL1:
  30               	.L2:
  31               	.LBB127:
  32               	.LBB125:
  33               	.LBI125:
 260:keyboards/crkbd/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
  34               		.loc 1 260 9 is_stmt 1 view .LVU5
  35               	.LBB126:
 261:keyboards/crkbd/serial.c **** }
  36               		.loc 1 261 3 view .LVU6
  37               	.LBE126:
  38               	.LBE125:
  39               		.loc 1 305 42 is_stmt 0 view .LVU7
  40 0002 4A9B      		sbis 0x9,2
  41 0004 00C0      		rjmp .L7
 306:keyboards/crkbd/serial.c ****   }
  42               		.loc 1 306 3 is_stmt 1 discriminator 4 view .LVU8
  43               	.LVL2:
  44               		.loc 1 306 3 is_stmt 0 discriminator 4 view .LVU9
  45 0006 8150      		subi r24,lo8(-(-1))
  46               	.LVL3:
 305:keyboards/crkbd/serial.c ****   }
  47               		.loc 1 305 3 discriminator 4 view .LVU10
  48 0008 01F4      		brne .L2
  49               	.LVL4:
  50               	.L7:
 305:keyboards/crkbd/serial.c ****   }
  51               		.loc 1 305 3 discriminator 4 view .LVU11
  52               	.LBE127:
 307:keyboards/crkbd/serial.c ****   // This shouldn't hang if the target disconnects because the
 308:keyboards/crkbd/serial.c ****   // serial line will float to high if the target does disconnect.
 309:keyboards/crkbd/serial.c ****   while (!serial_read_pin());
  53               		.loc 1 309 29 is_stmt 1 discriminator 1 view .LVU12
  54               	.LBB128:
  55               	.LBI128:
 260:keyboards/crkbd/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
  56               		.loc 1 260 9 discriminator 1 view .LVU13
  57               	.LBB129:
 261:keyboards/crkbd/serial.c **** }
  58               		.loc 1 261 3 discriminator 1 view .LVU14
  59               	.LBE129:
  60               	.LBE128:
  61               		.loc 1 309 9 is_stmt 0 discriminator 1 view .LVU15
  62 000a 4A9B      		sbis 0x9,2
  63 000c 00C0      		rjmp .L7
  64               	/* epilogue start */
 310:keyboards/crkbd/serial.c **** }
  65               		.loc 1 310 1 view .LVU16
  66 000e 0895      		ret
  67               		.cfi_endproc
  68               	.LFE16:
  70               		.section	.text.sync_send,"ax",@progbits
  72               	sync_send:
  73               	.LFB17:
 311:keyboards/crkbd/serial.c **** 
 312:keyboards/crkbd/serial.c **** // Used by the reciver to send a synchronization signal to the sender.
 313:keyboards/crkbd/serial.c **** static void sync_send(void) NO_INLINE;
 314:keyboards/crkbd/serial.c **** static
 315:keyboards/crkbd/serial.c **** void sync_send(void) {
  74               		.loc 1 315 22 is_stmt 1 view -0
  75               		.cfi_startproc
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 0 */
  79               	.L__stack_usage = 0
 316:keyboards/crkbd/serial.c ****   serial_low();
  80               		.loc 1 316 3 view .LVU18
  81               	.LBB130:
  82               	.LBI130:
 266:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
  83               		.loc 1 266 6 view .LVU19
  84               	.LBB131:
 267:keyboards/crkbd/serial.c **** }
  85               		.loc 1 267 3 view .LVU20
 267:keyboards/crkbd/serial.c **** }
  86               		.loc 1 267 19 is_stmt 0 view .LVU21
  87 0000 5A98      		cbi 0xb,2
  88               	.LBE131:
  89               	.LBE130:
 317:keyboards/crkbd/serial.c ****   serial_delay();
  90               		.loc 1 317 3 is_stmt 1 view .LVU22
  91               	.LBB132:
  92               	.LBI132:
 228:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY);
  93               		.loc 1 228 6 view .LVU23
  94               	.LBE132:
 229:keyboards/crkbd/serial.c **** }
  95               		.loc 1 229 3 view .LVU24
  96               	.LVL5:
  97               	.LBB135:
  98               	.LBB133:
  99               	.LBI133:
 100               		.file 2 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
   1:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 101               		.loc 2 255 1 view .LVU25
 102               	.LBB134:
 256:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 103               		.loc 2 257 2 view .LVU26
 258:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 104               		.loc 2 261 2 view .LVU27
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 105               		.loc 2 262 2 view .LVU28
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 106               		.loc 2 263 2 view .LVU29
 264:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 107               		.loc 2 273 3 view .LVU30
 274:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 108               		.loc 2 276 2 view .LVU31
 109 0002 80E2      		ldi r24,lo8(32)
 110 0004 8A95      	1:	dec r24
 111 0006 01F4      		brne 1b
 112               	.LVL6:
 113               		.loc 2 276 2 is_stmt 0 view .LVU32
 114               	.LBE134:
 115               	.LBE133:
 116               	.LBE135:
 318:keyboards/crkbd/serial.c ****   serial_high();
 117               		.loc 1 318 3 is_stmt 1 view .LVU33
 118               	.LBB136:
 119               	.LBI136:
 272:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 120               		.loc 1 272 6 view .LVU34
 121               	.LBB137:
 273:keyboards/crkbd/serial.c **** }
 122               		.loc 1 273 3 view .LVU35
 273:keyboards/crkbd/serial.c **** }
 123               		.loc 1 273 19 is_stmt 0 view .LVU36
 124 0008 5A9A      		sbi 0xb,2
 125               	/* epilogue start */
 126               	.LBE137:
 127               	.LBE136:
 319:keyboards/crkbd/serial.c **** }
 128               		.loc 1 319 1 view .LVU37
 129 000a 0895      		ret
 130               		.cfi_endproc
 131               	.LFE17:
 133               		.section	.text.serial_read_chunk,"ax",@progbits
 135               	serial_read_chunk:
 136               	.LVL7:
 137               	.LFB18:
 320:keyboards/crkbd/serial.c **** 
 321:keyboards/crkbd/serial.c **** // Reads a byte from the serial line
 322:keyboards/crkbd/serial.c **** static uint8_t serial_read_chunk(uint8_t *pterrcount, uint8_t bit) NO_INLINE;
 323:keyboards/crkbd/serial.c **** static uint8_t serial_read_chunk(uint8_t *pterrcount, uint8_t bit) {
 138               		.loc 1 323 68 is_stmt 1 view -0
 139               		.cfi_startproc
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
 144               		.loc 1 323 68 is_stmt 0 view .LVU39
 145 0000 FC01      		movw r30,r24
 324:keyboards/crkbd/serial.c ****     uint8_t byte, i, p, pb;
 146               		.loc 1 324 5 is_stmt 1 view .LVU40
 325:keyboards/crkbd/serial.c **** 
 326:keyboards/crkbd/serial.c ****   _delay_sub_us(READ_WRITE_START_ADJUST);
 147               		.loc 1 326 3 view .LVU41
 148 0002 3BE0      		ldi r19,lo8(11)
 149 0004 3A95      	1:	dec r19
 150 0006 01F4      		brne 1b
 327:keyboards/crkbd/serial.c ****   for( i = 0, byte = 0, p = PARITY; i < bit; i++ ) {
 151               		.loc 1 327 3 view .LVU42
 152               	.LVL8:
 153               		.loc 1 327 27 is_stmt 0 view .LVU43
 154 0008 20E0      		ldi r18,0
 155               		.loc 1 327 10 view .LVU44
 156 000a 90E0      		ldi r25,0
 157               		.loc 1 327 20 view .LVU45
 158 000c 80E0      		ldi r24,0
 159               	.LVL9:
 328:keyboards/crkbd/serial.c ****       serial_delay_half1();   // read the middle of pulses
 329:keyboards/crkbd/serial.c ****       if( serial_read_pin() ) {
 330:keyboards/crkbd/serial.c ****           byte = (byte << 1) | 1; p ^= 1;
 160               		.loc 1 330 37 view .LVU46
 161 000e 31E0      		ldi r19,lo8(1)
 162               	.LVL10:
 163               	.L14:
 328:keyboards/crkbd/serial.c ****       serial_delay_half1();   // read the middle of pulses
 164               		.loc 1 328 7 is_stmt 1 view .LVU47
 165               	.LBB138:
 166               	.LBI138:
 234:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF1);
 167               		.loc 1 234 6 view .LVU48
 168               	.LBE138:
 235:keyboards/crkbd/serial.c **** }
 169               		.loc 1 235 3 view .LVU49
 170               	.LBB141:
 171               	.LBB139:
 172               	.LBI139:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 173               		.loc 2 255 1 view .LVU50
 174               	.LBB140:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 175               		.loc 2 257 2 view .LVU51
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 176               		.loc 2 261 2 view .LVU52
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 177               		.loc 2 262 2 view .LVU53
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 178               		.loc 2 263 2 view .LVU54
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 179               		.loc 2 273 3 view .LVU55
 180               		.loc 2 276 2 view .LVU56
 181 0010 40E1      		ldi r20,lo8(16)
 182 0012 4A95      	1:	dec r20
 183 0014 01F4      		brne 1b
 184               	.LVL11:
 185               		.loc 2 276 2 is_stmt 0 view .LVU57
 186               	.LBE140:
 187               	.LBE139:
 188               	.LBE141:
 329:keyboards/crkbd/serial.c ****           byte = (byte << 1) | 1; p ^= 1;
 189               		.loc 1 329 7 is_stmt 1 view .LVU58
 190               	.LBB142:
 191               	.LBI142:
 260:keyboards/crkbd/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
 192               		.loc 1 260 9 view .LVU59
 193               	.LBB143:
 261:keyboards/crkbd/serial.c **** }
 194               		.loc 1 261 3 view .LVU60
 195               	.LBE143:
 196               	.LBE142:
 197               		.loc 1 330 24 is_stmt 0 view .LVU61
 198 0016 880F      		lsl r24
 199               	.LVL12:
 329:keyboards/crkbd/serial.c ****           byte = (byte << 1) | 1; p ^= 1;
 200               		.loc 1 329 9 view .LVU62
 201 0018 4A9B      		sbis 0x9,2
 202 001a 00C0      		rjmp .L13
 203               		.loc 1 330 11 is_stmt 1 view .LVU63
 204               		.loc 1 330 30 is_stmt 0 view .LVU64
 205 001c 8160      		ori r24,lo8(1)
 206               	.LVL13:
 207               		.loc 1 330 35 is_stmt 1 view .LVU65
 208               		.loc 1 330 37 is_stmt 0 view .LVU66
 209 001e 2327      		eor r18,r19
 210               	.LVL14:
 211               	.L13:
 331:keyboards/crkbd/serial.c ****       } else {
 332:keyboards/crkbd/serial.c ****           byte = (byte << 1) | 0; p ^= 0;
 333:keyboards/crkbd/serial.c ****       }
 334:keyboards/crkbd/serial.c ****       _delay_sub_us(READ_WRITE_WIDTH_ADJUST);
 212               		.loc 1 334 7 is_stmt 1 discriminator 2 view .LVU67
 213 0020 42E0      		ldi r20,lo8(2)
 214 0022 4A95      	1:	dec r20
 215 0024 01F4      		brne 1b
 216 0026 0000      		nop
 335:keyboards/crkbd/serial.c ****       serial_delay_half2();
 217               		.loc 1 335 7 discriminator 2 view .LVU68
 218               	.LBB144:
 219               	.LBI144:
 240:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF2);
 220               		.loc 1 240 6 discriminator 2 view .LVU69
 221               	.LBE144:
 241:keyboards/crkbd/serial.c **** }
 222               		.loc 1 241 3 discriminator 2 view .LVU70
 223               	.LVL15:
 224               	.LBB147:
 225               	.LBB145:
 226               	.LBI145:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 227               		.loc 2 255 1 discriminator 2 view .LVU71
 228               	.LBB146:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229               		.loc 2 257 2 discriminator 2 view .LVU72
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 230               		.loc 2 261 2 discriminator 2 view .LVU73
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 231               		.loc 2 262 2 discriminator 2 view .LVU74
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 232               		.loc 2 263 2 discriminator 2 view .LVU75
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 233               		.loc 2 273 3 discriminator 2 view .LVU76
 234               		.loc 2 276 2 discriminator 2 view .LVU77
 235 0028 40E1      		ldi r20,lo8(16)
 236 002a 4A95      	1:	dec r20
 237 002c 01F4      		brne 1b
 238               	.LVL16:
 239               		.loc 2 276 2 is_stmt 0 discriminator 2 view .LVU78
 240               	.LBE146:
 241               	.LBE145:
 242               	.LBE147:
 327:keyboards/crkbd/serial.c ****       serial_delay_half1();   // read the middle of pulses
 243               		.loc 1 327 47 discriminator 2 view .LVU79
 244 002e 9F5F      		subi r25,lo8(-(1))
 245               	.LVL17:
 327:keyboards/crkbd/serial.c ****       serial_delay_half1();   // read the middle of pulses
 246               		.loc 1 327 3 discriminator 2 view .LVU80
 247 0030 6913      		cpse r22,r25
 248 0032 00C0      		rjmp .L14
 336:keyboards/crkbd/serial.c ****   }
 337:keyboards/crkbd/serial.c ****   /* recive parity bit */
 338:keyboards/crkbd/serial.c ****   serial_delay_half1();   // read the middle of pulses
 249               		.loc 1 338 3 is_stmt 1 view .LVU81
 250               	.LBB148:
 251               	.LBI148:
 234:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF1);
 252               		.loc 1 234 6 view .LVU82
 253               	.LBE148:
 235:keyboards/crkbd/serial.c **** }
 254               		.loc 1 235 3 view .LVU83
 255               	.LVL18:
 256               	.LBB151:
 257               	.LBB149:
 258               	.LBI149:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 259               		.loc 2 255 1 view .LVU84
 260               	.LBB150:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 261               		.loc 2 257 2 view .LVU85
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 262               		.loc 2 261 2 view .LVU86
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 263               		.loc 2 262 2 view .LVU87
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 264               		.loc 2 263 2 view .LVU88
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 265               		.loc 2 273 3 view .LVU89
 266               		.loc 2 276 2 view .LVU90
 267 0034 90E1      		ldi r25,lo8(16)
 268 0036 9A95      	1:	dec r25
 269 0038 01F4      		brne 1b
 270               	.LVL19:
 271               		.loc 2 276 2 is_stmt 0 view .LVU91
 272               	.LBE150:
 273               	.LBE149:
 274               	.LBE151:
 339:keyboards/crkbd/serial.c ****   pb = serial_read_pin();
 275               		.loc 1 339 3 is_stmt 1 view .LVU92
 276               	.LBB152:
 277               	.LBI152:
 260:keyboards/crkbd/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
 278               		.loc 1 260 9 view .LVU93
 279               	.LBB153:
 261:keyboards/crkbd/serial.c **** }
 280               		.loc 1 261 3 view .LVU94
 261:keyboards/crkbd/serial.c **** }
 281               		.loc 1 261 13 is_stmt 0 view .LVU95
 282 003a 99B1      		in r25,0x9
 283               	.LVL20:
 261:keyboards/crkbd/serial.c **** }
 284               		.loc 1 261 13 view .LVU96
 285               	.LBE153:
 286               	.LBE152:
 340:keyboards/crkbd/serial.c ****   _delay_sub_us(READ_WRITE_WIDTH_ADJUST);
 287               		.loc 1 340 3 is_stmt 1 view .LVU97
 288 003c 32E0      		ldi r19,lo8(2)
 289 003e 3A95      	1:	dec r19
 290 0040 01F4      		brne 1b
 291 0042 0000      		nop
 341:keyboards/crkbd/serial.c ****   serial_delay_half2();
 292               		.loc 1 341 3 view .LVU98
 293               	.LBB155:
 294               	.LBI155:
 240:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF2);
 295               		.loc 1 240 6 view .LVU99
 296               	.LBE155:
 241:keyboards/crkbd/serial.c **** }
 297               		.loc 1 241 3 view .LVU100
 298               	.LVL21:
 299               	.LBB158:
 300               	.LBB156:
 301               	.LBI156:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 302               		.loc 2 255 1 view .LVU101
 303               	.LBB157:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 304               		.loc 2 257 2 view .LVU102
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 305               		.loc 2 261 2 view .LVU103
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 306               		.loc 2 262 2 view .LVU104
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 307               		.loc 2 263 2 view .LVU105
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 308               		.loc 2 273 3 view .LVU106
 309               		.loc 2 276 2 view .LVU107
 310 0044 40E1      		ldi r20,lo8(16)
 311 0046 4A95      	1:	dec r20
 312 0048 01F4      		brne 1b
 313               	.LVL22:
 314               		.loc 2 276 2 is_stmt 0 view .LVU108
 315               	.LBE157:
 316               	.LBE156:
 317               	.LBE158:
 342:keyboards/crkbd/serial.c **** 
 343:keyboards/crkbd/serial.c ****   *pterrcount += (p != pb)? 1 : 0;
 318               		.loc 1 343 3 is_stmt 1 view .LVU109
 319               	.LBB159:
 320               	.LBB154:
 261:keyboards/crkbd/serial.c **** }
 321               		.loc 1 261 10 is_stmt 0 view .LVU110
 322 004a 92FB      		bst r25,2
 323 004c 9927      		clr r25
 324 004e 90F9      		bld r25,0
 325               	.LVL23:
 261:keyboards/crkbd/serial.c **** }
 326               		.loc 1 261 10 view .LVU111
 327               	.LBE154:
 328               	.LBE159:
 329               		.loc 1 343 15 view .LVU112
 330 0050 9227      		eor r25,r18
 331 0052 2081      		ld r18,Z
 332               	.LVL24:
 333               		.loc 1 343 15 view .LVU113
 334 0054 920F      		add r25,r18
 335 0056 9083      		st Z,r25
 344:keyboards/crkbd/serial.c **** 
 345:keyboards/crkbd/serial.c ****   return byte;
 336               		.loc 1 345 3 is_stmt 1 view .LVU114
 337               	/* epilogue start */
 346:keyboards/crkbd/serial.c **** }
 338               		.loc 1 346 1 is_stmt 0 view .LVU115
 339 0058 0895      		ret
 340               		.cfi_endproc
 341               	.LFE18:
 343               		.section	.text.serial_recive_packet,"ax",@progbits
 345               	serial_recive_packet:
 346               	.LVL25:
 347               	.LFB21:
 347:keyboards/crkbd/serial.c **** 
 348:keyboards/crkbd/serial.c **** // Sends a byte with MSB ordering
 349:keyboards/crkbd/serial.c **** void serial_write_chunk(uint8_t data, uint8_t bit) NO_INLINE;
 350:keyboards/crkbd/serial.c **** void serial_write_chunk(uint8_t data, uint8_t bit) {
 351:keyboards/crkbd/serial.c ****     uint8_t b, p;
 352:keyboards/crkbd/serial.c ****     for( p = PARITY, b = 1<<(bit-1); b ; b >>= 1) {
 353:keyboards/crkbd/serial.c ****         if(data & b) {
 354:keyboards/crkbd/serial.c ****             serial_high(); p ^= 1;
 355:keyboards/crkbd/serial.c ****         } else {
 356:keyboards/crkbd/serial.c ****             serial_low();  p ^= 0;
 357:keyboards/crkbd/serial.c ****         }
 358:keyboards/crkbd/serial.c ****         serial_delay();
 359:keyboards/crkbd/serial.c ****     }
 360:keyboards/crkbd/serial.c ****     /* send parity bit */
 361:keyboards/crkbd/serial.c ****     if(p & 1) { serial_high(); }
 362:keyboards/crkbd/serial.c ****     else      { serial_low(); }
 363:keyboards/crkbd/serial.c ****     serial_delay();
 364:keyboards/crkbd/serial.c **** 
 365:keyboards/crkbd/serial.c ****     serial_low(); // sync_send() / senc_recv() need raise edge
 366:keyboards/crkbd/serial.c **** }
 367:keyboards/crkbd/serial.c **** 
 368:keyboards/crkbd/serial.c **** static void serial_send_packet(uint8_t *buffer, uint8_t size) NO_INLINE;
 369:keyboards/crkbd/serial.c **** static
 370:keyboards/crkbd/serial.c **** void serial_send_packet(uint8_t *buffer, uint8_t size) {
 371:keyboards/crkbd/serial.c ****   for (uint8_t i = 0; i < size; ++i) {
 372:keyboards/crkbd/serial.c ****     uint8_t data;
 373:keyboards/crkbd/serial.c ****     data = buffer[i];
 374:keyboards/crkbd/serial.c ****     sync_send();
 375:keyboards/crkbd/serial.c ****     serial_write_chunk(data,8);
 376:keyboards/crkbd/serial.c ****   }
 377:keyboards/crkbd/serial.c **** }
 378:keyboards/crkbd/serial.c **** 
 379:keyboards/crkbd/serial.c **** static uint8_t serial_recive_packet(uint8_t *buffer, uint8_t size) NO_INLINE;
 380:keyboards/crkbd/serial.c **** static
 381:keyboards/crkbd/serial.c **** uint8_t serial_recive_packet(uint8_t *buffer, uint8_t size) {
 348               		.loc 1 381 61 is_stmt 1 view -0
 349               		.cfi_startproc
 350               		.loc 1 381 61 is_stmt 0 view .LVU117
 351 0000 EF92      		push r14
 352               	.LCFI0:
 353               		.cfi_def_cfa_offset 3
 354               		.cfi_offset 14, -2
 355 0002 FF92      		push r15
 356               	.LCFI1:
 357               		.cfi_def_cfa_offset 4
 358               		.cfi_offset 15, -3
 359 0004 0F93      		push r16
 360               	.LCFI2:
 361               		.cfi_def_cfa_offset 5
 362               		.cfi_offset 16, -4
 363 0006 1F93      		push r17
 364               	.LCFI3:
 365               		.cfi_def_cfa_offset 6
 366               		.cfi_offset 17, -5
 367 0008 CF93      		push r28
 368               	.LCFI4:
 369               		.cfi_def_cfa_offset 7
 370               		.cfi_offset 28, -6
 371 000a DF93      		push r29
 372               	.LCFI5:
 373               		.cfi_def_cfa_offset 8
 374               		.cfi_offset 29, -7
 375 000c 0F92      		push __tmp_reg__
 376               	.LCFI6:
 377               		.cfi_def_cfa_offset 9
 378 000e CDB7      		in r28,__SP_L__
 379 0010 DEB7      		in r29,__SP_H__
 380               	.LCFI7:
 381               		.cfi_def_cfa_register 28
 382               	/* prologue: function */
 383               	/* frame size = 1 */
 384               	/* stack size = 7 */
 385               	.L__stack_usage = 7
 382:keyboards/crkbd/serial.c ****   uint8_t pecount = 0;
 386               		.loc 1 382 3 is_stmt 1 view .LVU118
 387               		.loc 1 382 11 is_stmt 0 view .LVU119
 388 0012 1982      		std Y+1,__zero_reg__
 383:keyboards/crkbd/serial.c ****   for (uint8_t i = 0; i < size; ++i) {
 389               		.loc 1 383 3 is_stmt 1 view .LVU120
 390               	.LBB160:
 391               		.loc 1 383 8 view .LVU121
 392               	.LVL26:
 393               		.loc 1 383 8 is_stmt 0 view .LVU122
 394 0014 8C01      		movw r16,r24
 395 0016 7C01      		movw r14,r24
 396 0018 E60E      		add r14,r22
 397 001a F11C      		adc r15,__zero_reg__
 398               	.LVL27:
 399               	.L17:
 400               		.loc 1 383 3 discriminator 1 view .LVU123
 401 001c 0E15      		cp r16,r14
 402 001e 1F05      		cpc r17,r15
 403 0020 01F4      		brne .L18
 404               	.LBE160:
 384:keyboards/crkbd/serial.c ****     uint8_t data;
 385:keyboards/crkbd/serial.c ****     sync_recv();
 386:keyboards/crkbd/serial.c ****     data = serial_read_chunk(&pecount, 8);
 387:keyboards/crkbd/serial.c ****     buffer[i] = data;
 388:keyboards/crkbd/serial.c ****   }
 389:keyboards/crkbd/serial.c ****   return pecount == 0;
 405               		.loc 1 389 3 is_stmt 1 view .LVU124
 406               		.loc 1 389 18 is_stmt 0 view .LVU125
 407 0022 81E0      		ldi r24,lo8(1)
 408 0024 9981      		ldd r25,Y+1
 409 0026 9111      		cpse r25,__zero_reg__
 410 0028 80E0      		ldi r24,0
 411               	.L16:
 412               	/* epilogue start */
 390:keyboards/crkbd/serial.c **** }
 413               		.loc 1 390 1 view .LVU126
 414 002a 0F90      		pop __tmp_reg__
 415 002c DF91      		pop r29
 416 002e CF91      		pop r28
 417 0030 1F91      		pop r17
 418 0032 0F91      		pop r16
 419               	.LVL28:
 420               		.loc 1 390 1 view .LVU127
 421 0034 FF90      		pop r15
 422 0036 EF90      		pop r14
 423 0038 0895      		ret
 424               	.LVL29:
 425               	.L18:
 426               	.LBB162:
 427               	.LBB161:
 384:keyboards/crkbd/serial.c ****     uint8_t data;
 428               		.loc 1 384 5 is_stmt 1 discriminator 3 view .LVU128
 385:keyboards/crkbd/serial.c ****     data = serial_read_chunk(&pecount, 8);
 429               		.loc 1 385 5 discriminator 3 view .LVU129
 430 003a 0E94 0000 		call sync_recv
 431               	.LVL30:
 386:keyboards/crkbd/serial.c ****     buffer[i] = data;
 432               		.loc 1 386 5 discriminator 3 view .LVU130
 386:keyboards/crkbd/serial.c ****     buffer[i] = data;
 433               		.loc 1 386 12 is_stmt 0 discriminator 3 view .LVU131
 434 003e 68E0      		ldi r22,lo8(8)
 435 0040 CE01      		movw r24,r28
 436 0042 0196      		adiw r24,1
 437 0044 0E94 0000 		call serial_read_chunk
 438               	.LVL31:
 387:keyboards/crkbd/serial.c ****   }
 439               		.loc 1 387 5 is_stmt 1 discriminator 3 view .LVU132
 387:keyboards/crkbd/serial.c ****   }
 440               		.loc 1 387 15 is_stmt 0 discriminator 3 view .LVU133
 441 0048 F801      		movw r30,r16
 442 004a 8193      		st Z+,r24
 443 004c 8F01      		movw r16,r30
 444               	.LVL32:
 387:keyboards/crkbd/serial.c ****   }
 445               		.loc 1 387 15 discriminator 3 view .LVU134
 446 004e 00C0      		rjmp .L17
 447               	.LBE161:
 448               	.LBE162:
 449               		.cfi_endproc
 450               	.LFE21:
 452               		.section	.text.soft_serial_initiator_init,"ax",@progbits
 453               	.global	soft_serial_initiator_init
 455               	soft_serial_initiator_init:
 456               	.LVL33:
 457               	.LFB14:
 277:keyboards/crkbd/serial.c ****     Transaction_table = sstd_table;
 458               		.loc 1 277 1 is_stmt 1 view -0
 459               		.cfi_startproc
 460               	/* prologue: function */
 461               	/* frame size = 0 */
 462               	/* stack size = 0 */
 463               	.L__stack_usage = 0
 278:keyboards/crkbd/serial.c ****     Transaction_table_size = (uint8_t)sstd_table_size;
 464               		.loc 1 278 5 view .LVU136
 278:keyboards/crkbd/serial.c ****     Transaction_table_size = (uint8_t)sstd_table_size;
 465               		.loc 1 278 23 is_stmt 0 view .LVU137
 466 0000 9093 0000 		sts Transaction_table+1,r25
 467 0004 8093 0000 		sts Transaction_table,r24
 279:keyboards/crkbd/serial.c ****     serial_output();
 468               		.loc 1 279 5 is_stmt 1 view .LVU138
 279:keyboards/crkbd/serial.c ****     serial_output();
 469               		.loc 1 279 30 is_stmt 0 view .LVU139
 470 0008 6093 0000 		sts Transaction_table_size,r22
 280:keyboards/crkbd/serial.c ****     serial_high();
 471               		.loc 1 280 5 is_stmt 1 view .LVU140
 472               	.LBB163:
 473               	.LBI163:
 246:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
 474               		.loc 1 246 6 view .LVU141
 475               	.LBB164:
 247:keyboards/crkbd/serial.c **** }
 476               		.loc 1 247 3 view .LVU142
 247:keyboards/crkbd/serial.c **** }
 477               		.loc 1 247 18 is_stmt 0 view .LVU143
 478 000c 529A      		sbi 0xa,2
 479               	.LBE164:
 480               	.LBE163:
 281:keyboards/crkbd/serial.c **** }
 481               		.loc 1 281 5 is_stmt 1 view .LVU144
 482               	.LBB165:
 483               	.LBI165:
 272:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 484               		.loc 1 272 6 view .LVU145
 485               	.LBB166:
 273:keyboards/crkbd/serial.c **** }
 486               		.loc 1 273 3 view .LVU146
 273:keyboards/crkbd/serial.c **** }
 487               		.loc 1 273 19 is_stmt 0 view .LVU147
 488 000e 5A9A      		sbi 0xb,2
 489               	/* epilogue start */
 490               	.LBE166:
 491               	.LBE165:
 282:keyboards/crkbd/serial.c **** 
 492               		.loc 1 282 1 view .LVU148
 493 0010 0895      		ret
 494               		.cfi_endproc
 495               	.LFE14:
 497               		.section	.text.soft_serial_target_init,"ax",@progbits
 498               	.global	soft_serial_target_init
 500               	soft_serial_target_init:
 501               	.LVL34:
 502               	.LFB15:
 285:keyboards/crkbd/serial.c ****     Transaction_table = sstd_table;
 503               		.loc 1 285 1 is_stmt 1 view -0
 504               		.cfi_startproc
 505               	/* prologue: function */
 506               	/* frame size = 0 */
 507               	/* stack size = 0 */
 508               	.L__stack_usage = 0
 286:keyboards/crkbd/serial.c ****     Transaction_table_size = (uint8_t)sstd_table_size;
 509               		.loc 1 286 5 view .LVU150
 286:keyboards/crkbd/serial.c ****     Transaction_table_size = (uint8_t)sstd_table_size;
 510               		.loc 1 286 23 is_stmt 0 view .LVU151
 511 0000 9093 0000 		sts Transaction_table+1,r25
 512 0004 8093 0000 		sts Transaction_table,r24
 287:keyboards/crkbd/serial.c ****     serial_input_with_pullup();
 513               		.loc 1 287 5 is_stmt 1 view .LVU152
 287:keyboards/crkbd/serial.c ****     serial_input_with_pullup();
 514               		.loc 1 287 30 is_stmt 0 view .LVU153
 515 0008 6093 0000 		sts Transaction_table_size,r22
 288:keyboards/crkbd/serial.c **** 
 516               		.loc 1 288 5 is_stmt 1 view .LVU154
 517               	.LBB167:
 518               	.LBI167:
 253:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
 519               		.loc 1 253 6 view .LVU155
 520               	.LBB168:
 254:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 521               		.loc 1 254 3 view .LVU156
 254:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 522               		.loc 1 254 19 is_stmt 0 view .LVU157
 523 000c 5298      		cbi 0xa,2
 255:keyboards/crkbd/serial.c **** }
 524               		.loc 1 255 3 is_stmt 1 view .LVU158
 255:keyboards/crkbd/serial.c **** }
 525               		.loc 1 255 19 is_stmt 0 view .LVU159
 526 000e 5A9A      		sbi 0xb,2
 527               	.LBE168:
 528               	.LBE167:
 291:keyboards/crkbd/serial.c **** #if SERIAL_PIN_MASK == _BV(PE6)
 529               		.loc 1 291 5 is_stmt 1 view .LVU160
 291:keyboards/crkbd/serial.c **** #if SERIAL_PIN_MASK == _BV(PE6)
 530               		.loc 1 291 11 is_stmt 0 view .LVU161
 531 0010 EA9A      		sbi 0x1d,2
 297:keyboards/crkbd/serial.c **** #endif
 532               		.loc 1 297 5 is_stmt 1 view .LVU162
 297:keyboards/crkbd/serial.c **** #endif
 533               		.loc 1 297 11 is_stmt 0 view .LVU163
 534 0012 E9E6      		ldi r30,lo8(105)
 535 0014 F0E0      		ldi r31,0
 536 0016 8081      		ld r24,Z
 537               	.LVL35:
 297:keyboards/crkbd/serial.c **** #endif
 538               		.loc 1 297 11 view .LVU164
 539 0018 8F7C      		andi r24,lo8(-49)
 540 001a 8083      		st Z,r24
 541               	.LVL36:
 542               	/* epilogue start */
 299:keyboards/crkbd/serial.c **** 
 543               		.loc 1 299 1 view .LVU165
 544 001c 0895      		ret
 545               		.cfi_endproc
 546               	.LFE15:
 548               		.section	.text.serial_write_chunk,"ax",@progbits
 549               	.global	serial_write_chunk
 551               	serial_write_chunk:
 552               	.LVL37:
 553               	.LFB19:
 350:keyboards/crkbd/serial.c ****     uint8_t b, p;
 554               		.loc 1 350 52 is_stmt 1 view -0
 555               		.cfi_startproc
 556               	/* prologue: function */
 557               	/* frame size = 0 */
 558               	/* stack size = 0 */
 559               	.L__stack_usage = 0
 351:keyboards/crkbd/serial.c ****     for( p = PARITY, b = 1<<(bit-1); b ; b >>= 1) {
 560               		.loc 1 351 5 view .LVU167
 352:keyboards/crkbd/serial.c ****         if(data & b) {
 561               		.loc 1 352 5 view .LVU168
 352:keyboards/crkbd/serial.c ****         if(data & b) {
 562               		.loc 1 352 33 is_stmt 0 view .LVU169
 563 0000 6150      		subi r22,1
 564 0002 770B      		sbc r23,r23
 565               	.LVL38:
 352:keyboards/crkbd/serial.c ****         if(data & b) {
 566               		.loc 1 352 24 view .LVU170
 567 0004 91E0      		ldi r25,lo8(1)
 568 0006 00C0      		rjmp 2f
 569               		1:
 570 0008 990F      		lsl r25
 571               		2:
 572 000a 6A95      		dec r22
 573 000c 02F4      		brpl 1b
 574               	.LVL39:
 352:keyboards/crkbd/serial.c ****         if(data & b) {
 575               		.loc 1 352 12 view .LVU171
 576 000e 20E0      		ldi r18,0
 354:keyboards/crkbd/serial.c ****         } else {
 577               		.loc 1 354 30 view .LVU172
 578 0010 31E0      		ldi r19,lo8(1)
 579               	.LVL40:
 580               	.L26:
 352:keyboards/crkbd/serial.c ****         if(data & b) {
 581               		.loc 1 352 5 discriminator 1 view .LVU173
 582 0012 9111      		cpse r25,__zero_reg__
 583 0014 00C0      		rjmp .L29
 361:keyboards/crkbd/serial.c ****     else      { serial_low(); }
 584               		.loc 1 361 5 is_stmt 1 view .LVU174
 361:keyboards/crkbd/serial.c ****     else      { serial_low(); }
 585               		.loc 1 361 7 is_stmt 0 view .LVU175
 586 0016 2223      		tst r18
 587 0018 01F0      		breq .L30
 361:keyboards/crkbd/serial.c ****     else      { serial_low(); }
 588               		.loc 1 361 17 is_stmt 1 view .LVU176
 589               	.LBB169:
 590               	.LBI169:
 272:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 591               		.loc 1 272 6 view .LVU177
 592               	.LBB170:
 273:keyboards/crkbd/serial.c **** }
 593               		.loc 1 273 3 view .LVU178
 273:keyboards/crkbd/serial.c **** }
 594               		.loc 1 273 19 is_stmt 0 view .LVU179
 595 001a 5A9A      		sbi 0xb,2
 596               	.L31:
 597               	.LBE170:
 598               	.LBE169:
 363:keyboards/crkbd/serial.c **** 
 599               		.loc 1 363 5 is_stmt 1 view .LVU180
 600               	.LBB171:
 601               	.LBI171:
 228:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY);
 602               		.loc 1 228 6 view .LVU181
 603               	.LBE171:
 229:keyboards/crkbd/serial.c **** }
 604               		.loc 1 229 3 view .LVU182
 605               	.LVL41:
 606               	.LBB174:
 607               	.LBB172:
 608               	.LBI172:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 609               		.loc 2 255 1 view .LVU183
 610               	.LBB173:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 611               		.loc 2 257 2 view .LVU184
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 612               		.loc 2 261 2 view .LVU185
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 613               		.loc 2 262 2 view .LVU186
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 614               		.loc 2 263 2 view .LVU187
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 615               		.loc 2 273 3 view .LVU188
 616               		.loc 2 276 2 view .LVU189
 617 001c 80E2      		ldi r24,lo8(32)
 618 001e 8A95      	1:	dec r24
 619 0020 01F4      		brne 1b
 620               	.LVL42:
 621               		.loc 2 276 2 is_stmt 0 view .LVU190
 622               	.LBE173:
 623               	.LBE172:
 624               	.LBE174:
 365:keyboards/crkbd/serial.c **** }
 625               		.loc 1 365 5 is_stmt 1 view .LVU191
 626               	.LBB175:
 627               	.LBI175:
 266:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 628               		.loc 1 266 6 view .LVU192
 629               	.LBB176:
 267:keyboards/crkbd/serial.c **** }
 630               		.loc 1 267 3 view .LVU193
 267:keyboards/crkbd/serial.c **** }
 631               		.loc 1 267 19 is_stmt 0 view .LVU194
 632 0022 5A98      		cbi 0xb,2
 633               	/* epilogue start */
 634               	.LBE176:
 635               	.LBE175:
 366:keyboards/crkbd/serial.c **** 
 636               		.loc 1 366 1 view .LVU195
 637 0024 0895      		ret
 638               	.LVL43:
 639               	.L29:
 353:keyboards/crkbd/serial.c ****             serial_high(); p ^= 1;
 640               		.loc 1 353 9 is_stmt 1 view .LVU196
 353:keyboards/crkbd/serial.c ****             serial_high(); p ^= 1;
 641               		.loc 1 353 12 is_stmt 0 view .LVU197
 642 0026 492F      		mov r20,r25
 643 0028 4823      		and r20,r24
 353:keyboards/crkbd/serial.c ****             serial_high(); p ^= 1;
 644               		.loc 1 353 11 view .LVU198
 645 002a 01F0      		breq .L27
 354:keyboards/crkbd/serial.c ****         } else {
 646               		.loc 1 354 13 is_stmt 1 view .LVU199
 647               	.LBB177:
 648               	.LBI177:
 272:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 649               		.loc 1 272 6 view .LVU200
 650               	.LBB178:
 273:keyboards/crkbd/serial.c **** }
 651               		.loc 1 273 3 view .LVU201
 273:keyboards/crkbd/serial.c **** }
 652               		.loc 1 273 19 is_stmt 0 view .LVU202
 653 002c 5A9A      		sbi 0xb,2
 654               	.LBE178:
 655               	.LBE177:
 354:keyboards/crkbd/serial.c ****         } else {
 656               		.loc 1 354 28 is_stmt 1 view .LVU203
 354:keyboards/crkbd/serial.c ****         } else {
 657               		.loc 1 354 30 is_stmt 0 view .LVU204
 658 002e 2327      		eor r18,r19
 659               	.LVL44:
 660               	.L28:
 358:keyboards/crkbd/serial.c ****     }
 661               		.loc 1 358 9 is_stmt 1 discriminator 2 view .LVU205
 662               	.LBB179:
 663               	.LBI179:
 228:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY);
 664               		.loc 1 228 6 discriminator 2 view .LVU206
 665               	.LBE179:
 229:keyboards/crkbd/serial.c **** }
 666               		.loc 1 229 3 discriminator 2 view .LVU207
 667               	.LBB182:
 668               	.LBB180:
 669               	.LBI180:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 670               		.loc 2 255 1 discriminator 2 view .LVU208
 671               	.LBB181:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 672               		.loc 2 257 2 discriminator 2 view .LVU209
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 673               		.loc 2 261 2 discriminator 2 view .LVU210
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 674               		.loc 2 262 2 discriminator 2 view .LVU211
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 675               		.loc 2 263 2 discriminator 2 view .LVU212
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 676               		.loc 2 273 3 discriminator 2 view .LVU213
 677               		.loc 2 276 2 discriminator 2 view .LVU214
 678 0030 40E2      		ldi r20,lo8(32)
 679 0032 4A95      	1:	dec r20
 680 0034 01F4      		brne 1b
 681               	.LVL45:
 682               		.loc 2 276 2 is_stmt 0 discriminator 2 view .LVU215
 683               	.LBE181:
 684               	.LBE180:
 685               	.LBE182:
 352:keyboards/crkbd/serial.c ****         if(data & b) {
 686               		.loc 1 352 44 discriminator 2 view .LVU216
 687 0036 9695      		lsr r25
 688               	.LVL46:
 352:keyboards/crkbd/serial.c ****         if(data & b) {
 689               		.loc 1 352 44 discriminator 2 view .LVU217
 690 0038 00C0      		rjmp .L26
 691               	.L27:
 356:keyboards/crkbd/serial.c ****         }
 692               		.loc 1 356 13 is_stmt 1 view .LVU218
 693               	.LBB183:
 694               	.LBI183:
 266:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 695               		.loc 1 266 6 view .LVU219
 696               	.LBB184:
 267:keyboards/crkbd/serial.c **** }
 697               		.loc 1 267 3 view .LVU220
 267:keyboards/crkbd/serial.c **** }
 698               		.loc 1 267 19 is_stmt 0 view .LVU221
 699 003a 5A98      		cbi 0xb,2
 700               	.LBE184:
 701               	.LBE183:
 356:keyboards/crkbd/serial.c ****         }
 702               		.loc 1 356 28 is_stmt 1 view .LVU222
 356:keyboards/crkbd/serial.c ****         }
 703               		.loc 1 356 28 is_stmt 0 view .LVU223
 704 003c 00C0      		rjmp .L28
 705               	.L30:
 362:keyboards/crkbd/serial.c ****     serial_delay();
 706               		.loc 1 362 17 is_stmt 1 view .LVU224
 707               	.LBB185:
 708               	.LBI185:
 266:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 709               		.loc 1 266 6 view .LVU225
 710               	.LBB186:
 267:keyboards/crkbd/serial.c **** }
 711               		.loc 1 267 3 view .LVU226
 267:keyboards/crkbd/serial.c **** }
 712               		.loc 1 267 19 is_stmt 0 view .LVU227
 713 003e 5A98      		cbi 0xb,2
 714 0040 00C0      		rjmp .L31
 715               	.LBE186:
 716               	.LBE185:
 717               		.cfi_endproc
 718               	.LFE19:
 720               		.section	.text.serial_send_packet,"ax",@progbits
 722               	serial_send_packet:
 723               	.LVL47:
 724               	.LFB20:
 370:keyboards/crkbd/serial.c ****   for (uint8_t i = 0; i < size; ++i) {
 725               		.loc 1 370 56 is_stmt 1 view -0
 726               		.cfi_startproc
 370:keyboards/crkbd/serial.c ****   for (uint8_t i = 0; i < size; ++i) {
 727               		.loc 1 370 56 is_stmt 0 view .LVU229
 728 0000 FF92      		push r15
 729               	.LCFI8:
 730               		.cfi_def_cfa_offset 3
 731               		.cfi_offset 15, -2
 732 0002 0F93      		push r16
 733               	.LCFI9:
 734               		.cfi_def_cfa_offset 4
 735               		.cfi_offset 16, -3
 736 0004 1F93      		push r17
 737               	.LCFI10:
 738               		.cfi_def_cfa_offset 5
 739               		.cfi_offset 17, -4
 740 0006 CF93      		push r28
 741               	.LCFI11:
 742               		.cfi_def_cfa_offset 6
 743               		.cfi_offset 28, -5
 744 0008 DF93      		push r29
 745               	.LCFI12:
 746               		.cfi_def_cfa_offset 7
 747               		.cfi_offset 29, -6
 748               	/* prologue: function */
 749               	/* frame size = 0 */
 750               	/* stack size = 5 */
 751               	.L__stack_usage = 5
 371:keyboards/crkbd/serial.c ****     uint8_t data;
 752               		.loc 1 371 3 is_stmt 1 view .LVU230
 753               	.LBB187:
 371:keyboards/crkbd/serial.c ****     uint8_t data;
 754               		.loc 1 371 8 view .LVU231
 755               	.LVL48:
 371:keyboards/crkbd/serial.c ****     uint8_t data;
 756               		.loc 1 371 8 is_stmt 0 view .LVU232
 757 000a EC01      		movw r28,r24
 758 000c 8C01      		movw r16,r24
 759 000e 060F      		add r16,r22
 760 0010 111D      		adc r17,__zero_reg__
 761               	.LVL49:
 762               	.L33:
 371:keyboards/crkbd/serial.c ****     uint8_t data;
 763               		.loc 1 371 3 discriminator 1 view .LVU233
 764 0012 C017      		cp r28,r16
 765 0014 D107      		cpc r29,r17
 766 0016 01F4      		brne .L34
 767               	/* epilogue start */
 768               	.LBE187:
 377:keyboards/crkbd/serial.c **** 
 769               		.loc 1 377 1 view .LVU234
 770 0018 DF91      		pop r29
 771 001a CF91      		pop r28
 772               	.LVL50:
 377:keyboards/crkbd/serial.c **** 
 773               		.loc 1 377 1 view .LVU235
 774 001c 1F91      		pop r17
 775 001e 0F91      		pop r16
 776 0020 FF90      		pop r15
 777 0022 0895      		ret
 778               	.LVL51:
 779               	.L34:
 780               	.LBB189:
 781               	.LBB188:
 372:keyboards/crkbd/serial.c ****     data = buffer[i];
 782               		.loc 1 372 5 is_stmt 1 discriminator 3 view .LVU236
 373:keyboards/crkbd/serial.c ****     sync_send();
 783               		.loc 1 373 5 discriminator 3 view .LVU237
 373:keyboards/crkbd/serial.c ****     sync_send();
 784               		.loc 1 373 10 is_stmt 0 discriminator 3 view .LVU238
 785 0024 F990      		ld r15,Y+
 786               	.LVL52:
 374:keyboards/crkbd/serial.c ****     serial_write_chunk(data,8);
 787               		.loc 1 374 5 is_stmt 1 discriminator 3 view .LVU239
 788 0026 0E94 0000 		call sync_send
 789               	.LVL53:
 375:keyboards/crkbd/serial.c ****   }
 790               		.loc 1 375 5 discriminator 3 view .LVU240
 791 002a 68E0      		ldi r22,lo8(8)
 792 002c 8F2D      		mov r24,r15
 793 002e 0E94 0000 		call serial_write_chunk
 794               	.LVL54:
 375:keyboards/crkbd/serial.c ****   }
 795               		.loc 1 375 5 is_stmt 0 discriminator 3 view .LVU241
 796 0032 00C0      		rjmp .L33
 797               	.LBE188:
 798               	.LBE189:
 799               		.cfi_endproc
 800               	.LFE20:
 802               		.section	.text.__vector_3,"ax",@progbits
 803               	.global	__vector_3
 805               	__vector_3:
 806               	.LFB25:
 391:keyboards/crkbd/serial.c **** 
 392:keyboards/crkbd/serial.c **** inline static
 393:keyboards/crkbd/serial.c **** void change_sender2reciver(void) {
 394:keyboards/crkbd/serial.c ****     sync_send();          //0
 395:keyboards/crkbd/serial.c ****     serial_delay_half1(); //1
 396:keyboards/crkbd/serial.c ****     serial_low();         //2
 397:keyboards/crkbd/serial.c ****     serial_input_with_pullup(); //2
 398:keyboards/crkbd/serial.c ****     serial_delay_half1(); //3
 399:keyboards/crkbd/serial.c **** }
 400:keyboards/crkbd/serial.c **** 
 401:keyboards/crkbd/serial.c **** inline static
 402:keyboards/crkbd/serial.c **** void change_reciver2sender(void) {
 403:keyboards/crkbd/serial.c ****     sync_recv();     //0
 404:keyboards/crkbd/serial.c ****     serial_delay();  //1
 405:keyboards/crkbd/serial.c ****     serial_low();    //3
 406:keyboards/crkbd/serial.c ****     serial_output(); //3
 407:keyboards/crkbd/serial.c ****     serial_delay_half1(); //4
 408:keyboards/crkbd/serial.c **** }
 409:keyboards/crkbd/serial.c **** 
 410:keyboards/crkbd/serial.c **** static inline uint8_t nibble_bits_count(uint8_t bits)
 411:keyboards/crkbd/serial.c **** {
 412:keyboards/crkbd/serial.c ****     bits = (bits & 0x5) + (bits >> 1 & 0x5);
 413:keyboards/crkbd/serial.c ****     bits = (bits & 0x3) + (bits >> 2 & 0x3);
 414:keyboards/crkbd/serial.c ****     return bits;
 415:keyboards/crkbd/serial.c **** }
 416:keyboards/crkbd/serial.c **** 
 417:keyboards/crkbd/serial.c **** // interrupt handle to be used by the target device
 418:keyboards/crkbd/serial.c **** ISR(SERIAL_PIN_INTERRUPT) {
 807               		.loc 1 418 27 is_stmt 1 view -0
 808               		.cfi_startproc
 809 0000 1F92      		push r1
 810               	.LCFI13:
 811               		.cfi_def_cfa_offset 3
 812               		.cfi_offset 1, -2
 813 0002 0F92      		push r0
 814               	.LCFI14:
 815               		.cfi_def_cfa_offset 4
 816               		.cfi_offset 0, -3
 817 0004 0FB6      		in r0,__SREG__
 818 0006 0F92      		push r0
 819 0008 1124      		clr __zero_reg__
 820 000a 0F93      		push r16
 821               	.LCFI15:
 822               		.cfi_def_cfa_offset 5
 823               		.cfi_offset 16, -4
 824 000c 1F93      		push r17
 825               	.LCFI16:
 826               		.cfi_def_cfa_offset 6
 827               		.cfi_offset 17, -5
 828 000e 2F93      		push r18
 829               	.LCFI17:
 830               		.cfi_def_cfa_offset 7
 831               		.cfi_offset 18, -6
 832 0010 3F93      		push r19
 833               	.LCFI18:
 834               		.cfi_def_cfa_offset 8
 835               		.cfi_offset 19, -7
 836 0012 4F93      		push r20
 837               	.LCFI19:
 838               		.cfi_def_cfa_offset 9
 839               		.cfi_offset 20, -8
 840 0014 5F93      		push r21
 841               	.LCFI20:
 842               		.cfi_def_cfa_offset 10
 843               		.cfi_offset 21, -9
 844 0016 6F93      		push r22
 845               	.LCFI21:
 846               		.cfi_def_cfa_offset 11
 847               		.cfi_offset 22, -10
 848 0018 7F93      		push r23
 849               	.LCFI22:
 850               		.cfi_def_cfa_offset 12
 851               		.cfi_offset 23, -11
 852 001a 8F93      		push r24
 853               	.LCFI23:
 854               		.cfi_def_cfa_offset 13
 855               		.cfi_offset 24, -12
 856 001c 9F93      		push r25
 857               	.LCFI24:
 858               		.cfi_def_cfa_offset 14
 859               		.cfi_offset 25, -13
 860 001e AF93      		push r26
 861               	.LCFI25:
 862               		.cfi_def_cfa_offset 15
 863               		.cfi_offset 26, -14
 864 0020 BF93      		push r27
 865               	.LCFI26:
 866               		.cfi_def_cfa_offset 16
 867               		.cfi_offset 27, -15
 868 0022 EF93      		push r30
 869               	.LCFI27:
 870               		.cfi_def_cfa_offset 17
 871               		.cfi_offset 30, -16
 872 0024 FF93      		push r31
 873               	.LCFI28:
 874               		.cfi_def_cfa_offset 18
 875               		.cfi_offset 31, -17
 876 0026 CF93      		push r28
 877               	.LCFI29:
 878               		.cfi_def_cfa_offset 19
 879               		.cfi_offset 28, -18
 880 0028 DF93      		push r29
 881               	.LCFI30:
 882               		.cfi_def_cfa_offset 20
 883               		.cfi_offset 29, -19
 884 002a 0F92      		push __tmp_reg__
 885               	.LCFI31:
 886               		.cfi_def_cfa_offset 21
 887 002c CDB7      		in r28,__SP_L__
 888 002e DEB7      		in r29,__SP_H__
 889               	.LCFI32:
 890               		.cfi_def_cfa_register 28
 891               	/* prologue: Signal */
 892               	/* frame size = 1 */
 893               	/* stack size = 20 */
 894               	.L__stack_usage = 20
 419:keyboards/crkbd/serial.c **** 
 420:keyboards/crkbd/serial.c **** #ifndef SERIAL_USE_MULTI_TRANSACTION
 421:keyboards/crkbd/serial.c ****   serial_low();
 422:keyboards/crkbd/serial.c ****   serial_output();
 423:keyboards/crkbd/serial.c ****   SSTD_t *trans = Transaction_table;
 424:keyboards/crkbd/serial.c **** #else
 425:keyboards/crkbd/serial.c ****   // recive transaction table index
 426:keyboards/crkbd/serial.c ****   uint8_t tid, bits;
 895               		.loc 1 426 3 view .LVU243
 427:keyboards/crkbd/serial.c ****   uint8_t pecount = 0;
 896               		.loc 1 427 3 view .LVU244
 897               		.loc 1 427 11 is_stmt 0 view .LVU245
 898 0030 1982      		std Y+1,__zero_reg__
 428:keyboards/crkbd/serial.c ****   sync_recv();
 899               		.loc 1 428 3 is_stmt 1 view .LVU246
 900 0032 0E94 0000 		call sync_recv
 901               	.LVL55:
 429:keyboards/crkbd/serial.c ****   bits = serial_read_chunk(&pecount,7);
 902               		.loc 1 429 3 view .LVU247
 903               		.loc 1 429 10 is_stmt 0 view .LVU248
 904 0036 67E0      		ldi r22,lo8(7)
 905 0038 CE01      		movw r24,r28
 906 003a 0196      		adiw r24,1
 907 003c 0E94 0000 		call serial_read_chunk
 908               	.LVL56:
 430:keyboards/crkbd/serial.c ****   tid = bits>>3;
 909               		.loc 1 430 3 is_stmt 1 view .LVU249
 910               		.loc 1 430 7 is_stmt 0 view .LVU250
 911 0040 082F      		mov r16,r24
 912 0042 0695      		lsr r16
 913 0044 0695      		lsr r16
 914 0046 0695      		lsr r16
 915               	.LVL57:
 431:keyboards/crkbd/serial.c ****   bits = (bits&7) != nibble_bits_count(tid);
 916               		.loc 1 431 3 is_stmt 1 view .LVU251
 917               	.LBB213:
 918               	.LBI213:
 410:keyboards/crkbd/serial.c **** {
 919               		.loc 1 410 23 view .LVU252
 920               	.LBB214:
 412:keyboards/crkbd/serial.c ****     bits = (bits & 0x3) + (bits >> 2 & 0x3);
 921               		.loc 1 412 5 view .LVU253
 412:keyboards/crkbd/serial.c ****     bits = (bits & 0x3) + (bits >> 2 & 0x3);
 922               		.loc 1 412 38 is_stmt 0 view .LVU254
 923 0048 982F      		mov r25,r24
 924 004a 9295      		swap r25
 925 004c 9570      		andi r25,lo8(5)
 412:keyboards/crkbd/serial.c ****     bits = (bits & 0x3) + (bits >> 2 & 0x3);
 926               		.loc 1 412 18 view .LVU255
 927 004e 202F      		mov r18,r16
 928 0050 2570      		andi r18,lo8(5)
 412:keyboards/crkbd/serial.c ****     bits = (bits & 0x3) + (bits >> 2 & 0x3);
 929               		.loc 1 412 10 view .LVU256
 930 0052 920F      		add r25,r18
 931               	.LVL58:
 413:keyboards/crkbd/serial.c ****     return bits;
 932               		.loc 1 413 5 is_stmt 1 view .LVU257
 413:keyboards/crkbd/serial.c ****     return bits;
 933               		.loc 1 413 18 is_stmt 0 view .LVU258
 934 0054 292F      		mov r18,r25
 935 0056 2370      		andi r18,lo8(3)
 413:keyboards/crkbd/serial.c ****     return bits;
 936               		.loc 1 413 38 view .LVU259
 937 0058 9695      		lsr r25
 938 005a 9695      		lsr r25
 939               	.LVL59:
 414:keyboards/crkbd/serial.c **** }
 940               		.loc 1 414 5 is_stmt 1 view .LVU260
 414:keyboards/crkbd/serial.c **** }
 941               		.loc 1 414 5 is_stmt 0 view .LVU261
 942               	.LBE214:
 943               	.LBE213:
 432:keyboards/crkbd/serial.c ****   if( bits || pecount> 0 || tid > Transaction_table_size ) {
 944               		.loc 1 432 3 is_stmt 1 view .LVU262
 945               		.loc 1 432 5 is_stmt 0 view .LVU263
 946 005c 8770      		andi r24,lo8(7)
 947               	.LVL60:
 948               	.LBB216:
 949               	.LBB215:
 413:keyboards/crkbd/serial.c ****     return bits;
 950               		.loc 1 413 10 view .LVU264
 951 005e 920F      		add r25,r18
 413:keyboards/crkbd/serial.c ****     return bits;
 952               		.loc 1 413 10 view .LVU265
 953               	.LBE215:
 954               	.LBE216:
 955               		.loc 1 432 5 view .LVU266
 956 0060 8913      		cpse r24,r25
 957 0062 00C0      		rjmp .L35
 958               		.loc 1 432 12 discriminator 1 view .LVU267
 959 0064 8981      		ldd r24,Y+1
 960 0066 8111      		cpse r24,__zero_reg__
 961 0068 00C0      		rjmp .L35
 962               		.loc 1 432 26 discriminator 2 view .LVU268
 963 006a 8091 0000 		lds r24,Transaction_table_size
 964 006e 8017      		cp r24,r16
 965 0070 00F0      		brlo .L35
 433:keyboards/crkbd/serial.c ****       return;
 434:keyboards/crkbd/serial.c ****   }
 435:keyboards/crkbd/serial.c ****   serial_delay_half1();
 966               		.loc 1 435 3 is_stmt 1 view .LVU269
 967               	.LBB217:
 968               	.LBI217:
 234:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF1);
 969               		.loc 1 234 6 view .LVU270
 970               	.LBE217:
 235:keyboards/crkbd/serial.c **** }
 971               		.loc 1 235 3 view .LVU271
 972               	.LVL61:
 973               	.LBB220:
 974               	.LBB218:
 975               	.LBI218:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 976               		.loc 2 255 1 view .LVU272
 977               	.LBB219:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 978               		.loc 2 257 2 view .LVU273
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 979               		.loc 2 261 2 view .LVU274
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 980               		.loc 2 262 2 view .LVU275
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 981               		.loc 2 263 2 view .LVU276
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 982               		.loc 2 273 3 view .LVU277
 983               		.loc 2 276 2 view .LVU278
 984 0072 20E1      		ldi r18,lo8(16)
 985 0074 2A95      	1:	dec r18
 986 0076 01F4      		brne 1b
 987               	.LVL62:
 988               		.loc 2 276 2 is_stmt 0 view .LVU279
 989               	.LBE219:
 990               	.LBE218:
 991               	.LBE220:
 436:keyboards/crkbd/serial.c **** 
 437:keyboards/crkbd/serial.c ****   serial_high(); // response step1 low->high
 992               		.loc 1 437 3 is_stmt 1 view .LVU280
 993               	.LBB221:
 994               	.LBI221:
 272:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 995               		.loc 1 272 6 view .LVU281
 996               	.LBB222:
 273:keyboards/crkbd/serial.c **** }
 997               		.loc 1 273 3 view .LVU282
 273:keyboards/crkbd/serial.c **** }
 998               		.loc 1 273 19 is_stmt 0 view .LVU283
 999 0078 5A9A      		sbi 0xb,2
 1000               	.LBE222:
 1001               	.LBE221:
 438:keyboards/crkbd/serial.c ****   serial_output();
 1002               		.loc 1 438 3 is_stmt 1 view .LVU284
 1003               	.LBB223:
 1004               	.LBI223:
 246:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
 1005               		.loc 1 246 6 view .LVU285
 1006               	.LBB224:
 247:keyboards/crkbd/serial.c **** }
 1007               		.loc 1 247 3 view .LVU286
 247:keyboards/crkbd/serial.c **** }
 1008               		.loc 1 247 18 is_stmt 0 view .LVU287
 1009 007a 529A      		sbi 0xa,2
 1010               	.LBE224:
 1011               	.LBE223:
 439:keyboards/crkbd/serial.c ****   _delay_sub_us(SLAVE_INT_ACK_WIDTH_UNIT*SLAVE_INT_ACK_WIDTH);
 1012               		.loc 1 439 3 is_stmt 1 view .LVU288
 1013 007c 82E0      		ldi r24,lo8(2)
 1014 007e 8A95      	1:	dec r24
 1015 0080 01F4      		brne 1b
 1016 0082 00C0      		rjmp .
 440:keyboards/crkbd/serial.c ****   SSTD_t *trans = &Transaction_table[tid];
 1017               		.loc 1 440 3 view .LVU289
 1018               		.loc 1 440 37 is_stmt 0 view .LVU290
 1019 0084 A8E0      		ldi r26,lo8(8)
 1020 0086 0A9F      		mul r16,r26
 1021 0088 C001      		movw r24,r0
 1022 008a 1124      		clr __zero_reg__
 1023               		.loc 1 440 11 view .LVU291
 1024 008c 0091 0000 		lds r16,Transaction_table
 1025 0090 1091 0000 		lds r17,Transaction_table+1
 1026               	.LVL63:
 1027               		.loc 1 440 11 view .LVU292
 1028 0094 080F      		add r16,r24
 1029 0096 191F      		adc r17,r25
 1030               	.LVL64:
 441:keyboards/crkbd/serial.c ****   serial_low(); // response step2 ack high->low
 1031               		.loc 1 441 3 is_stmt 1 view .LVU293
 1032               	.LBB225:
 1033               	.LBI225:
 266:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 1034               		.loc 1 266 6 view .LVU294
 1035               	.LBB226:
 267:keyboards/crkbd/serial.c **** }
 1036               		.loc 1 267 3 view .LVU295
 267:keyboards/crkbd/serial.c **** }
 1037               		.loc 1 267 19 is_stmt 0 view .LVU296
 1038 0098 5A98      		cbi 0xb,2
 1039               	.LBE226:
 1040               	.LBE225:
 442:keyboards/crkbd/serial.c **** #endif
 443:keyboards/crkbd/serial.c **** 
 444:keyboards/crkbd/serial.c ****   // target send phase
 445:keyboards/crkbd/serial.c ****   if( trans->target2initiator_buffer_size > 0 )
 1041               		.loc 1 445 3 is_stmt 1 view .LVU297
 1042               		.loc 1 445 12 is_stmt 0 view .LVU298
 1043 009a F801      		movw r30,r16
 1044 009c 6581      		ldd r22,Z+5
 1045               		.loc 1 445 5 view .LVU299
 1046 009e 6623      		tst r22
 1047 00a0 01F0      		breq .L39
 446:keyboards/crkbd/serial.c ****       serial_send_packet((uint8_t *)trans->target2initiator_buffer,
 1048               		.loc 1 446 7 is_stmt 1 view .LVU300
 1049 00a2 8681      		ldd r24,Z+6
 1050 00a4 9781      		ldd r25,Z+7
 1051 00a6 0E94 0000 		call serial_send_packet
 1052               	.LVL65:
 1053               	.L39:
 447:keyboards/crkbd/serial.c ****                          trans->target2initiator_buffer_size);
 448:keyboards/crkbd/serial.c ****   // target switch to input
 449:keyboards/crkbd/serial.c ****   change_sender2reciver();
 1054               		.loc 1 449 3 view .LVU301
 1055               	.LBB227:
 1056               	.LBI227:
 393:keyboards/crkbd/serial.c ****     sync_send();          //0
 1057               		.loc 1 393 6 view .LVU302
 1058               	.LBB228:
 394:keyboards/crkbd/serial.c ****     serial_delay_half1(); //1
 1059               		.loc 1 394 5 view .LVU303
 1060 00aa 0E94 0000 		call sync_send
 1061               	.LVL66:
 395:keyboards/crkbd/serial.c ****     serial_low();         //2
 1062               		.loc 1 395 5 view .LVU304
 1063               	.LBB229:
 1064               	.LBI229:
 234:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF1);
 1065               		.loc 1 234 6 view .LVU305
 1066               	.LBE229:
 1067               	.LBE228:
 1068               	.LBE227:
 235:keyboards/crkbd/serial.c **** }
 1069               		.loc 1 235 3 view .LVU306
 1070               	.LBB243:
 1071               	.LBB241:
 1072               	.LBB232:
 1073               	.LBB230:
 1074               	.LBI230:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1075               		.loc 2 255 1 view .LVU307
 1076               	.LBB231:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1077               		.loc 2 257 2 view .LVU308
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1078               		.loc 2 261 2 view .LVU309
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 1079               		.loc 2 262 2 view .LVU310
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1080               		.loc 2 263 2 view .LVU311
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1081               		.loc 2 273 3 view .LVU312
 1082               		.loc 2 276 2 view .LVU313
 1083 00ae F0E1      		ldi r31,lo8(16)
 1084 00b0 FA95      	1:	dec r31
 1085 00b2 01F4      		brne 1b
 1086               	.LVL67:
 1087               		.loc 2 276 2 is_stmt 0 view .LVU314
 1088               	.LBE231:
 1089               	.LBE230:
 1090               	.LBE232:
 396:keyboards/crkbd/serial.c ****     serial_input_with_pullup(); //2
 1091               		.loc 1 396 5 is_stmt 1 view .LVU315
 1092               	.LBB233:
 1093               	.LBI233:
 266:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 1094               		.loc 1 266 6 view .LVU316
 1095               	.LBB234:
 267:keyboards/crkbd/serial.c **** }
 1096               		.loc 1 267 3 view .LVU317
 267:keyboards/crkbd/serial.c **** }
 1097               		.loc 1 267 19 is_stmt 0 view .LVU318
 1098 00b4 5A98      		cbi 0xb,2
 1099               	.LBE234:
 1100               	.LBE233:
 397:keyboards/crkbd/serial.c ****     serial_delay_half1(); //3
 1101               		.loc 1 397 5 is_stmt 1 view .LVU319
 1102               	.LBB235:
 1103               	.LBI235:
 253:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
 1104               		.loc 1 253 6 view .LVU320
 1105               	.LBB236:
 254:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 1106               		.loc 1 254 3 view .LVU321
 254:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 1107               		.loc 1 254 19 is_stmt 0 view .LVU322
 1108 00b6 5298      		cbi 0xa,2
 255:keyboards/crkbd/serial.c **** }
 1109               		.loc 1 255 3 is_stmt 1 view .LVU323
 255:keyboards/crkbd/serial.c **** }
 1110               		.loc 1 255 19 is_stmt 0 view .LVU324
 1111 00b8 5A9A      		sbi 0xb,2
 1112               	.LBE236:
 1113               	.LBE235:
 398:keyboards/crkbd/serial.c **** }
 1114               		.loc 1 398 5 is_stmt 1 view .LVU325
 1115               	.LBB237:
 1116               	.LBI237:
 234:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF1);
 1117               		.loc 1 234 6 view .LVU326
 1118               	.LBE237:
 1119               	.LBE241:
 1120               	.LBE243:
 235:keyboards/crkbd/serial.c **** }
 1121               		.loc 1 235 3 view .LVU327
 1122               	.LVL68:
 1123               	.LBB244:
 1124               	.LBB242:
 1125               	.LBB240:
 1126               	.LBB238:
 1127               	.LBI238:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1128               		.loc 2 255 1 view .LVU328
 1129               	.LBB239:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1130               		.loc 2 257 2 view .LVU329
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1131               		.loc 2 261 2 view .LVU330
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 1132               		.loc 2 262 2 view .LVU331
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1133               		.loc 2 263 2 view .LVU332
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1134               		.loc 2 273 3 view .LVU333
 1135               		.loc 2 276 2 view .LVU334
 1136 00ba 20E1      		ldi r18,lo8(16)
 1137 00bc 2A95      	1:	dec r18
 1138 00be 01F4      		brne 1b
 1139               	.LVL69:
 1140               		.loc 2 276 2 is_stmt 0 view .LVU335
 1141               	.LBE239:
 1142               	.LBE238:
 1143               	.LBE240:
 1144               	.LBE242:
 1145               	.LBE244:
 450:keyboards/crkbd/serial.c **** 
 451:keyboards/crkbd/serial.c ****   // target recive phase
 452:keyboards/crkbd/serial.c ****   if( trans->initiator2target_buffer_size > 0 ) {
 1146               		.loc 1 452 3 is_stmt 1 view .LVU336
 1147               		.loc 1 452 12 is_stmt 0 view .LVU337
 1148 00c0 D801      		movw r26,r16
 1149 00c2 1296      		adiw r26,2
 1150 00c4 6C91      		ld r22,X
 1151 00c6 1297      		sbiw r26,2
 1152               		.loc 1 452 5 view .LVU338
 1153 00c8 6623      		tst r22
 1154 00ca 01F0      		breq .L40
 453:keyboards/crkbd/serial.c ****       if (serial_recive_packet((uint8_t *)trans->initiator2target_buffer,
 1155               		.loc 1 453 7 is_stmt 1 view .LVU339
 1156               		.loc 1 453 11 is_stmt 0 view .LVU340
 1157 00cc 1396      		adiw r26,3
 1158 00ce 8D91      		ld r24,X+
 1159 00d0 9C91      		ld r25,X
 1160 00d2 0E94 0000 		call serial_recive_packet
 1161               	.LVL70:
 1162 00d6 D801      		movw r26,r16
 1163 00d8 ED91      		ld r30,X+
 1164 00da FC91      		ld r31,X
 1165               		.loc 1 453 10 view .LVU341
 1166 00dc 8823      		tst r24
 1167 00de 01F0      		breq .L41
 1168               	.L46:
 454:keyboards/crkbd/serial.c ****                                trans->initiator2target_buffer_size) ) {
 455:keyboards/crkbd/serial.c ****           *trans->status = TRANSACTION_ACCEPTED;
 456:keyboards/crkbd/serial.c ****       } else {
 457:keyboards/crkbd/serial.c ****           *trans->status = TRANSACTION_DATA_ERROR;
 458:keyboards/crkbd/serial.c ****       }
 459:keyboards/crkbd/serial.c ****   } else {
 460:keyboards/crkbd/serial.c ****       *trans->status = TRANSACTION_ACCEPTED;
 1169               		.loc 1 460 22 view .LVU342
 1170 00e0 88E0      		ldi r24,lo8(8)
 1171 00e2 00C0      		rjmp .L47
 1172               	.L41:
 457:keyboards/crkbd/serial.c ****       }
 1173               		.loc 1 457 11 is_stmt 1 view .LVU343
 457:keyboards/crkbd/serial.c ****       }
 1174               		.loc 1 457 26 is_stmt 0 view .LVU344
 1175 00e4 82E0      		ldi r24,lo8(2)
 1176               	.L47:
 1177               		.loc 1 460 22 view .LVU345
 1178 00e6 8083      		st Z,r24
 461:keyboards/crkbd/serial.c ****   }
 462:keyboards/crkbd/serial.c **** 
 463:keyboards/crkbd/serial.c ****   sync_recv(); //weit initiator output to high
 1179               		.loc 1 463 3 is_stmt 1 view .LVU346
 1180 00e8 0E94 0000 		call sync_recv
 1181               	.LVL71:
 1182               	.L35:
 1183               	/* epilogue start */
 464:keyboards/crkbd/serial.c **** }
 1184               		.loc 1 464 1 is_stmt 0 view .LVU347
 1185 00ec 0F90      		pop __tmp_reg__
 1186 00ee DF91      		pop r29
 1187 00f0 CF91      		pop r28
 1188 00f2 FF91      		pop r31
 1189 00f4 EF91      		pop r30
 1190 00f6 BF91      		pop r27
 1191 00f8 AF91      		pop r26
 1192 00fa 9F91      		pop r25
 1193 00fc 8F91      		pop r24
 1194 00fe 7F91      		pop r23
 1195 0100 6F91      		pop r22
 1196 0102 5F91      		pop r21
 1197 0104 4F91      		pop r20
 1198 0106 3F91      		pop r19
 1199 0108 2F91      		pop r18
 1200 010a 1F91      		pop r17
 1201 010c 0F91      		pop r16
 1202 010e 0F90      		pop r0
 1203 0110 0FBE      		out __SREG__,r0
 1204 0112 0F90      		pop r0
 1205 0114 1F90      		pop r1
 1206 0116 1895      		reti
 1207               	.LVL72:
 1208               	.L40:
 460:keyboards/crkbd/serial.c ****   }
 1209               		.loc 1 460 7 is_stmt 1 view .LVU348
 460:keyboards/crkbd/serial.c ****   }
 1210               		.loc 1 460 13 is_stmt 0 view .LVU349
 1211 0118 ED91      		ld r30,X+
 1212 011a FC91      		ld r31,X
 1213 011c 00C0      		rjmp .L46
 1214               		.cfi_endproc
 1215               	.LFE25:
 1217               		.section	.text.soft_serial_transaction,"ax",@progbits
 1218               	.global	soft_serial_transaction
 1220               	soft_serial_transaction:
 1221               	.LVL73:
 1222               	.LFB26:
 465:keyboards/crkbd/serial.c **** 
 466:keyboards/crkbd/serial.c **** /////////
 467:keyboards/crkbd/serial.c **** //  start transaction by initiator
 468:keyboards/crkbd/serial.c **** //
 469:keyboards/crkbd/serial.c **** // int  soft_serial_transaction(int sstd_index)
 470:keyboards/crkbd/serial.c **** //
 471:keyboards/crkbd/serial.c **** // Returns:
 472:keyboards/crkbd/serial.c **** //    TRANSACTION_END
 473:keyboards/crkbd/serial.c **** //    TRANSACTION_NO_RESPONSE
 474:keyboards/crkbd/serial.c **** //    TRANSACTION_DATA_ERROR
 475:keyboards/crkbd/serial.c **** // this code is very time dependent, so we need to disable interrupts
 476:keyboards/crkbd/serial.c **** #ifndef SERIAL_USE_MULTI_TRANSACTION
 477:keyboards/crkbd/serial.c **** int  soft_serial_transaction(void) {
 478:keyboards/crkbd/serial.c ****   SSTD_t *trans = Transaction_table;
 479:keyboards/crkbd/serial.c **** #else
 480:keyboards/crkbd/serial.c **** int  soft_serial_transaction(int sstd_index) {
 1223               		.loc 1 480 46 is_stmt 1 view -0
 1224               		.cfi_startproc
 1225               		.loc 1 480 46 is_stmt 0 view .LVU351
 1226 0000 0F93      		push r16
 1227               	.LCFI33:
 1228               		.cfi_def_cfa_offset 3
 1229               		.cfi_offset 16, -2
 1230 0002 1F93      		push r17
 1231               	.LCFI34:
 1232               		.cfi_def_cfa_offset 4
 1233               		.cfi_offset 17, -3
 1234 0004 CF93      		push r28
 1235               	.LCFI35:
 1236               		.cfi_def_cfa_offset 5
 1237               		.cfi_offset 28, -4
 1238 0006 DF93      		push r29
 1239               	.LCFI36:
 1240               		.cfi_def_cfa_offset 6
 1241               		.cfi_offset 29, -5
 1242               	/* prologue: function */
 1243               	/* frame size = 0 */
 1244               	/* stack size = 4 */
 1245               	.L__stack_usage = 4
 481:keyboards/crkbd/serial.c ****   if( sstd_index > Transaction_table_size )
 1246               		.loc 1 481 3 is_stmt 1 view .LVU352
 1247               		.loc 1 481 18 is_stmt 0 view .LVU353
 1248 0008 2091 0000 		lds r18,Transaction_table_size
 1249               		.loc 1 481 5 view .LVU354
 1250 000c 2817      		cp r18,r24
 1251 000e 1906      		cpc __zero_reg__,r25
 1252 0010 04F4      		brge .+2
 1253 0012 00C0      		rjmp .L57
 482:keyboards/crkbd/serial.c ****       return TRANSACTION_TYPE_ERROR;
 483:keyboards/crkbd/serial.c ****   SSTD_t *trans = &Transaction_table[sstd_index];
 1254               		.loc 1 483 3 is_stmt 1 view .LVU355
 1255               		.loc 1 483 37 is_stmt 0 view .LVU356
 1256 0014 8C01      		movw r16,r24
 1257 0016 93E0      		ldi r25,3
 1258               		1:
 1259 0018 000F      		lsl r16
 1260 001a 111F      		rol r17
 1261 001c 9A95      		dec r25
 1262 001e 01F4      		brne 1b
 1263               		.loc 1 483 11 view .LVU357
 1264 0020 C091 0000 		lds r28,Transaction_table
 1265 0024 D091 0000 		lds r29,Transaction_table+1
 1266 0028 C00F      		add r28,r16
 1267 002a D11F      		adc r29,r17
 1268               	.LVL74:
 484:keyboards/crkbd/serial.c **** #endif
 485:keyboards/crkbd/serial.c ****   cli();
 1269               		.loc 1 485 3 is_stmt 1 view .LVU358
 1270               	/* #APP */
 1271               	 ;  485 "keyboards/crkbd/serial.c" 1
 1272 002c F894      		cli
 1273               	 ;  0 "" 2
 486:keyboards/crkbd/serial.c **** 
 487:keyboards/crkbd/serial.c ****   // signal to the target that we want to start a transaction
 488:keyboards/crkbd/serial.c ****   serial_output();
 1274               		.loc 1 488 3 view .LVU359
 1275               	/* #NOAPP */
 1276               	.LBB283:
 1277               	.LBI283:
 246:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
 1278               		.loc 1 246 6 view .LVU360
 1279               	.LBB284:
 247:keyboards/crkbd/serial.c **** }
 1280               		.loc 1 247 3 view .LVU361
 247:keyboards/crkbd/serial.c **** }
 1281               		.loc 1 247 18 is_stmt 0 view .LVU362
 1282 002e 529A      		sbi 0xa,2
 1283               	.LBE284:
 1284               	.LBE283:
 489:keyboards/crkbd/serial.c ****   serial_low();
 1285               		.loc 1 489 3 is_stmt 1 view .LVU363
 1286               	.LBB285:
 1287               	.LBI285:
 266:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 1288               		.loc 1 266 6 view .LVU364
 1289               	.LBB286:
 267:keyboards/crkbd/serial.c **** }
 1290               		.loc 1 267 3 view .LVU365
 267:keyboards/crkbd/serial.c **** }
 1291               		.loc 1 267 19 is_stmt 0 view .LVU366
 1292 0030 5A98      		cbi 0xb,2
 1293               	.LBE286:
 1294               	.LBE285:
 490:keyboards/crkbd/serial.c ****   _delay_us(SLAVE_INT_WIDTH_US);
 1295               		.loc 1 490 3 is_stmt 1 view .LVU367
 1296               	.LVL75:
 1297               	.LBB287:
 1298               	.LBI287:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1299               		.loc 2 255 1 view .LVU368
 1300               	.LBB288:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1301               		.loc 2 257 2 view .LVU369
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1302               		.loc 2 261 2 view .LVU370
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 1303               		.loc 2 262 2 view .LVU371
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1304               		.loc 2 263 2 view .LVU372
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1305               		.loc 2 273 3 view .LVU373
 1306               		.loc 2 276 2 view .LVU374
 1307 0032 25E0      		ldi r18,lo8(5)
 1308 0034 2A95      	1:	dec r18
 1309 0036 01F4      		brne 1b
 1310 0038 0000      		nop
 1311               	.LVL76:
 1312               		.loc 2 276 2 is_stmt 0 view .LVU375
 1313               	.LBE288:
 1314               	.LBE287:
 491:keyboards/crkbd/serial.c **** 
 492:keyboards/crkbd/serial.c **** #ifndef SERIAL_USE_MULTI_TRANSACTION
 493:keyboards/crkbd/serial.c ****   // wait for the target response
 494:keyboards/crkbd/serial.c ****   serial_input_with_pullup();
 495:keyboards/crkbd/serial.c ****   _delay_us(SLAVE_INT_RESPONSE_TIME);
 496:keyboards/crkbd/serial.c **** 
 497:keyboards/crkbd/serial.c ****   // check if the target is present
 498:keyboards/crkbd/serial.c ****   if (serial_read_pin()) {
 499:keyboards/crkbd/serial.c ****     // target failed to pull the line low, assume not present
 500:keyboards/crkbd/serial.c ****     serial_output();
 501:keyboards/crkbd/serial.c ****     serial_high();
 502:keyboards/crkbd/serial.c ****     *trans->status = TRANSACTION_NO_RESPONSE;
 503:keyboards/crkbd/serial.c ****     sei();
 504:keyboards/crkbd/serial.c ****     return TRANSACTION_NO_RESPONSE;
 505:keyboards/crkbd/serial.c ****   }
 506:keyboards/crkbd/serial.c **** 
 507:keyboards/crkbd/serial.c **** #else
 508:keyboards/crkbd/serial.c ****   // send transaction table index
 509:keyboards/crkbd/serial.c ****   int tid = (sstd_index<<3) | (7 & nibble_bits_count(sstd_index));
 1315               		.loc 1 509 3 is_stmt 1 view .LVU376
 1316               	.LBB289:
 1317               	.LBI289:
 410:keyboards/crkbd/serial.c **** {
 1318               		.loc 1 410 23 view .LVU377
 1319               	.LBB290:
 412:keyboards/crkbd/serial.c ****     bits = (bits & 0x3) + (bits >> 2 & 0x3);
 1320               		.loc 1 412 5 view .LVU378
 412:keyboards/crkbd/serial.c ****     bits = (bits & 0x3) + (bits >> 2 & 0x3);
 1321               		.loc 1 412 38 is_stmt 0 view .LVU379
 1322 003a 982F      		mov r25,r24
 1323 003c 9695      		lsr r25
 1324 003e 9570      		andi r25,lo8(5)
 412:keyboards/crkbd/serial.c ****     bits = (bits & 0x3) + (bits >> 2 & 0x3);
 1325               		.loc 1 412 18 view .LVU380
 1326 0040 8570      		andi r24,lo8(5)
 1327               	.LVL77:
 412:keyboards/crkbd/serial.c ****     bits = (bits & 0x3) + (bits >> 2 & 0x3);
 1328               		.loc 1 412 10 view .LVU381
 1329 0042 980F      		add r25,r24
 1330               	.LVL78:
 413:keyboards/crkbd/serial.c ****     return bits;
 1331               		.loc 1 413 5 is_stmt 1 view .LVU382
 413:keyboards/crkbd/serial.c ****     return bits;
 1332               		.loc 1 413 18 is_stmt 0 view .LVU383
 1333 0044 892F      		mov r24,r25
 1334 0046 8370      		andi r24,lo8(3)
 413:keyboards/crkbd/serial.c ****     return bits;
 1335               		.loc 1 413 38 view .LVU384
 1336 0048 9695      		lsr r25
 1337 004a 9695      		lsr r25
 1338               	.LVL79:
 414:keyboards/crkbd/serial.c **** }
 1339               		.loc 1 414 5 is_stmt 1 view .LVU385
 413:keyboards/crkbd/serial.c ****     return bits;
 1340               		.loc 1 413 10 is_stmt 0 view .LVU386
 1341 004c 980F      		add r25,r24
 1342               	.LBE290:
 1343               	.LBE289:
 1344               		.loc 1 509 7 view .LVU387
 1345 004e 092B      		or r16,r25
 510:keyboards/crkbd/serial.c ****   sync_send();
 1346               		.loc 1 510 3 is_stmt 1 view .LVU388
 1347 0050 0E94 0000 		call sync_send
 1348               	.LVL80:
 511:keyboards/crkbd/serial.c ****   _delay_sub_us(TID_SEND_ADJUST);
 1349               		.loc 1 511 3 view .LVU389
 1350 0054 00C0      		rjmp .
 512:keyboards/crkbd/serial.c ****   serial_write_chunk(tid, 7);
 1351               		.loc 1 512 3 view .LVU390
 1352 0056 67E0      		ldi r22,lo8(7)
 1353 0058 802F      		mov r24,r16
 1354 005a 0E94 0000 		call serial_write_chunk
 1355               	.LVL81:
 513:keyboards/crkbd/serial.c ****   serial_delay_half1();
 1356               		.loc 1 513 3 view .LVU391
 1357               	.LBB291:
 1358               	.LBI291:
 234:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF1);
 1359               		.loc 1 234 6 view .LVU392
 1360               	.LBE291:
 235:keyboards/crkbd/serial.c **** }
 1361               		.loc 1 235 3 view .LVU393
 1362               	.LBB294:
 1363               	.LBB292:
 1364               	.LBI292:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1365               		.loc 2 255 1 view .LVU394
 1366               	.LBB293:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1367               		.loc 2 257 2 view .LVU395
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1368               		.loc 2 261 2 view .LVU396
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 1369               		.loc 2 262 2 view .LVU397
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1370               		.loc 2 263 2 view .LVU398
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1371               		.loc 2 273 3 view .LVU399
 1372               		.loc 2 276 2 view .LVU400
 1373 005e 80E1      		ldi r24,lo8(16)
 1374 0060 8A95      	1:	dec r24
 1375 0062 01F4      		brne 1b
 1376               	.LVL82:
 1377               		.loc 2 276 2 is_stmt 0 view .LVU401
 1378               	.LBE293:
 1379               	.LBE292:
 1380               	.LBE294:
 514:keyboards/crkbd/serial.c **** 
 515:keyboards/crkbd/serial.c ****   // wait for the target response (step1 low->high)
 516:keyboards/crkbd/serial.c ****   serial_input_with_pullup();
 1381               		.loc 1 516 3 is_stmt 1 view .LVU402
 1382               	.LBB295:
 1383               	.LBI295:
 253:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
 1384               		.loc 1 253 6 view .LVU403
 1385               	.LBB296:
 254:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 1386               		.loc 1 254 3 view .LVU404
 254:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 1387               		.loc 1 254 19 is_stmt 0 view .LVU405
 1388 0064 5298      		cbi 0xa,2
 255:keyboards/crkbd/serial.c **** }
 1389               		.loc 1 255 3 is_stmt 1 view .LVU406
 255:keyboards/crkbd/serial.c **** }
 1390               		.loc 1 255 19 is_stmt 0 view .LVU407
 1391 0066 5A9A      		sbi 0xb,2
 1392               	.L50:
 1393               	.LBE296:
 1394               	.LBE295:
 1395               	.LBB297:
 1396               	.LBI297:
 260:keyboards/crkbd/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
 1397               		.loc 1 260 9 is_stmt 1 view .LVU408
 1398               	.LBB298:
 261:keyboards/crkbd/serial.c **** }
 1399               		.loc 1 261 3 view .LVU409
 1400               	.LBE298:
 1401               	.LBE297:
 517:keyboards/crkbd/serial.c ****   while( !serial_read_pin() ) {
 1402               		.loc 1 517 8 is_stmt 0 view .LVU410
 1403 0068 4A9B      		sbis 0x9,2
 1404 006a 00C0      		rjmp .L51
 1405 006c 87E0      		ldi r24,lo8(7)
 1406 006e 90E0      		ldi r25,0
 1407               	.L52:
 1408               	.LVL83:
 1409               	.LBB299:
 1410               	.LBB300:
 1411               	.LBI300:
 260:keyboards/crkbd/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
 1412               		.loc 1 260 9 is_stmt 1 discriminator 1 view .LVU411
 1413               	.LBB301:
 261:keyboards/crkbd/serial.c **** }
 1414               		.loc 1 261 3 discriminator 1 view .LVU412
 1415               	.LBE301:
 1416               	.LBE300:
 518:keyboards/crkbd/serial.c ****       _delay_sub_us(2);
 519:keyboards/crkbd/serial.c ****   }
 520:keyboards/crkbd/serial.c **** 
 521:keyboards/crkbd/serial.c ****   // check if the target is present (step2 high->low)
 522:keyboards/crkbd/serial.c ****   for( int i = 0; serial_read_pin(); i++ ) {
 1417               		.loc 1 522 3 is_stmt 0 discriminator 1 view .LVU413
 1418 0070 4A99      		sbic 0x9,2
 1419 0072 00C0      		rjmp .L54
 1420               	.LBE299:
 523:keyboards/crkbd/serial.c ****       if (i > SLAVE_INT_ACK_WIDTH + 1) {
 524:keyboards/crkbd/serial.c ****           // slave failed to pull the line low, assume not present
 525:keyboards/crkbd/serial.c ****           serial_output();
 526:keyboards/crkbd/serial.c ****           serial_high();
 527:keyboards/crkbd/serial.c ****           *trans->status = TRANSACTION_NO_RESPONSE;
 528:keyboards/crkbd/serial.c ****           sei();
 529:keyboards/crkbd/serial.c ****           return TRANSACTION_NO_RESPONSE;
 530:keyboards/crkbd/serial.c ****       }
 531:keyboards/crkbd/serial.c ****       _delay_sub_us(SLAVE_INT_ACK_WIDTH_UNIT);
 532:keyboards/crkbd/serial.c ****   }
 533:keyboards/crkbd/serial.c **** #endif
 534:keyboards/crkbd/serial.c **** 
 535:keyboards/crkbd/serial.c ****   // initiator recive phase
 536:keyboards/crkbd/serial.c ****   // if the target is present syncronize with it
 537:keyboards/crkbd/serial.c ****   if( trans->target2initiator_buffer_size > 0 ) {
 1421               		.loc 1 537 3 is_stmt 1 view .LVU414
 1422               		.loc 1 537 12 is_stmt 0 view .LVU415
 1423 0074 6D81      		ldd r22,Y+5
 1424               		.loc 1 537 5 view .LVU416
 1425 0076 6623      		tst r22
 1426 0078 01F0      		breq .L55
 538:keyboards/crkbd/serial.c ****       if (!serial_recive_packet((uint8_t *)trans->target2initiator_buffer,
 1427               		.loc 1 538 7 is_stmt 1 view .LVU417
 1428               		.loc 1 538 12 is_stmt 0 view .LVU418
 1429 007a 8E81      		ldd r24,Y+6
 1430 007c 9F81      		ldd r25,Y+7
 1431               	.LVL84:
 1432               		.loc 1 538 12 view .LVU419
 1433 007e 0E94 0000 		call serial_recive_packet
 1434               	.LVL85:
 1435               		.loc 1 538 10 view .LVU420
 1436 0082 8111      		cpse r24,__zero_reg__
 1437 0084 00C0      		rjmp .L55
 539:keyboards/crkbd/serial.c ****                                 trans->target2initiator_buffer_size) ) {
 540:keyboards/crkbd/serial.c ****           serial_output();
 1438               		.loc 1 540 11 is_stmt 1 view .LVU421
 1439               	.LBB306:
 1440               	.LBI306:
 246:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
 1441               		.loc 1 246 6 view .LVU422
 1442               	.LBB307:
 247:keyboards/crkbd/serial.c **** }
 1443               		.loc 1 247 3 view .LVU423
 247:keyboards/crkbd/serial.c **** }
 1444               		.loc 1 247 18 is_stmt 0 view .LVU424
 1445 0086 529A      		sbi 0xa,2
 1446               	.LBE307:
 1447               	.LBE306:
 541:keyboards/crkbd/serial.c ****           serial_high();
 1448               		.loc 1 541 11 is_stmt 1 view .LVU425
 1449               	.LBB308:
 1450               	.LBI308:
 272:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 1451               		.loc 1 272 6 view .LVU426
 1452               	.LBB309:
 273:keyboards/crkbd/serial.c **** }
 1453               		.loc 1 273 3 view .LVU427
 273:keyboards/crkbd/serial.c **** }
 1454               		.loc 1 273 19 is_stmt 0 view .LVU428
 1455 0088 5A9A      		sbi 0xb,2
 1456               	.LBE309:
 1457               	.LBE308:
 542:keyboards/crkbd/serial.c ****           *trans->status = TRANSACTION_DATA_ERROR;
 1458               		.loc 1 542 11 is_stmt 1 view .LVU429
 1459               		.loc 1 542 17 is_stmt 0 view .LVU430
 1460 008a E881      		ld r30,Y
 1461 008c F981      		ldd r31,Y+1
 1462               		.loc 1 542 26 view .LVU431
 1463 008e 82E0      		ldi r24,lo8(2)
 1464 0090 8083      		st Z,r24
 543:keyboards/crkbd/serial.c ****           sei();
 1465               		.loc 1 543 11 is_stmt 1 view .LVU432
 1466               	/* #APP */
 1467               	 ;  543 "keyboards/crkbd/serial.c" 1
 1468 0092 7894      		sei
 1469               	 ;  0 "" 2
 544:keyboards/crkbd/serial.c ****           return TRANSACTION_DATA_ERROR;
 1470               		.loc 1 544 11 view .LVU433
 1471               		.loc 1 544 18 is_stmt 0 view .LVU434
 1472               	/* #NOAPP */
 1473 0094 82E0      		ldi r24,lo8(2)
 1474 0096 90E0      		ldi r25,0
 1475 0098 00C0      		rjmp .L48
 1476               	.L51:
 518:keyboards/crkbd/serial.c ****   }
 1477               		.loc 1 518 7 is_stmt 1 view .LVU435
 1478 009a 00C0      		rjmp .
 1479 009c 00C0      		rjmp .L50
 1480               	.LVL86:
 1481               	.L54:
 1482               	.LBB310:
 523:keyboards/crkbd/serial.c ****           // slave failed to pull the line low, assume not present
 1483               		.loc 1 523 7 view .LVU436
 1484 009e 0197      		sbiw r24,1
 1485               	.LVL87:
 523:keyboards/crkbd/serial.c ****           // slave failed to pull the line low, assume not present
 1486               		.loc 1 523 10 is_stmt 0 view .LVU437
 1487 00a0 01F4      		brne .L53
 525:keyboards/crkbd/serial.c ****           serial_high();
 1488               		.loc 1 525 11 is_stmt 1 view .LVU438
 1489               	.LBB302:
 1490               	.LBI302:
 246:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
 1491               		.loc 1 246 6 view .LVU439
 1492               	.LBB303:
 247:keyboards/crkbd/serial.c **** }
 1493               		.loc 1 247 3 view .LVU440
 247:keyboards/crkbd/serial.c **** }
 1494               		.loc 1 247 18 is_stmt 0 view .LVU441
 1495 00a2 529A      		sbi 0xa,2
 1496               	.LBE303:
 1497               	.LBE302:
 526:keyboards/crkbd/serial.c ****           *trans->status = TRANSACTION_NO_RESPONSE;
 1498               		.loc 1 526 11 is_stmt 1 view .LVU442
 1499               	.LBB304:
 1500               	.LBI304:
 272:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
 1501               		.loc 1 272 6 view .LVU443
 1502               	.LBB305:
 273:keyboards/crkbd/serial.c **** }
 1503               		.loc 1 273 3 view .LVU444
 273:keyboards/crkbd/serial.c **** }
 1504               		.loc 1 273 19 is_stmt 0 view .LVU445
 1505 00a4 5A9A      		sbi 0xb,2
 1506               	.LBE305:
 1507               	.LBE304:
 527:keyboards/crkbd/serial.c ****           sei();
 1508               		.loc 1 527 11 is_stmt 1 view .LVU446
 527:keyboards/crkbd/serial.c ****           sei();
 1509               		.loc 1 527 17 is_stmt 0 view .LVU447
 1510 00a6 E881      		ld r30,Y
 1511 00a8 F981      		ldd r31,Y+1
 527:keyboards/crkbd/serial.c ****           sei();
 1512               		.loc 1 527 26 view .LVU448
 1513 00aa 81E0      		ldi r24,lo8(1)
 1514               	.LVL88:
 527:keyboards/crkbd/serial.c ****           sei();
 1515               		.loc 1 527 26 view .LVU449
 1516 00ac 8083      		st Z,r24
 528:keyboards/crkbd/serial.c ****           return TRANSACTION_NO_RESPONSE;
 1517               		.loc 1 528 11 is_stmt 1 view .LVU450
 1518               	/* #APP */
 1519               	 ;  528 "keyboards/crkbd/serial.c" 1
 1520 00ae 7894      		sei
 1521               	 ;  0 "" 2
 529:keyboards/crkbd/serial.c ****       }
 1522               		.loc 1 529 11 view .LVU451
 529:keyboards/crkbd/serial.c ****       }
 1523               		.loc 1 529 18 is_stmt 0 view .LVU452
 1524               	/* #NOAPP */
 1525 00b0 81E0      		ldi r24,lo8(1)
 1526 00b2 90E0      		ldi r25,0
 1527               	.LVL89:
 1528               	.L48:
 1529               	/* epilogue start */
 529:keyboards/crkbd/serial.c ****       }
 1530               		.loc 1 529 18 view .LVU453
 1531               	.LBE310:
 545:keyboards/crkbd/serial.c ****       }
 546:keyboards/crkbd/serial.c ****    }
 547:keyboards/crkbd/serial.c **** 
 548:keyboards/crkbd/serial.c ****   // initiator switch to output
 549:keyboards/crkbd/serial.c ****   change_reciver2sender();
 550:keyboards/crkbd/serial.c **** 
 551:keyboards/crkbd/serial.c ****   // initiator send phase
 552:keyboards/crkbd/serial.c ****   if( trans->initiator2target_buffer_size > 0 ) {
 553:keyboards/crkbd/serial.c ****       serial_send_packet((uint8_t *)trans->initiator2target_buffer,
 554:keyboards/crkbd/serial.c ****                          trans->initiator2target_buffer_size);
 555:keyboards/crkbd/serial.c ****   }
 556:keyboards/crkbd/serial.c **** 
 557:keyboards/crkbd/serial.c ****   // always, release the line when not in use
 558:keyboards/crkbd/serial.c ****   sync_send();
 559:keyboards/crkbd/serial.c **** 
 560:keyboards/crkbd/serial.c ****   *trans->status = TRANSACTION_END;
 561:keyboards/crkbd/serial.c ****   sei();
 562:keyboards/crkbd/serial.c ****   return TRANSACTION_END;
 563:keyboards/crkbd/serial.c **** }
 1532               		.loc 1 563 1 view .LVU454
 1533 00b4 DF91      		pop r29
 1534 00b6 CF91      		pop r28
 1535 00b8 1F91      		pop r17
 1536 00ba 0F91      		pop r16
 1537 00bc 0895      		ret
 1538               	.LVL90:
 1539               	.L53:
 1540               	.LBB311:
 531:keyboards/crkbd/serial.c ****   }
 1541               		.loc 1 531 7 is_stmt 1 discriminator 2 view .LVU455
 1542 00be 00C0      		rjmp .
 1543               	.LVL91:
 531:keyboards/crkbd/serial.c ****   }
 1544               		.loc 1 531 7 is_stmt 0 discriminator 2 view .LVU456
 1545 00c0 00C0      		rjmp .L52
 1546               	.LVL92:
 1547               	.L55:
 531:keyboards/crkbd/serial.c ****   }
 1548               		.loc 1 531 7 discriminator 2 view .LVU457
 1549               	.LBE311:
 549:keyboards/crkbd/serial.c **** 
 1550               		.loc 1 549 3 is_stmt 1 view .LVU458
 1551               	.LBB312:
 1552               	.LBI312:
 402:keyboards/crkbd/serial.c ****     sync_recv();     //0
 1553               		.loc 1 402 6 view .LVU459
 1554               	.LBB313:
 403:keyboards/crkbd/serial.c ****     serial_delay();  //1
 1555               		.loc 1 403 5 view .LVU460
 1556 00c2 0E94 0000 		call sync_recv
 1557               	.LVL93:
 404:keyboards/crkbd/serial.c ****     serial_low();    //3
 1558               		.loc 1 404 5 view .LVU461
 1559               	.LBB314:
 1560               	.LBI314:
 228:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY);
 1561               		.loc 1 228 6 view .LVU462
 1562               	.LBE314:
 1563               	.LBE313:
 1564               	.LBE312:
 229:keyboards/crkbd/serial.c **** }
 1565               		.loc 1 229 3 view .LVU463
 1566               	.LBB328:
 1567               	.LBB326:
 1568               	.LBB317:
 1569               	.LBB315:
 1570               	.LBI315:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1571               		.loc 2 255 1 view .LVU464
 1572               	.LBB316:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1573               		.loc 2 257 2 view .LVU465
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1574               		.loc 2 261 2 view .LVU466
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 1575               		.loc 2 262 2 view .LVU467
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1576               		.loc 2 263 2 view .LVU468
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1577               		.loc 2 273 3 view .LVU469
 1578               		.loc 2 276 2 view .LVU470
 1579 00c6 20E2      		ldi r18,lo8(32)
 1580 00c8 2A95      	1:	dec r18
 1581 00ca 01F4      		brne 1b
 1582               	.LVL94:
 1583               		.loc 2 276 2 is_stmt 0 view .LVU471
 1584               	.LBE316:
 1585               	.LBE315:
 1586               	.LBE317:
 405:keyboards/crkbd/serial.c ****     serial_output(); //3
 1587               		.loc 1 405 5 is_stmt 1 view .LVU472
 1588               	.LBB318:
 1589               	.LBI318:
 266:keyboards/crkbd/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 1590               		.loc 1 266 6 view .LVU473
 1591               	.LBB319:
 267:keyboards/crkbd/serial.c **** }
 1592               		.loc 1 267 3 view .LVU474
 267:keyboards/crkbd/serial.c **** }
 1593               		.loc 1 267 19 is_stmt 0 view .LVU475
 1594 00cc 5A98      		cbi 0xb,2
 1595               	.LBE319:
 1596               	.LBE318:
 406:keyboards/crkbd/serial.c ****     serial_delay_half1(); //4
 1597               		.loc 1 406 5 is_stmt 1 view .LVU476
 1598               	.LBB320:
 1599               	.LBI320:
 246:keyboards/crkbd/serial.c ****   SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
 1600               		.loc 1 246 6 view .LVU477
 1601               	.LBB321:
 247:keyboards/crkbd/serial.c **** }
 1602               		.loc 1 247 3 view .LVU478
 247:keyboards/crkbd/serial.c **** }
 1603               		.loc 1 247 18 is_stmt 0 view .LVU479
 1604 00ce 529A      		sbi 0xa,2
 1605               	.LBE321:
 1606               	.LBE320:
 407:keyboards/crkbd/serial.c **** }
 1607               		.loc 1 407 5 is_stmt 1 view .LVU480
 1608               	.LBB322:
 1609               	.LBI322:
 234:keyboards/crkbd/serial.c ****   _delay_us(SERIAL_DELAY_HALF1);
 1610               		.loc 1 234 6 view .LVU481
 1611               	.LBE322:
 1612               	.LBE326:
 1613               	.LBE328:
 235:keyboards/crkbd/serial.c **** }
 1614               		.loc 1 235 3 view .LVU482
 1615               	.LVL95:
 1616               	.LBB329:
 1617               	.LBB327:
 1618               	.LBB325:
 1619               	.LBB323:
 1620               	.LBI323:
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1621               		.loc 2 255 1 view .LVU483
 1622               	.LBB324:
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1623               		.loc 2 257 2 view .LVU484
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1624               		.loc 2 261 2 view .LVU485
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 1625               		.loc 2 262 2 view .LVU486
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1626               		.loc 2 263 2 view .LVU487
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1627               		.loc 2 273 3 view .LVU488
 1628               		.loc 2 276 2 view .LVU489
 1629 00d0 80E1      		ldi r24,lo8(16)
 1630 00d2 8A95      	1:	dec r24
 1631 00d4 01F4      		brne 1b
 1632               	.LVL96:
 1633               		.loc 2 276 2 is_stmt 0 view .LVU490
 1634               	.LBE324:
 1635               	.LBE323:
 1636               	.LBE325:
 1637               	.LBE327:
 1638               	.LBE329:
 552:keyboards/crkbd/serial.c ****       serial_send_packet((uint8_t *)trans->initiator2target_buffer,
 1639               		.loc 1 552 3 is_stmt 1 view .LVU491
 552:keyboards/crkbd/serial.c ****       serial_send_packet((uint8_t *)trans->initiator2target_buffer,
 1640               		.loc 1 552 12 is_stmt 0 view .LVU492
 1641 00d6 6A81      		ldd r22,Y+2
 552:keyboards/crkbd/serial.c ****       serial_send_packet((uint8_t *)trans->initiator2target_buffer,
 1642               		.loc 1 552 5 view .LVU493
 1643 00d8 6623      		tst r22
 1644 00da 01F0      		breq .L56
 553:keyboards/crkbd/serial.c ****                          trans->initiator2target_buffer_size);
 1645               		.loc 1 553 7 is_stmt 1 view .LVU494
 1646 00dc 8B81      		ldd r24,Y+3
 1647 00de 9C81      		ldd r25,Y+4
 1648 00e0 0E94 0000 		call serial_send_packet
 1649               	.LVL97:
 1650               	.L56:
 558:keyboards/crkbd/serial.c **** 
 1651               		.loc 1 558 3 view .LVU495
 1652 00e4 0E94 0000 		call sync_send
 1653               	.LVL98:
 560:keyboards/crkbd/serial.c ****   sei();
 1654               		.loc 1 560 3 view .LVU496
 560:keyboards/crkbd/serial.c ****   sei();
 1655               		.loc 1 560 9 is_stmt 0 view .LVU497
 1656 00e8 E881      		ld r30,Y
 1657 00ea F981      		ldd r31,Y+1
 560:keyboards/crkbd/serial.c ****   sei();
 1658               		.loc 1 560 18 view .LVU498
 1659 00ec 1082      		st Z,__zero_reg__
 561:keyboards/crkbd/serial.c ****   return TRANSACTION_END;
 1660               		.loc 1 561 3 is_stmt 1 view .LVU499
 1661               	/* #APP */
 1662               	 ;  561 "keyboards/crkbd/serial.c" 1
 1663 00ee 7894      		sei
 1664               	 ;  0 "" 2
 562:keyboards/crkbd/serial.c **** }
 1665               		.loc 1 562 3 view .LVU500
 562:keyboards/crkbd/serial.c **** }
 1666               		.loc 1 562 10 is_stmt 0 view .LVU501
 1667               	/* #NOAPP */
 1668 00f0 90E0      		ldi r25,0
 1669 00f2 80E0      		ldi r24,0
 1670 00f4 00C0      		rjmp .L48
 1671               	.LVL99:
 1672               	.L57:
 482:keyboards/crkbd/serial.c ****   SSTD_t *trans = &Transaction_table[sstd_index];
 1673               		.loc 1 482 14 view .LVU502
 1674 00f6 84E0      		ldi r24,lo8(4)
 1675 00f8 90E0      		ldi r25,0
 1676               	.LVL100:
 482:keyboards/crkbd/serial.c ****   SSTD_t *trans = &Transaction_table[sstd_index];
 1677               		.loc 1 482 14 view .LVU503
 1678 00fa 00C0      		rjmp .L48
 1679               		.cfi_endproc
 1680               	.LFE26:
 1682               		.section	.text.soft_serial_get_and_clean_status,"ax",@progbits
 1683               	.global	soft_serial_get_and_clean_status
 1685               	soft_serial_get_and_clean_status:
 1686               	.LVL101:
 1687               	.LFB27:
 564:keyboards/crkbd/serial.c **** 
 565:keyboards/crkbd/serial.c **** #ifdef SERIAL_USE_MULTI_TRANSACTION
 566:keyboards/crkbd/serial.c **** int soft_serial_get_and_clean_status(int sstd_index) {
 1688               		.loc 1 566 54 is_stmt 1 view -0
 1689               		.cfi_startproc
 1690               	/* prologue: function */
 1691               	/* frame size = 0 */
 1692               	/* stack size = 0 */
 1693               	.L__stack_usage = 0
 567:keyboards/crkbd/serial.c ****     SSTD_t *trans = &Transaction_table[sstd_index];
 1694               		.loc 1 567 5 view .LVU505
 1695               		.loc 1 567 39 is_stmt 0 view .LVU506
 1696 0000 23E0      		ldi r18,3
 1697               		1:
 1698 0002 880F      		lsl r24
 1699 0004 991F      		rol r25
 1700 0006 2A95      		dec r18
 1701 0008 01F4      		brne 1b
 1702               	.LVL102:
 1703               		.loc 1 567 13 view .LVU507
 1704 000a 2091 0000 		lds r18,Transaction_table
 1705 000e 3091 0000 		lds r19,Transaction_table+1
 1706 0012 280F      		add r18,r24
 1707 0014 391F      		adc r19,r25
 1708               	.LVL103:
 568:keyboards/crkbd/serial.c ****     cli();
 1709               		.loc 1 568 5 is_stmt 1 view .LVU508
 1710               	/* #APP */
 1711               	 ;  568 "keyboards/crkbd/serial.c" 1
 1712 0016 F894      		cli
 1713               	 ;  0 "" 2
 569:keyboards/crkbd/serial.c ****     int retval = *trans->status;
 1714               		.loc 1 569 5 view .LVU509
 1715               		.loc 1 569 24 is_stmt 0 view .LVU510
 1716               	/* #NOAPP */
 1717 0018 D901      		movw r26,r18
 1718 001a ED91      		ld r30,X+
 1719 001c FC91      		ld r31,X
 1720               		.loc 1 569 9 view .LVU511
 1721 001e 8081      		ld r24,Z
 1722 0020 90E0      		ldi r25,0
 1723               	.LVL104:
 570:keyboards/crkbd/serial.c ****     *trans->status = 0;;
 1724               		.loc 1 570 5 is_stmt 1 view .LVU512
 1725               		.loc 1 570 20 is_stmt 0 view .LVU513
 1726 0022 1082      		st Z,__zero_reg__
 1727               		.loc 1 570 24 is_stmt 1 view .LVU514
 571:keyboards/crkbd/serial.c ****     sei();
 1728               		.loc 1 571 5 view .LVU515
 1729               	/* #APP */
 1730               	 ;  571 "keyboards/crkbd/serial.c" 1
 1731 0024 7894      		sei
 1732               	 ;  0 "" 2
 572:keyboards/crkbd/serial.c ****     return retval;
 1733               		.loc 1 572 5 view .LVU516
 1734               	/* #NOAPP */
 1735               	/* epilogue start */
 573:keyboards/crkbd/serial.c **** }
 1736               		.loc 1 573 1 is_stmt 0 view .LVU517
 1737 0026 0895      		ret
 1738               		.cfi_endproc
 1739               	.LFE27:
 1741               		.section	.bss.Transaction_table_size,"aw",@nobits
 1744               	Transaction_table_size:
 1745 0000 00        		.zero	1
 1746               		.section	.bss.Transaction_table,"aw",@nobits
 1749               	Transaction_table:
 1750 0000 0000      		.zero	2
 1751               		.text
 1752               	.Letext0:
 1753               		.file 3 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 1754               		.file 4 "keyboards/crkbd/serial.h"
DEFINED SYMBOLS
                            *ABS*:00000000 serial.c
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:2      *ABS*:0000003e __SP_H__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:3      *ABS*:0000003d __SP_L__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:4      *ABS*:0000003f __SREG__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:6      *ABS*:00000001 __zero_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:12     .text.sync_recv:00000000 sync_recv
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:72     .text.sync_send:00000000 sync_send
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:135    .text.serial_read_chunk:00000000 serial_read_chunk
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:345    .text.serial_recive_packet:00000000 serial_recive_packet
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:455    .text.soft_serial_initiator_init:00000000 soft_serial_initiator_init
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:1749   .bss.Transaction_table:00000000 Transaction_table
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:1744   .bss.Transaction_table_size:00000000 Transaction_table_size
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:500    .text.soft_serial_target_init:00000000 soft_serial_target_init
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:551    .text.serial_write_chunk:00000000 serial_write_chunk
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:722    .text.serial_send_packet:00000000 serial_send_packet
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:805    .text.__vector_3:00000000 __vector_3
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:1220   .text.soft_serial_transaction:00000000 soft_serial_transaction
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccW8ozUs.s:1685   .text.soft_serial_get_and_clean_status:00000000 soft_serial_get_and_clean_status

UNDEFINED SYMBOLS
__do_clear_bss
