   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.unselect_rows,"ax",@progbits
  12               	unselect_rows:
  13               	.LFB33:
  14               		.file 1 "keyboards/crkbd/rev1/matrix.c"
   1:keyboards/crkbd/rev1/matrix.c **** /*
   2:keyboards/crkbd/rev1/matrix.c **** Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:keyboards/crkbd/rev1/matrix.c **** 
   4:keyboards/crkbd/rev1/matrix.c **** This program is free software: you can redistribute it and/or modify
   5:keyboards/crkbd/rev1/matrix.c **** it under the terms of the GNU General Public License as published by
   6:keyboards/crkbd/rev1/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   7:keyboards/crkbd/rev1/matrix.c **** (at your option) any later version.
   8:keyboards/crkbd/rev1/matrix.c **** 
   9:keyboards/crkbd/rev1/matrix.c **** This program is distributed in the hope that it will be useful,
  10:keyboards/crkbd/rev1/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:keyboards/crkbd/rev1/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:keyboards/crkbd/rev1/matrix.c **** GNU General Public License for more details.
  13:keyboards/crkbd/rev1/matrix.c **** 
  14:keyboards/crkbd/rev1/matrix.c **** You should have received a copy of the GNU General Public License
  15:keyboards/crkbd/rev1/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:keyboards/crkbd/rev1/matrix.c **** */
  17:keyboards/crkbd/rev1/matrix.c **** 
  18:keyboards/crkbd/rev1/matrix.c **** /*
  19:keyboards/crkbd/rev1/matrix.c ****  * scan matrix
  20:keyboards/crkbd/rev1/matrix.c ****  */
  21:keyboards/crkbd/rev1/matrix.c **** #include <stdint.h>
  22:keyboards/crkbd/rev1/matrix.c **** #include <stdbool.h>
  23:keyboards/crkbd/rev1/matrix.c **** #include <string.h>
  24:keyboards/crkbd/rev1/matrix.c **** #include <avr/io.h>
  25:keyboards/crkbd/rev1/matrix.c **** #include <avr/wdt.h>
  26:keyboards/crkbd/rev1/matrix.c **** #include <avr/interrupt.h>
  27:keyboards/crkbd/rev1/matrix.c **** #include <util/delay.h>
  28:keyboards/crkbd/rev1/matrix.c **** #include "print.h"
  29:keyboards/crkbd/rev1/matrix.c **** #include "debug.h"
  30:keyboards/crkbd/rev1/matrix.c **** #include "util.h"
  31:keyboards/crkbd/rev1/matrix.c **** #include "matrix.h"
  32:keyboards/crkbd/rev1/matrix.c **** #include "split_util.h"
  33:keyboards/crkbd/rev1/matrix.c **** #include "pro_micro.h"
  34:keyboards/crkbd/rev1/matrix.c **** 
  35:keyboards/crkbd/rev1/matrix.c **** #ifdef USE_MATRIX_I2C
  36:keyboards/crkbd/rev1/matrix.c **** #  include "i2c.h"
  37:keyboards/crkbd/rev1/matrix.c **** #else // USE_SERIAL
  38:keyboards/crkbd/rev1/matrix.c **** #  include "split_scomm.h"
  39:keyboards/crkbd/rev1/matrix.c **** #endif
  40:keyboards/crkbd/rev1/matrix.c **** 
  41:keyboards/crkbd/rev1/matrix.c **** #ifndef DEBOUNCE
  42:keyboards/crkbd/rev1/matrix.c **** #  define DEBOUNCE	5
  43:keyboards/crkbd/rev1/matrix.c **** #endif
  44:keyboards/crkbd/rev1/matrix.c **** 
  45:keyboards/crkbd/rev1/matrix.c **** #define ERROR_DISCONNECT_COUNT 5
  46:keyboards/crkbd/rev1/matrix.c **** 
  47:keyboards/crkbd/rev1/matrix.c **** static uint8_t debouncing = DEBOUNCE;
  48:keyboards/crkbd/rev1/matrix.c **** static const int ROWS_PER_HAND = MATRIX_ROWS/2;
  49:keyboards/crkbd/rev1/matrix.c **** static uint8_t error_count = 0;
  50:keyboards/crkbd/rev1/matrix.c **** uint8_t is_master = 0 ;
  51:keyboards/crkbd/rev1/matrix.c **** 
  52:keyboards/crkbd/rev1/matrix.c **** static const uint8_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  53:keyboards/crkbd/rev1/matrix.c **** static const uint8_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  54:keyboards/crkbd/rev1/matrix.c **** 
  55:keyboards/crkbd/rev1/matrix.c **** /* matrix state(1:on, 0:off) */
  56:keyboards/crkbd/rev1/matrix.c **** static matrix_row_t matrix[MATRIX_ROWS];
  57:keyboards/crkbd/rev1/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  58:keyboards/crkbd/rev1/matrix.c **** 
  59:keyboards/crkbd/rev1/matrix.c **** static matrix_row_t read_cols(void);
  60:keyboards/crkbd/rev1/matrix.c **** static void init_cols(void);
  61:keyboards/crkbd/rev1/matrix.c **** static void unselect_rows(void);
  62:keyboards/crkbd/rev1/matrix.c **** static void select_row(uint8_t row);
  63:keyboards/crkbd/rev1/matrix.c **** static uint8_t matrix_master_scan(void);
  64:keyboards/crkbd/rev1/matrix.c **** 
  65:keyboards/crkbd/rev1/matrix.c **** 
  66:keyboards/crkbd/rev1/matrix.c **** __attribute__ ((weak))
  67:keyboards/crkbd/rev1/matrix.c **** void matrix_init_kb(void) {
  68:keyboards/crkbd/rev1/matrix.c ****     matrix_init_user();
  69:keyboards/crkbd/rev1/matrix.c **** }
  70:keyboards/crkbd/rev1/matrix.c **** 
  71:keyboards/crkbd/rev1/matrix.c **** __attribute__ ((weak))
  72:keyboards/crkbd/rev1/matrix.c **** void matrix_scan_kb(void) {
  73:keyboards/crkbd/rev1/matrix.c ****     matrix_scan_user();
  74:keyboards/crkbd/rev1/matrix.c **** }
  75:keyboards/crkbd/rev1/matrix.c **** 
  76:keyboards/crkbd/rev1/matrix.c **** __attribute__ ((weak))
  77:keyboards/crkbd/rev1/matrix.c **** void matrix_init_user(void) {
  78:keyboards/crkbd/rev1/matrix.c **** }
  79:keyboards/crkbd/rev1/matrix.c **** 
  80:keyboards/crkbd/rev1/matrix.c **** __attribute__ ((weak))
  81:keyboards/crkbd/rev1/matrix.c **** void matrix_scan_user(void) {
  82:keyboards/crkbd/rev1/matrix.c **** }
  83:keyboards/crkbd/rev1/matrix.c **** 
  84:keyboards/crkbd/rev1/matrix.c **** inline
  85:keyboards/crkbd/rev1/matrix.c **** uint8_t matrix_rows(void)
  86:keyboards/crkbd/rev1/matrix.c **** {
  87:keyboards/crkbd/rev1/matrix.c ****     return MATRIX_ROWS;
  88:keyboards/crkbd/rev1/matrix.c **** }
  89:keyboards/crkbd/rev1/matrix.c **** 
  90:keyboards/crkbd/rev1/matrix.c **** inline
  91:keyboards/crkbd/rev1/matrix.c **** uint8_t matrix_cols(void)
  92:keyboards/crkbd/rev1/matrix.c **** {
  93:keyboards/crkbd/rev1/matrix.c ****     return MATRIX_COLS;
  94:keyboards/crkbd/rev1/matrix.c **** }
  95:keyboards/crkbd/rev1/matrix.c **** 
  96:keyboards/crkbd/rev1/matrix.c **** void tx_rx_leds_init(void)
  97:keyboards/crkbd/rev1/matrix.c **** {
  98:keyboards/crkbd/rev1/matrix.c **** #ifndef NO_DEBUG_LEDS
  99:keyboards/crkbd/rev1/matrix.c ****     TX_RX_LED_INIT;
 100:keyboards/crkbd/rev1/matrix.c ****     TXLED0;
 101:keyboards/crkbd/rev1/matrix.c ****     RXLED0;
 102:keyboards/crkbd/rev1/matrix.c **** #endif
 103:keyboards/crkbd/rev1/matrix.c **** }
 104:keyboards/crkbd/rev1/matrix.c **** 
 105:keyboards/crkbd/rev1/matrix.c **** void tx_led_on(void)
 106:keyboards/crkbd/rev1/matrix.c **** {
 107:keyboards/crkbd/rev1/matrix.c **** #ifndef NO_DEBUG_LEDS
 108:keyboards/crkbd/rev1/matrix.c ****     TXLED1;
 109:keyboards/crkbd/rev1/matrix.c **** #endif
 110:keyboards/crkbd/rev1/matrix.c **** }
 111:keyboards/crkbd/rev1/matrix.c **** 
 112:keyboards/crkbd/rev1/matrix.c **** void tx_led_off(void)
 113:keyboards/crkbd/rev1/matrix.c **** {
 114:keyboards/crkbd/rev1/matrix.c **** #ifndef NO_DEBUG_LEDS
 115:keyboards/crkbd/rev1/matrix.c ****     TXLED0;
 116:keyboards/crkbd/rev1/matrix.c **** #endif
 117:keyboards/crkbd/rev1/matrix.c **** }
 118:keyboards/crkbd/rev1/matrix.c **** 
 119:keyboards/crkbd/rev1/matrix.c **** void rx_led_on(void)
 120:keyboards/crkbd/rev1/matrix.c **** {
 121:keyboards/crkbd/rev1/matrix.c **** #ifndef NO_DEBUG_LEDS
 122:keyboards/crkbd/rev1/matrix.c ****     RXLED1;
 123:keyboards/crkbd/rev1/matrix.c **** #endif
 124:keyboards/crkbd/rev1/matrix.c **** }
 125:keyboards/crkbd/rev1/matrix.c **** 
 126:keyboards/crkbd/rev1/matrix.c **** void rx_led_off(void)
 127:keyboards/crkbd/rev1/matrix.c **** {
 128:keyboards/crkbd/rev1/matrix.c **** #ifndef NO_DEBUG_LEDS
 129:keyboards/crkbd/rev1/matrix.c ****     RXLED0;
 130:keyboards/crkbd/rev1/matrix.c **** #endif
 131:keyboards/crkbd/rev1/matrix.c **** }
 132:keyboards/crkbd/rev1/matrix.c **** 
 133:keyboards/crkbd/rev1/matrix.c **** 
 134:keyboards/crkbd/rev1/matrix.c **** void matrix_init(void)
 135:keyboards/crkbd/rev1/matrix.c **** {
 136:keyboards/crkbd/rev1/matrix.c ****     split_keyboard_setup();
 137:keyboards/crkbd/rev1/matrix.c **** 
 138:keyboards/crkbd/rev1/matrix.c ****     // initialize row and col
 139:keyboards/crkbd/rev1/matrix.c ****     unselect_rows();
 140:keyboards/crkbd/rev1/matrix.c ****     init_cols();
 141:keyboards/crkbd/rev1/matrix.c **** 
 142:keyboards/crkbd/rev1/matrix.c ****     tx_rx_leds_init();
 143:keyboards/crkbd/rev1/matrix.c **** 
 144:keyboards/crkbd/rev1/matrix.c ****     // initialize matrix state: all keys off
 145:keyboards/crkbd/rev1/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 146:keyboards/crkbd/rev1/matrix.c ****         matrix[i] = 0;
 147:keyboards/crkbd/rev1/matrix.c ****         matrix_debouncing[i] = 0;
 148:keyboards/crkbd/rev1/matrix.c ****     }
 149:keyboards/crkbd/rev1/matrix.c **** 
 150:keyboards/crkbd/rev1/matrix.c ****     is_master = has_usb();
 151:keyboards/crkbd/rev1/matrix.c **** 
 152:keyboards/crkbd/rev1/matrix.c ****     matrix_init_quantum();
 153:keyboards/crkbd/rev1/matrix.c **** }
 154:keyboards/crkbd/rev1/matrix.c **** 
 155:keyboards/crkbd/rev1/matrix.c **** uint8_t _matrix_scan(void)
 156:keyboards/crkbd/rev1/matrix.c **** {
 157:keyboards/crkbd/rev1/matrix.c ****     // Right hand is stored after the left in the matirx so, we need to offset it
 158:keyboards/crkbd/rev1/matrix.c ****     int offset = isLeftHand ? 0 : (ROWS_PER_HAND);
 159:keyboards/crkbd/rev1/matrix.c **** 
 160:keyboards/crkbd/rev1/matrix.c ****     for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 161:keyboards/crkbd/rev1/matrix.c ****         select_row(i);
 162:keyboards/crkbd/rev1/matrix.c ****         _delay_us(30);  // without this wait read unstable value.
 163:keyboards/crkbd/rev1/matrix.c ****         matrix_row_t cols = read_cols();
 164:keyboards/crkbd/rev1/matrix.c ****         if (matrix_debouncing[i+offset] != cols) {
 165:keyboards/crkbd/rev1/matrix.c ****             matrix_debouncing[i+offset] = cols;
 166:keyboards/crkbd/rev1/matrix.c ****             debouncing = DEBOUNCE;
 167:keyboards/crkbd/rev1/matrix.c ****         }
 168:keyboards/crkbd/rev1/matrix.c ****         unselect_rows();
 169:keyboards/crkbd/rev1/matrix.c ****     }
 170:keyboards/crkbd/rev1/matrix.c **** 
 171:keyboards/crkbd/rev1/matrix.c ****     if (debouncing) {
 172:keyboards/crkbd/rev1/matrix.c ****         if (--debouncing) {
 173:keyboards/crkbd/rev1/matrix.c ****             _delay_ms(1);
 174:keyboards/crkbd/rev1/matrix.c ****         } else {
 175:keyboards/crkbd/rev1/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 176:keyboards/crkbd/rev1/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 177:keyboards/crkbd/rev1/matrix.c ****             }
 178:keyboards/crkbd/rev1/matrix.c ****         }
 179:keyboards/crkbd/rev1/matrix.c ****     }
 180:keyboards/crkbd/rev1/matrix.c **** 
 181:keyboards/crkbd/rev1/matrix.c ****     return 1;
 182:keyboards/crkbd/rev1/matrix.c **** }
 183:keyboards/crkbd/rev1/matrix.c **** 
 184:keyboards/crkbd/rev1/matrix.c **** #ifdef USE_MATRIX_I2C
 185:keyboards/crkbd/rev1/matrix.c **** 
 186:keyboards/crkbd/rev1/matrix.c **** // Get rows from other half over i2c
 187:keyboards/crkbd/rev1/matrix.c **** int i2c_transaction(void) {
 188:keyboards/crkbd/rev1/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 189:keyboards/crkbd/rev1/matrix.c **** 
 190:keyboards/crkbd/rev1/matrix.c ****     int err = i2c_master_start(SLAVE_I2C_ADDRESS + I2C_WRITE);
 191:keyboards/crkbd/rev1/matrix.c ****     if (err) goto i2c_error;
 192:keyboards/crkbd/rev1/matrix.c **** 
 193:keyboards/crkbd/rev1/matrix.c ****     // start of matrix stored at 0x00
 194:keyboards/crkbd/rev1/matrix.c ****     err = i2c_master_write(0x00);
 195:keyboards/crkbd/rev1/matrix.c ****     if (err) goto i2c_error;
 196:keyboards/crkbd/rev1/matrix.c **** 
 197:keyboards/crkbd/rev1/matrix.c ****     // Start read
 198:keyboards/crkbd/rev1/matrix.c ****     err = i2c_master_start(SLAVE_I2C_ADDRESS + I2C_READ);
 199:keyboards/crkbd/rev1/matrix.c ****     if (err) goto i2c_error;
 200:keyboards/crkbd/rev1/matrix.c **** 
 201:keyboards/crkbd/rev1/matrix.c ****     if (!err) {
 202:keyboards/crkbd/rev1/matrix.c ****         int i;
 203:keyboards/crkbd/rev1/matrix.c ****         for (i = 0; i < ROWS_PER_HAND-1; ++i) {
 204:keyboards/crkbd/rev1/matrix.c ****             matrix[slaveOffset+i] = i2c_master_read(I2C_ACK);
 205:keyboards/crkbd/rev1/matrix.c ****         }
 206:keyboards/crkbd/rev1/matrix.c ****         matrix[slaveOffset+i] = i2c_master_read(I2C_NACK);
 207:keyboards/crkbd/rev1/matrix.c ****         i2c_master_stop();
 208:keyboards/crkbd/rev1/matrix.c ****     } else {
 209:keyboards/crkbd/rev1/matrix.c **** i2c_error: // the cable is disconnceted, or something else went wrong
 210:keyboards/crkbd/rev1/matrix.c ****         i2c_reset_state();
 211:keyboards/crkbd/rev1/matrix.c ****         return err;
 212:keyboards/crkbd/rev1/matrix.c ****     }
 213:keyboards/crkbd/rev1/matrix.c **** 
 214:keyboards/crkbd/rev1/matrix.c ****     return 0;
 215:keyboards/crkbd/rev1/matrix.c **** }
 216:keyboards/crkbd/rev1/matrix.c **** 
 217:keyboards/crkbd/rev1/matrix.c **** #else // USE_SERIAL
 218:keyboards/crkbd/rev1/matrix.c **** 
 219:keyboards/crkbd/rev1/matrix.c **** int serial_transaction(int master_changed) {
 220:keyboards/crkbd/rev1/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 221:keyboards/crkbd/rev1/matrix.c **** #ifdef SERIAL_USE_MULTI_TRANSACTION
 222:keyboards/crkbd/rev1/matrix.c ****     int ret=serial_update_buffers(master_changed);
 223:keyboards/crkbd/rev1/matrix.c **** #else
 224:keyboards/crkbd/rev1/matrix.c ****     int ret=serial_update_buffers();
 225:keyboards/crkbd/rev1/matrix.c **** #endif
 226:keyboards/crkbd/rev1/matrix.c ****     if (ret ) {
 227:keyboards/crkbd/rev1/matrix.c ****         if(ret==2) rx_led_on();
 228:keyboards/crkbd/rev1/matrix.c ****         return 1;
 229:keyboards/crkbd/rev1/matrix.c ****     }
 230:keyboards/crkbd/rev1/matrix.c ****     rx_led_off();
 231:keyboards/crkbd/rev1/matrix.c ****     memcpy(&matrix[slaveOffset],
 232:keyboards/crkbd/rev1/matrix.c ****         (void *)serial_slave_buffer, SERIAL_SLAVE_BUFFER_LENGTH);
 233:keyboards/crkbd/rev1/matrix.c ****     return 0;
 234:keyboards/crkbd/rev1/matrix.c **** }
 235:keyboards/crkbd/rev1/matrix.c **** #endif
 236:keyboards/crkbd/rev1/matrix.c **** 
 237:keyboards/crkbd/rev1/matrix.c **** uint8_t matrix_scan(void)
 238:keyboards/crkbd/rev1/matrix.c **** {
 239:keyboards/crkbd/rev1/matrix.c ****     if (is_master) {
 240:keyboards/crkbd/rev1/matrix.c ****         matrix_master_scan();
 241:keyboards/crkbd/rev1/matrix.c ****     }else{
 242:keyboards/crkbd/rev1/matrix.c ****         matrix_slave_scan();
 243:keyboards/crkbd/rev1/matrix.c ****         int offset = (isLeftHand) ? ROWS_PER_HAND : 0;
 244:keyboards/crkbd/rev1/matrix.c ****         memcpy(&matrix[offset],
 245:keyboards/crkbd/rev1/matrix.c ****                (void *)serial_master_buffer, SERIAL_MASTER_BUFFER_LENGTH);
 246:keyboards/crkbd/rev1/matrix.c ****         matrix_scan_quantum();
 247:keyboards/crkbd/rev1/matrix.c ****     }
 248:keyboards/crkbd/rev1/matrix.c ****     return 1;
 249:keyboards/crkbd/rev1/matrix.c **** }
 250:keyboards/crkbd/rev1/matrix.c **** 
 251:keyboards/crkbd/rev1/matrix.c **** 
 252:keyboards/crkbd/rev1/matrix.c **** uint8_t matrix_master_scan(void) {
 253:keyboards/crkbd/rev1/matrix.c **** 
 254:keyboards/crkbd/rev1/matrix.c ****     int ret = _matrix_scan();
 255:keyboards/crkbd/rev1/matrix.c ****     int mchanged = 1;
 256:keyboards/crkbd/rev1/matrix.c **** 
 257:keyboards/crkbd/rev1/matrix.c ****     int offset = (isLeftHand) ? 0 : ROWS_PER_HAND;
 258:keyboards/crkbd/rev1/matrix.c **** 
 259:keyboards/crkbd/rev1/matrix.c **** #ifdef USE_MATRIX_I2C
 260:keyboards/crkbd/rev1/matrix.c **** //    for (int i = 0; i < ROWS_PER_HAND; ++i) {
 261:keyboards/crkbd/rev1/matrix.c ****         /* i2c_slave_buffer[i] = matrix[offset+i]; */
 262:keyboards/crkbd/rev1/matrix.c **** //        i2c_slave_buffer[i] = matrix[offset+i];
 263:keyboards/crkbd/rev1/matrix.c **** //    }
 264:keyboards/crkbd/rev1/matrix.c **** #else // USE_SERIAL
 265:keyboards/crkbd/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 266:keyboards/crkbd/rev1/matrix.c ****     mchanged = memcmp((void *)serial_master_buffer,
 267:keyboards/crkbd/rev1/matrix.c **** 		      &matrix[offset], SERIAL_MASTER_BUFFER_LENGTH);
 268:keyboards/crkbd/rev1/matrix.c ****   #endif
 269:keyboards/crkbd/rev1/matrix.c ****     memcpy((void *)serial_master_buffer,
 270:keyboards/crkbd/rev1/matrix.c **** 	   &matrix[offset], SERIAL_MASTER_BUFFER_LENGTH);
 271:keyboards/crkbd/rev1/matrix.c **** #endif
 272:keyboards/crkbd/rev1/matrix.c **** 
 273:keyboards/crkbd/rev1/matrix.c **** #ifdef USE_MATRIX_I2C
 274:keyboards/crkbd/rev1/matrix.c ****     if( i2c_transaction() ) {
 275:keyboards/crkbd/rev1/matrix.c **** #else // USE_SERIAL
 276:keyboards/crkbd/rev1/matrix.c ****     if( serial_transaction(mchanged) ) {
 277:keyboards/crkbd/rev1/matrix.c **** #endif
 278:keyboards/crkbd/rev1/matrix.c ****         // turn on the indicator led when halves are disconnected
 279:keyboards/crkbd/rev1/matrix.c ****         tx_led_on();
 280:keyboards/crkbd/rev1/matrix.c **** 
 281:keyboards/crkbd/rev1/matrix.c ****         error_count++;
 282:keyboards/crkbd/rev1/matrix.c **** 
 283:keyboards/crkbd/rev1/matrix.c ****         if (error_count > ERROR_DISCONNECT_COUNT) {
 284:keyboards/crkbd/rev1/matrix.c ****             // reset other half if disconnected
 285:keyboards/crkbd/rev1/matrix.c ****             int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 286:keyboards/crkbd/rev1/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 287:keyboards/crkbd/rev1/matrix.c ****                 matrix[slaveOffset+i] = 0;
 288:keyboards/crkbd/rev1/matrix.c ****             }
 289:keyboards/crkbd/rev1/matrix.c ****         }
 290:keyboards/crkbd/rev1/matrix.c ****     } else {
 291:keyboards/crkbd/rev1/matrix.c ****         // turn off the indicator led on no error
 292:keyboards/crkbd/rev1/matrix.c ****         tx_led_off();
 293:keyboards/crkbd/rev1/matrix.c ****         error_count = 0;
 294:keyboards/crkbd/rev1/matrix.c ****     }
 295:keyboards/crkbd/rev1/matrix.c ****     matrix_scan_quantum();
 296:keyboards/crkbd/rev1/matrix.c ****     return ret;
 297:keyboards/crkbd/rev1/matrix.c **** }
 298:keyboards/crkbd/rev1/matrix.c **** 
 299:keyboards/crkbd/rev1/matrix.c **** void matrix_slave_scan(void) {
 300:keyboards/crkbd/rev1/matrix.c ****     _matrix_scan();
 301:keyboards/crkbd/rev1/matrix.c **** 
 302:keyboards/crkbd/rev1/matrix.c ****     int offset = (isLeftHand) ? 0 : ROWS_PER_HAND;
 303:keyboards/crkbd/rev1/matrix.c **** 
 304:keyboards/crkbd/rev1/matrix.c **** #ifdef USE_MATRIX_I2C
 305:keyboards/crkbd/rev1/matrix.c ****     for (int i = 0; i < ROWS_PER_HAND; ++i) {
 306:keyboards/crkbd/rev1/matrix.c ****         /* i2c_slave_buffer[i] = matrix[offset+i]; */
 307:keyboards/crkbd/rev1/matrix.c ****         i2c_slave_buffer[i] = matrix[offset+i];
 308:keyboards/crkbd/rev1/matrix.c ****     }
 309:keyboards/crkbd/rev1/matrix.c **** #else // USE_SERIAL
 310:keyboards/crkbd/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 311:keyboards/crkbd/rev1/matrix.c ****     int change = 0;
 312:keyboards/crkbd/rev1/matrix.c ****   #endif
 313:keyboards/crkbd/rev1/matrix.c ****     for (int i = 0; i < ROWS_PER_HAND; ++i) {
 314:keyboards/crkbd/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 315:keyboards/crkbd/rev1/matrix.c ****         if( serial_slave_buffer[i] != matrix[offset+i] )
 316:keyboards/crkbd/rev1/matrix.c **** 	    change = 1;
 317:keyboards/crkbd/rev1/matrix.c ****   #endif
 318:keyboards/crkbd/rev1/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 319:keyboards/crkbd/rev1/matrix.c ****     }
 320:keyboards/crkbd/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 321:keyboards/crkbd/rev1/matrix.c ****     slave_buffer_change_count += change;
 322:keyboards/crkbd/rev1/matrix.c ****   #endif
 323:keyboards/crkbd/rev1/matrix.c **** #endif
 324:keyboards/crkbd/rev1/matrix.c **** }
 325:keyboards/crkbd/rev1/matrix.c **** 
 326:keyboards/crkbd/rev1/matrix.c **** bool matrix_is_modified(void)
 327:keyboards/crkbd/rev1/matrix.c **** {
 328:keyboards/crkbd/rev1/matrix.c ****     if (debouncing) return false;
 329:keyboards/crkbd/rev1/matrix.c ****     return true;
 330:keyboards/crkbd/rev1/matrix.c **** }
 331:keyboards/crkbd/rev1/matrix.c **** 
 332:keyboards/crkbd/rev1/matrix.c **** inline
 333:keyboards/crkbd/rev1/matrix.c **** bool matrix_is_on(uint8_t row, uint8_t col)
 334:keyboards/crkbd/rev1/matrix.c **** {
 335:keyboards/crkbd/rev1/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<<col));
 336:keyboards/crkbd/rev1/matrix.c **** }
 337:keyboards/crkbd/rev1/matrix.c **** 
 338:keyboards/crkbd/rev1/matrix.c **** inline
 339:keyboards/crkbd/rev1/matrix.c **** matrix_row_t matrix_get_row(uint8_t row)
 340:keyboards/crkbd/rev1/matrix.c **** {
 341:keyboards/crkbd/rev1/matrix.c ****     return matrix[row];
 342:keyboards/crkbd/rev1/matrix.c **** }
 343:keyboards/crkbd/rev1/matrix.c **** 
 344:keyboards/crkbd/rev1/matrix.c **** void matrix_print(void)
 345:keyboards/crkbd/rev1/matrix.c **** {
 346:keyboards/crkbd/rev1/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 347:keyboards/crkbd/rev1/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 348:keyboards/crkbd/rev1/matrix.c ****         phex(row); print(": ");
 349:keyboards/crkbd/rev1/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 350:keyboards/crkbd/rev1/matrix.c ****         print("\n");
 351:keyboards/crkbd/rev1/matrix.c ****     }
 352:keyboards/crkbd/rev1/matrix.c **** }
 353:keyboards/crkbd/rev1/matrix.c **** 
 354:keyboards/crkbd/rev1/matrix.c **** uint8_t matrix_key_count(void)
 355:keyboards/crkbd/rev1/matrix.c **** {
 356:keyboards/crkbd/rev1/matrix.c ****     uint8_t count = 0;
 357:keyboards/crkbd/rev1/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 358:keyboards/crkbd/rev1/matrix.c ****         count += bitpop16(matrix[i]);
 359:keyboards/crkbd/rev1/matrix.c ****     }
 360:keyboards/crkbd/rev1/matrix.c ****     return count;
 361:keyboards/crkbd/rev1/matrix.c **** }
 362:keyboards/crkbd/rev1/matrix.c **** 
 363:keyboards/crkbd/rev1/matrix.c **** static void  init_cols(void)
 364:keyboards/crkbd/rev1/matrix.c **** {
 365:keyboards/crkbd/rev1/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {
 366:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 367:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 368:keyboards/crkbd/rev1/matrix.c ****     }
 369:keyboards/crkbd/rev1/matrix.c **** }
 370:keyboards/crkbd/rev1/matrix.c **** 
 371:keyboards/crkbd/rev1/matrix.c **** static matrix_row_t read_cols(void)
 372:keyboards/crkbd/rev1/matrix.c **** {
 373:keyboards/crkbd/rev1/matrix.c ****     matrix_row_t result = 0;
 374:keyboards/crkbd/rev1/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {
 375:keyboards/crkbd/rev1/matrix.c ****         result |= (_SFR_IO8(col_pins[x] >> 4) & _BV(col_pins[x] & 0xF)) ? 0 : (1 << x);
 376:keyboards/crkbd/rev1/matrix.c ****     }
 377:keyboards/crkbd/rev1/matrix.c ****     return result;
 378:keyboards/crkbd/rev1/matrix.c **** }
 379:keyboards/crkbd/rev1/matrix.c **** 
 380:keyboards/crkbd/rev1/matrix.c **** static void unselect_rows(void)
 381:keyboards/crkbd/rev1/matrix.c **** {
  15               		.loc 1 381 1 view -0
  16               		.cfi_startproc
  17 0000 CF93      		push r28
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 28, -2
  21 0002 DF93      		push r29
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 29, -3
  25               	/* prologue: function */
  26               	/* frame size = 0 */
  27               	/* stack size = 2 */
  28               	.L__stack_usage = 2
 382:keyboards/crkbd/rev1/matrix.c ****     for(int x = 0; x < ROWS_PER_HAND; x++) {
  29               		.loc 1 382 5 view .LVU1
  30               	.LBB9:
  31               		.loc 1 382 9 view .LVU2
  32               	.LVL0:
  33               		.loc 1 382 9 is_stmt 0 view .LVU3
  34 0004 A0E0      		ldi r26,lo8(row_pins)
  35 0006 B0E0      		ldi r27,hi8(row_pins)
  36 0008 40E0      		ldi r20,lo8(row_pins+4)
  37 000a 50E0      		ldi r21,hi8(row_pins+4)
 383:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((row_pins[x] >> 4) + 1) &=  ~_BV(row_pins[x] & 0xF);
  38               		.loc 1 383 47 view .LVU4
  39 000c C1E0      		ldi r28,lo8(1)
  40 000e D0E0      		ldi r29,0
  41               	.LVL1:
  42               	.L2:
  43               		.loc 1 383 9 is_stmt 1 discriminator 3 view .LVU5
  44 0010 8D91      		ld r24,X+
  45               	.LVL2:
  46               		.loc 1 383 9 is_stmt 0 discriminator 3 view .LVU6
  47 0012 E82F      		mov r30,r24
  48 0014 E295      		swap r30
  49 0016 EF70      		andi r30,lo8(15)
  50 0018 F0E0      		ldi r31,0
  51               		.loc 1 383 42 discriminator 3 view .LVU7
  52 001a 61A1      		ldd r22,Z+33
  53               		.loc 1 383 47 discriminator 3 view .LVU8
  54 001c 8F70      		andi r24,lo8(15)
  55 001e 9E01      		movw r18,r28
  56 0020 00C0      		rjmp 2f
  57               		1:
  58 0022 220F      		lsl r18
  59               		2:
  60 0024 8A95      		dec r24
  61 0026 02F4      		brpl 1b
  62               		.loc 1 383 42 discriminator 3 view .LVU9
  63 0028 922F      		mov r25,r18
  64 002a 9095      		com r25
  65 002c 9623      		and r25,r22
  66 002e 91A3      		std Z+33,r25
 384:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((row_pins[x] >> 4) + 2) |= _BV(row_pins[x] & 0xF);
  67               		.loc 1 384 9 is_stmt 1 discriminator 3 view .LVU10
  68               		.loc 1 384 42 is_stmt 0 discriminator 3 view .LVU11
  69 0030 82A1      		ldd r24,Z+34
  70 0032 822B      		or r24,r18
  71 0034 82A3      		std Z+34,r24
  72               	.LVL3:
 382:keyboards/crkbd/rev1/matrix.c ****     for(int x = 0; x < ROWS_PER_HAND; x++) {
  73               		.loc 1 382 5 discriminator 3 view .LVU12
  74 0036 4A17      		cp r20,r26
  75 0038 5B07      		cpc r21,r27
  76 003a 01F4      		brne .L2
  77               	/* epilogue start */
  78               	.LBE9:
 385:keyboards/crkbd/rev1/matrix.c ****     }
 386:keyboards/crkbd/rev1/matrix.c **** }
  79               		.loc 1 386 1 view .LVU13
  80 003c DF91      		pop r29
  81 003e CF91      		pop r28
  82 0040 0895      		ret
  83               		.cfi_endproc
  84               	.LFE33:
  86               		.section	.text.matrix_init_user,"ax",@progbits
  87               		.weak	matrix_init_user
  89               	matrix_init_user:
  90               	.LFB11:
  77:keyboards/crkbd/rev1/matrix.c **** }
  91               		.loc 1 77 29 is_stmt 1 view -0
  92               		.cfi_startproc
  93               	/* prologue: function */
  94               	/* frame size = 0 */
  95               	/* stack size = 0 */
  96               	.L__stack_usage = 0
  78:keyboards/crkbd/rev1/matrix.c **** 
  97               		.loc 1 78 1 view .LVU15
  98               	/* epilogue start */
  99 0000 0895      		ret
 100               		.cfi_endproc
 101               	.LFE11:
 103               		.set	matrix_init_user.localalias.0,matrix_init_user
 104               		.section	.text.matrix_init_kb,"ax",@progbits
 105               		.weak	matrix_init_kb
 107               	matrix_init_kb:
 108               	.LFB9:
  67:keyboards/crkbd/rev1/matrix.c ****     matrix_init_user();
 109               		.loc 1 67 27 view -0
 110               		.cfi_startproc
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
  68:keyboards/crkbd/rev1/matrix.c **** }
 115               		.loc 1 68 5 view .LVU17
 116 0000 0C94 0000 		jmp matrix_init_user
 117               	.LVL4:
 118               		.cfi_endproc
 119               	.LFE9:
 121               		.section	.text.matrix_scan_user,"ax",@progbits
 122               		.weak	matrix_scan_user
 124               	matrix_scan_user:
 125               	.LFB36:
 126               		.cfi_startproc
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 0 */
 130               	.L__stack_usage = 0
 131               	/* epilogue start */
 132 0000 0895      		ret
 133               		.cfi_endproc
 134               	.LFE36:
 136               		.section	.text.matrix_scan_kb,"ax",@progbits
 137               		.weak	matrix_scan_kb
 139               	matrix_scan_kb:
 140               	.LFB10:
  72:keyboards/crkbd/rev1/matrix.c ****     matrix_scan_user();
 141               		.loc 1 72 27 view -0
 142               		.cfi_startproc
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 145               	/* stack size = 0 */
 146               	.L__stack_usage = 0
  73:keyboards/crkbd/rev1/matrix.c **** }
 147               		.loc 1 73 5 view .LVU19
 148 0000 0C94 0000 		jmp matrix_scan_user
 149               	.LVL5:
 150               		.cfi_endproc
 151               	.LFE10:
 153               		.section	.text.matrix_rows,"ax",@progbits
 154               	.global	matrix_rows
 156               	matrix_rows:
 157               	.LFB13:
  86:keyboards/crkbd/rev1/matrix.c ****     return MATRIX_ROWS;
 158               		.loc 1 86 1 view -0
 159               		.cfi_startproc
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 0 */
 163               	.L__stack_usage = 0
  87:keyboards/crkbd/rev1/matrix.c **** }
 164               		.loc 1 87 5 view .LVU21
  88:keyboards/crkbd/rev1/matrix.c **** 
 165               		.loc 1 88 1 is_stmt 0 view .LVU22
 166 0000 88E0      		ldi r24,lo8(8)
 167               	/* epilogue start */
 168 0002 0895      		ret
 169               		.cfi_endproc
 170               	.LFE13:
 172               		.section	.text.matrix_cols,"ax",@progbits
 173               	.global	matrix_cols
 175               	matrix_cols:
 176               	.LFB14:
  92:keyboards/crkbd/rev1/matrix.c ****     return MATRIX_COLS;
 177               		.loc 1 92 1 is_stmt 1 view -0
 178               		.cfi_startproc
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 0 */
 182               	.L__stack_usage = 0
  93:keyboards/crkbd/rev1/matrix.c **** }
 183               		.loc 1 93 5 view .LVU24
  94:keyboards/crkbd/rev1/matrix.c **** 
 184               		.loc 1 94 1 is_stmt 0 view .LVU25
 185 0000 86E0      		ldi r24,lo8(6)
 186               	/* epilogue start */
 187 0002 0895      		ret
 188               		.cfi_endproc
 189               	.LFE14:
 191               		.section	.text.tx_rx_leds_init,"ax",@progbits
 192               	.global	tx_rx_leds_init
 194               	tx_rx_leds_init:
 195               	.LFB15:
  97:keyboards/crkbd/rev1/matrix.c **** #ifndef NO_DEBUG_LEDS
 196               		.loc 1 97 1 is_stmt 1 view -0
 197               		.cfi_startproc
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 0 */
 201               	.L__stack_usage = 0
  99:keyboards/crkbd/rev1/matrix.c ****     TXLED0;
 202               		.loc 1 99 5 view .LVU27
 203 0000 559A      		sbi 0xa,5
 204 0002 209A      		sbi 0x4,0
 100:keyboards/crkbd/rev1/matrix.c ****     RXLED0;
 205               		.loc 1 100 5 view .LVU28
 206 0004 5D9A      		sbi 0xb,5
 101:keyboards/crkbd/rev1/matrix.c **** #endif
 207               		.loc 1 101 5 view .LVU29
 208 0006 289A      		sbi 0x5,0
 209               	/* epilogue start */
 103:keyboards/crkbd/rev1/matrix.c **** 
 210               		.loc 1 103 1 is_stmt 0 view .LVU30
 211 0008 0895      		ret
 212               		.cfi_endproc
 213               	.LFE15:
 215               		.section	.text.tx_led_on,"ax",@progbits
 216               	.global	tx_led_on
 218               	tx_led_on:
 219               	.LFB16:
 106:keyboards/crkbd/rev1/matrix.c **** #ifndef NO_DEBUG_LEDS
 220               		.loc 1 106 1 is_stmt 1 view -0
 221               		.cfi_startproc
 222               	/* prologue: function */
 223               	/* frame size = 0 */
 224               	/* stack size = 0 */
 225               	.L__stack_usage = 0
 108:keyboards/crkbd/rev1/matrix.c **** #endif
 226               		.loc 1 108 5 view .LVU32
 227 0000 5D98      		cbi 0xb,5
 228               	/* epilogue start */
 110:keyboards/crkbd/rev1/matrix.c **** 
 229               		.loc 1 110 1 is_stmt 0 view .LVU33
 230 0002 0895      		ret
 231               		.cfi_endproc
 232               	.LFE16:
 234               		.section	.text.tx_led_off,"ax",@progbits
 235               	.global	tx_led_off
 237               	tx_led_off:
 238               	.LFB17:
 113:keyboards/crkbd/rev1/matrix.c **** #ifndef NO_DEBUG_LEDS
 239               		.loc 1 113 1 is_stmt 1 view -0
 240               		.cfi_startproc
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
 115:keyboards/crkbd/rev1/matrix.c **** #endif
 245               		.loc 1 115 5 view .LVU35
 246 0000 5D9A      		sbi 0xb,5
 247               	/* epilogue start */
 117:keyboards/crkbd/rev1/matrix.c **** 
 248               		.loc 1 117 1 is_stmt 0 view .LVU36
 249 0002 0895      		ret
 250               		.cfi_endproc
 251               	.LFE17:
 253               		.section	.text.rx_led_on,"ax",@progbits
 254               	.global	rx_led_on
 256               	rx_led_on:
 257               	.LFB18:
 120:keyboards/crkbd/rev1/matrix.c **** #ifndef NO_DEBUG_LEDS
 258               		.loc 1 120 1 is_stmt 1 view -0
 259               		.cfi_startproc
 260               	/* prologue: function */
 261               	/* frame size = 0 */
 262               	/* stack size = 0 */
 263               	.L__stack_usage = 0
 122:keyboards/crkbd/rev1/matrix.c **** #endif
 264               		.loc 1 122 5 view .LVU38
 265 0000 2898      		cbi 0x5,0
 266               	/* epilogue start */
 124:keyboards/crkbd/rev1/matrix.c **** 
 267               		.loc 1 124 1 is_stmt 0 view .LVU39
 268 0002 0895      		ret
 269               		.cfi_endproc
 270               	.LFE18:
 272               		.section	.text.rx_led_off,"ax",@progbits
 273               	.global	rx_led_off
 275               	rx_led_off:
 276               	.LFB19:
 127:keyboards/crkbd/rev1/matrix.c **** #ifndef NO_DEBUG_LEDS
 277               		.loc 1 127 1 is_stmt 1 view -0
 278               		.cfi_startproc
 279               	/* prologue: function */
 280               	/* frame size = 0 */
 281               	/* stack size = 0 */
 282               	.L__stack_usage = 0
 129:keyboards/crkbd/rev1/matrix.c **** #endif
 283               		.loc 1 129 5 view .LVU41
 284 0000 289A      		sbi 0x5,0
 285               	/* epilogue start */
 131:keyboards/crkbd/rev1/matrix.c **** 
 286               		.loc 1 131 1 is_stmt 0 view .LVU42
 287 0002 0895      		ret
 288               		.cfi_endproc
 289               	.LFE19:
 291               		.section	.text.matrix_init,"ax",@progbits
 292               	.global	matrix_init
 294               	matrix_init:
 295               	.LFB20:
 135:keyboards/crkbd/rev1/matrix.c ****     split_keyboard_setup();
 296               		.loc 1 135 1 is_stmt 1 view -0
 297               		.cfi_startproc
 298               	/* prologue: function */
 299               	/* frame size = 0 */
 300               	/* stack size = 0 */
 301               	.L__stack_usage = 0
 136:keyboards/crkbd/rev1/matrix.c **** 
 302               		.loc 1 136 5 view .LVU44
 303 0000 0E94 0000 		call split_keyboard_setup
 304               	.LVL6:
 139:keyboards/crkbd/rev1/matrix.c ****     init_cols();
 305               		.loc 1 139 5 view .LVU45
 306 0004 0E94 0000 		call unselect_rows
 307               	.LVL7:
 140:keyboards/crkbd/rev1/matrix.c **** 
 308               		.loc 1 140 5 view .LVU46
 309               	.LBB14:
 310               	.LBI14:
 363:keyboards/crkbd/rev1/matrix.c **** {
 311               		.loc 1 363 14 view .LVU47
 312               	.LBE14:
 365:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 313               		.loc 1 365 5 view .LVU48
 314               	.LBB16:
 315               	.LBB15:
 365:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 316               		.loc 1 365 9 view .LVU49
 365:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 317               		.loc 1 365 9 is_stmt 0 view .LVU50
 318 0008 A0E0      		ldi r26,lo8(col_pins)
 319 000a B0E0      		ldi r27,hi8(col_pins)
 366:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 320               		.loc 1 366 47 view .LVU51
 321 000c 61E0      		ldi r22,lo8(1)
 322 000e 70E0      		ldi r23,0
 323               	.LVL8:
 324               	.L16:
 366:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 325               		.loc 1 366 9 is_stmt 1 view .LVU52
 326 0010 8D91      		ld r24,X+
 327               	.LVL9:
 366:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 328               		.loc 1 366 9 is_stmt 0 view .LVU53
 329 0012 E82F      		mov r30,r24
 330 0014 E295      		swap r30
 331 0016 EF70      		andi r30,lo8(15)
 332 0018 F0E0      		ldi r31,0
 366:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 333               		.loc 1 366 42 view .LVU54
 334 001a 41A1      		ldd r20,Z+33
 366:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 335               		.loc 1 366 47 view .LVU55
 336 001c 8F70      		andi r24,lo8(15)
 337 001e 9B01      		movw r18,r22
 338 0020 00C0      		rjmp 2f
 339               		1:
 340 0022 220F      		lsl r18
 341               		2:
 342 0024 8A95      		dec r24
 343 0026 02F4      		brpl 1b
 366:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
 344               		.loc 1 366 42 view .LVU56
 345 0028 922F      		mov r25,r18
 346 002a 9095      		com r25
 347 002c 9423      		and r25,r20
 348 002e 91A3      		std Z+33,r25
 367:keyboards/crkbd/rev1/matrix.c ****     }
 349               		.loc 1 367 9 is_stmt 1 view .LVU57
 367:keyboards/crkbd/rev1/matrix.c ****     }
 350               		.loc 1 367 42 is_stmt 0 view .LVU58
 351 0030 82A1      		ldd r24,Z+34
 352 0032 822B      		or r24,r18
 353 0034 82A3      		std Z+34,r24
 354               	.LVL10:
 365:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 355               		.loc 1 365 5 view .LVU59
 356 0036 80E0      		ldi r24,hi8(col_pins+6)
 357 0038 A030      		cpi r26,lo8(col_pins+6)
 358 003a B807      		cpc r27,r24
 359 003c 01F4      		brne .L16
 360               	.LVL11:
 365:keyboards/crkbd/rev1/matrix.c ****         _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
 361               		.loc 1 365 5 view .LVU60
 362               	.LBE15:
 363               	.LBE16:
 142:keyboards/crkbd/rev1/matrix.c **** 
 364               		.loc 1 142 5 is_stmt 1 view .LVU61
 365 003e 0E94 0000 		call tx_rx_leds_init
 366               	.LVL12:
 145:keyboards/crkbd/rev1/matrix.c ****         matrix[i] = 0;
 367               		.loc 1 145 5 view .LVU62
 368               	.LBB17:
 145:keyboards/crkbd/rev1/matrix.c ****         matrix[i] = 0;
 369               		.loc 1 145 10 view .LVU63
 145:keyboards/crkbd/rev1/matrix.c ****         matrix[i] = 0;
 370               		.loc 1 145 10 is_stmt 0 view .LVU64
 371 0042 E0E0      		ldi r30,lo8(matrix)
 372 0044 F0E0      		ldi r31,hi8(matrix)
 373 0046 A0E0      		ldi r26,lo8(matrix_debouncing)
 374 0048 B0E0      		ldi r27,hi8(matrix_debouncing)
 375               	.LVL13:
 376               	.L17:
 146:keyboards/crkbd/rev1/matrix.c ****         matrix_debouncing[i] = 0;
 377               		.loc 1 146 9 is_stmt 1 discriminator 3 view .LVU65
 146:keyboards/crkbd/rev1/matrix.c ****         matrix_debouncing[i] = 0;
 378               		.loc 1 146 19 is_stmt 0 discriminator 3 view .LVU66
 379 004a 1192      		st Z+,__zero_reg__
 380               	.LVL14:
 147:keyboards/crkbd/rev1/matrix.c ****     }
 381               		.loc 1 147 9 is_stmt 1 discriminator 3 view .LVU67
 147:keyboards/crkbd/rev1/matrix.c ****     }
 382               		.loc 1 147 30 is_stmt 0 discriminator 3 view .LVU68
 383 004c 1D92      		st X+,__zero_reg__
 384               	.LVL15:
 145:keyboards/crkbd/rev1/matrix.c ****         matrix[i] = 0;
 385               		.loc 1 145 5 discriminator 3 view .LVU69
 386 004e 80E0      		ldi r24,hi8(matrix+8)
 387 0050 E030      		cpi r30,lo8(matrix+8)
 388 0052 F807      		cpc r31,r24
 389 0054 01F4      		brne .L17
 390               	.LBE17:
 150:keyboards/crkbd/rev1/matrix.c **** 
 391               		.loc 1 150 5 is_stmt 1 view .LVU70
 150:keyboards/crkbd/rev1/matrix.c **** 
 392               		.loc 1 150 17 is_stmt 0 view .LVU71
 393 0056 0E94 0000 		call has_usb
 394               	.LVL16:
 150:keyboards/crkbd/rev1/matrix.c **** 
 395               		.loc 1 150 15 view .LVU72
 396 005a 8093 0000 		sts is_master,r24
 152:keyboards/crkbd/rev1/matrix.c **** }
 397               		.loc 1 152 5 is_stmt 1 view .LVU73
 398 005e 0C94 0000 		jmp matrix_init_quantum
 399               	.LVL17:
 400               		.cfi_endproc
 401               	.LFE20:
 403               		.section	.text._matrix_scan,"ax",@progbits
 404               	.global	_matrix_scan
 406               	_matrix_scan:
 407               	.LFB21:
 156:keyboards/crkbd/rev1/matrix.c ****     // Right hand is stored after the left in the matirx so, we need to offset it
 408               		.loc 1 156 1 view -0
 409               		.cfi_startproc
 410 0000 9F92      		push r9
 411               	.LCFI2:
 412               		.cfi_def_cfa_offset 3
 413               		.cfi_offset 9, -2
 414 0002 AF92      		push r10
 415               	.LCFI3:
 416               		.cfi_def_cfa_offset 4
 417               		.cfi_offset 10, -3
 418 0004 BF92      		push r11
 419               	.LCFI4:
 420               		.cfi_def_cfa_offset 5
 421               		.cfi_offset 11, -4
 422 0006 CF92      		push r12
 423               	.LCFI5:
 424               		.cfi_def_cfa_offset 6
 425               		.cfi_offset 12, -5
 426 0008 DF92      		push r13
 427               	.LCFI6:
 428               		.cfi_def_cfa_offset 7
 429               		.cfi_offset 13, -6
 430 000a EF92      		push r14
 431               	.LCFI7:
 432               		.cfi_def_cfa_offset 8
 433               		.cfi_offset 14, -7
 434 000c FF92      		push r15
 435               	.LCFI8:
 436               		.cfi_def_cfa_offset 9
 437               		.cfi_offset 15, -8
 438 000e 0F93      		push r16
 439               	.LCFI9:
 440               		.cfi_def_cfa_offset 10
 441               		.cfi_offset 16, -9
 442 0010 1F93      		push r17
 443               	.LCFI10:
 444               		.cfi_def_cfa_offset 11
 445               		.cfi_offset 17, -10
 446 0012 CF93      		push r28
 447               	.LCFI11:
 448               		.cfi_def_cfa_offset 12
 449               		.cfi_offset 28, -11
 450 0014 DF93      		push r29
 451               	.LCFI12:
 452               		.cfi_def_cfa_offset 13
 453               		.cfi_offset 29, -12
 454               	/* prologue: function */
 455               	/* frame size = 0 */
 456               	/* stack size = 11 */
 457               	.L__stack_usage = 11
 158:keyboards/crkbd/rev1/matrix.c **** 
 458               		.loc 1 158 5 view .LVU75
 158:keyboards/crkbd/rev1/matrix.c **** 
 459               		.loc 1 158 29 is_stmt 0 view .LVU76
 460 0016 8091 0000 		lds r24,isLeftHand
 158:keyboards/crkbd/rev1/matrix.c **** 
 461               		.loc 1 158 33 view .LVU77
 462 001a C4E0      		ldi r28,lo8(4)
 463 001c D0E0      		ldi r29,0
 464 001e 8823      		tst r24
 465 0020 01F0      		breq .L21
 466 0022 D0E0      		ldi r29,0
 467 0024 C0E0      		ldi r28,0
 468               	.L21:
 469               	.LVL18:
 160:keyboards/crkbd/rev1/matrix.c ****         select_row(i);
 470               		.loc 1 160 5 is_stmt 1 discriminator 4 view .LVU78
 471               	.LBB30:
 160:keyboards/crkbd/rev1/matrix.c ****         select_row(i);
 472               		.loc 1 160 10 discriminator 4 view .LVU79
 160:keyboards/crkbd/rev1/matrix.c ****         select_row(i);
 473               		.loc 1 160 10 is_stmt 0 discriminator 4 view .LVU80
 474 0026 80E0      		ldi r24,lo8(row_pins)
 475 0028 C82E      		mov r12,r24
 476 002a 80E0      		ldi r24,hi8(row_pins)
 477 002c D82E      		mov r13,r24
 478 002e AE01      		movw r20,r28
 479 0030 4050      		subi r20,lo8(-(matrix_debouncing))
 480 0032 5040      		sbci r21,hi8(-(matrix_debouncing))
 481 0034 7A01      		movw r14,r20
 482               	.LBE30:
 158:keyboards/crkbd/rev1/matrix.c **** 
 483               		.loc 1 158 33 discriminator 4 view .LVU81
 484 0036 8A01      		movw r16,r20
 485               	.LBB45:
 486               	.LBB31:
 487               	.LBB32:
 488               	.LBB33:
 387:keyboards/crkbd/rev1/matrix.c **** 
 388:keyboards/crkbd/rev1/matrix.c **** static void select_row(uint8_t row)
 389:keyboards/crkbd/rev1/matrix.c **** {
 390:keyboards/crkbd/rev1/matrix.c ****     _SFR_IO8((row_pins[row] >> 4) + 1) |=  _BV(row_pins[row] & 0xF);
 489               		.loc 1 390 44 discriminator 4 view .LVU82
 490 0038 AA24      		clr r10
 491 003a A394      		inc r10
 492 003c B12C      		mov r11,__zero_reg__
 493               	.LBE33:
 494               	.LBE32:
 166:keyboards/crkbd/rev1/matrix.c ****         }
 495               		.loc 1 166 24 discriminator 4 view .LVU83
 496 003e 25E0      		ldi r18,lo8(5)
 497 0040 922E      		mov r9,r18
 498               	.LVL19:
 499               	.L25:
 161:keyboards/crkbd/rev1/matrix.c ****         _delay_us(30);  // without this wait read unstable value.
 500               		.loc 1 161 9 is_stmt 1 view .LVU84
 501               	.LBB35:
 502               	.LBI32:
 388:keyboards/crkbd/rev1/matrix.c **** {
 503               		.loc 1 388 13 view .LVU85
 504               	.LBB34:
 505               		.loc 1 390 5 view .LVU86
 506 0042 F601      		movw r30,r12
 507 0044 8191      		ld r24,Z+
 508 0046 6F01      		movw r12,r30
 509               	.LVL20:
 510               		.loc 1 390 5 is_stmt 0 view .LVU87
 511 0048 E82F      		mov r30,r24
 512 004a E295      		swap r30
 513 004c EF70      		andi r30,lo8(15)
 514 004e F0E0      		ldi r31,0
 515               		.loc 1 390 40 view .LVU88
 516 0050 21A1      		ldd r18,Z+33
 517               		.loc 1 390 44 view .LVU89
 518 0052 8F70      		andi r24,lo8(15)
 519 0054 A501      		movw r20,r10
 520 0056 00C0      		rjmp 2f
 521               		1:
 522 0058 440F      		lsl r20
 523 005a 551F      		rol r21
 524               		2:
 525 005c 8A95      		dec r24
 526 005e 02F4      		brpl 1b
 527 0060 CA01      		movw r24,r20
 528               		.loc 1 390 40 view .LVU90
 529 0062 922F      		mov r25,r18
 530 0064 982B      		or r25,r24
 531 0066 91A3      		std Z+33,r25
 391:keyboards/crkbd/rev1/matrix.c ****     _SFR_IO8((row_pins[row] >> 4) + 2) &= ~_BV(row_pins[row] & 0xF);
 532               		.loc 1 391 5 is_stmt 1 view .LVU91
 533               		.loc 1 391 40 is_stmt 0 view .LVU92
 534 0068 92A1      		ldd r25,Z+34
 535 006a 8095      		com r24
 536 006c 8923      		and r24,r25
 537 006e 82A3      		std Z+34,r24
 538               	.LVL21:
 539               		.loc 1 391 40 view .LVU93
 540               	.LBE34:
 541               	.LBE35:
 162:keyboards/crkbd/rev1/matrix.c ****         matrix_row_t cols = read_cols();
 542               		.loc 1 162 9 is_stmt 1 view .LVU94
 543               	.LBB36:
 544               	.LBI36:
 545               		.file 2 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
   1:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 546               		.loc 2 255 1 view .LVU95
 547               	.LBB37:
 256:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 548               		.loc 2 257 2 view .LVU96
 258:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 549               		.loc 2 261 2 view .LVU97
 262:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 550               		.loc 2 262 2 view .LVU98
 263:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 551               		.loc 2 263 2 view .LVU99
 264:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 552               		.loc 2 273 3 view .LVU100
 274:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 553               		.loc 2 276 2 view .LVU101
 554 0070 50EA      		ldi r21,lo8(-96)
 555 0072 5A95      	1:	dec r21
 556 0074 01F4      		brne 1b
 557               	.LVL22:
 558               		.loc 2 276 2 is_stmt 0 view .LVU102
 559               	.LBE37:
 560               	.LBE36:
 163:keyboards/crkbd/rev1/matrix.c ****         if (matrix_debouncing[i+offset] != cols) {
 561               		.loc 1 163 9 is_stmt 1 view .LVU103
 562               	.LBB38:
 563               	.LBI38:
 371:keyboards/crkbd/rev1/matrix.c **** {
 564               		.loc 1 371 21 view .LVU104
 371:keyboards/crkbd/rev1/matrix.c **** {
 565               		.loc 1 371 21 is_stmt 0 view .LVU105
 566 0076 E0E0      		ldi r30,lo8(col_pins)
 567 0078 F0E0      		ldi r31,hi8(col_pins)
 568               	.LBB39:
 373:keyboards/crkbd/rev1/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {
 569               		.loc 1 373 18 view .LVU106
 570 007a 20E0      		ldi r18,0
 571               	.LBB40:
 374:keyboards/crkbd/rev1/matrix.c ****         result |= (_SFR_IO8(col_pins[x] >> 4) & _BV(col_pins[x] & 0xF)) ? 0 : (1 << x);
 572               		.loc 1 374 13 view .LVU107
 573 007c 50E0      		ldi r21,0
 574 007e 40E0      		ldi r20,0
 575               	.LVL23:
 576               	.L23:
 375:keyboards/crkbd/rev1/matrix.c ****     }
 577               		.loc 1 375 9 is_stmt 1 view .LVU108
 375:keyboards/crkbd/rev1/matrix.c ****     }
 578               		.loc 1 375 20 is_stmt 0 view .LVU109
 579 0080 3191      		ld r19,Z+
 580 0082 A32F      		mov r26,r19
 581 0084 A295      		swap r26
 582 0086 AF70      		andi r26,lo8(15)
 583 0088 B0E0      		ldi r27,0
 584 008a 9096      		adiw r26,32
 585 008c 8C91      		ld r24,X
 586 008e 90E0      		ldi r25,0
 375:keyboards/crkbd/rev1/matrix.c ****     }
 587               		.loc 1 375 49 view .LVU110
 588 0090 3F70      		andi r19,lo8(15)
 375:keyboards/crkbd/rev1/matrix.c ****     }
 589               		.loc 1 375 73 view .LVU111
 590 0092 00C0      		rjmp 2f
 591               		1:
 592 0094 9595      		asr r25
 593 0096 8795      		ror r24
 594               		2:
 595 0098 3A95      		dec r19
 596 009a 02F4      		brpl 1b
 375:keyboards/crkbd/rev1/matrix.c ****     }
 597               		.loc 1 375 77 view .LVU112
 598 009c 80FD      		sbrc r24,0
 599 009e 00C0      		rjmp .L31
 600 00a0 C501      		movw r24,r10
 601 00a2 042E      		mov r0,r20
 602 00a4 00C0      		rjmp 2f
 603               		1:
 604 00a6 880F      		lsl r24
 605               		2:
 606 00a8 0A94      		dec r0
 607 00aa 02F4      		brpl 1b
 608               	.L22:
 375:keyboards/crkbd/rev1/matrix.c ****     }
 609               		.loc 1 375 16 view .LVU113
 610 00ac 282B      		or r18,r24
 611               	.LVL24:
 374:keyboards/crkbd/rev1/matrix.c ****         result |= (_SFR_IO8(col_pins[x] >> 4) & _BV(col_pins[x] & 0xF)) ? 0 : (1 << x);
 612               		.loc 1 374 38 view .LVU114
 613 00ae 4F5F      		subi r20,-1
 614 00b0 5F4F      		sbci r21,-1
 615               	.LVL25:
 374:keyboards/crkbd/rev1/matrix.c ****         result |= (_SFR_IO8(col_pins[x] >> 4) & _BV(col_pins[x] & 0xF)) ? 0 : (1 << x);
 616               		.loc 1 374 5 view .LVU115
 617 00b2 4630      		cpi r20,6
 618 00b4 5105      		cpc r21,__zero_reg__
 619 00b6 01F4      		brne .L23
 620               	.LBE40:
 377:keyboards/crkbd/rev1/matrix.c **** }
 621               		.loc 1 377 5 is_stmt 1 view .LVU116
 622               	.LVL26:
 377:keyboards/crkbd/rev1/matrix.c **** }
 623               		.loc 1 377 5 is_stmt 0 view .LVU117
 624               	.LBE39:
 625               	.LBE38:
 164:keyboards/crkbd/rev1/matrix.c ****             matrix_debouncing[i+offset] = cols;
 626               		.loc 1 164 9 is_stmt 1 view .LVU118
 164:keyboards/crkbd/rev1/matrix.c ****             matrix_debouncing[i+offset] = cols;
 627               		.loc 1 164 12 is_stmt 0 view .LVU119
 628 00b8 F801      		movw r30,r16
 629 00ba 8081      		ld r24,Z
 630 00bc 8217      		cp r24,r18
 631 00be 01F0      		breq .L24
 165:keyboards/crkbd/rev1/matrix.c ****             debouncing = DEBOUNCE;
 632               		.loc 1 165 13 is_stmt 1 view .LVU120
 165:keyboards/crkbd/rev1/matrix.c ****             debouncing = DEBOUNCE;
 633               		.loc 1 165 41 is_stmt 0 view .LVU121
 634 00c0 2083      		st Z,r18
 166:keyboards/crkbd/rev1/matrix.c ****         }
 635               		.loc 1 166 13 is_stmt 1 view .LVU122
 166:keyboards/crkbd/rev1/matrix.c ****         }
 636               		.loc 1 166 24 is_stmt 0 view .LVU123
 637 00c2 9092 0000 		sts debouncing,r9
 638               	.L24:
 168:keyboards/crkbd/rev1/matrix.c ****     }
 639               		.loc 1 168 9 is_stmt 1 discriminator 2 view .LVU124
 640 00c6 0E94 0000 		call unselect_rows
 641               	.LVL27:
 168:keyboards/crkbd/rev1/matrix.c ****     }
 642               		.loc 1 168 9 is_stmt 0 discriminator 2 view .LVU125
 643 00ca 0F5F      		subi r16,-1
 644 00cc 1F4F      		sbci r17,-1
 645               	.LBE31:
 160:keyboards/crkbd/rev1/matrix.c ****         select_row(i);
 646               		.loc 1 160 5 discriminator 2 view .LVU126
 647 00ce F0E0      		ldi r31,lo8(row_pins+4)
 648 00d0 CF16      		cp r12,r31
 649 00d2 F0E0      		ldi r31,hi8(row_pins+4)
 650 00d4 DF06      		cpc r13,r31
 651 00d6 01F0      		breq .+2
 652 00d8 00C0      		rjmp .L25
 653               	.LBE45:
 171:keyboards/crkbd/rev1/matrix.c ****         if (--debouncing) {
 654               		.loc 1 171 5 is_stmt 1 view .LVU127
 171:keyboards/crkbd/rev1/matrix.c ****         if (--debouncing) {
 655               		.loc 1 171 9 is_stmt 0 view .LVU128
 656 00da 8091 0000 		lds r24,debouncing
 171:keyboards/crkbd/rev1/matrix.c ****         if (--debouncing) {
 657               		.loc 1 171 8 view .LVU129
 658 00de 8823      		tst r24
 659 00e0 01F0      		breq .L28
 172:keyboards/crkbd/rev1/matrix.c ****             _delay_ms(1);
 660               		.loc 1 172 9 is_stmt 1 view .LVU130
 172:keyboards/crkbd/rev1/matrix.c ****             _delay_ms(1);
 661               		.loc 1 172 13 is_stmt 0 view .LVU131
 662 00e2 8150      		subi r24,lo8(-(-1))
 172:keyboards/crkbd/rev1/matrix.c ****             _delay_ms(1);
 663               		.loc 1 172 12 view .LVU132
 664 00e4 8093 0000 		sts debouncing,r24
 665 00e8 8823      		tst r24
 666 00ea 01F0      		breq .L27
 173:keyboards/crkbd/rev1/matrix.c ****         } else {
 667               		.loc 1 173 13 is_stmt 1 view .LVU133
 668               	.LVL28:
 669               	.LBB46:
 670               	.LBI46:
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 671               		.loc 2 166 1 view .LVU134
 672               	.LBB47:
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 673               		.loc 2 168 2 view .LVU135
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 674               		.loc 2 172 2 view .LVU136
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 675               		.loc 2 173 2 view .LVU137
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 676               		.loc 2 174 2 view .LVU138
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 677               		.loc 2 184 3 view .LVU139
 187:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 678               		.loc 2 187 2 view .LVU140
 679 00ec 8FE9      		ldi r24,lo8(3999)
 680 00ee 9FE0      		ldi r25,hi8(3999)
 681 00f0 0197      	1:	sbiw r24,1
 682 00f2 01F4      		brne 1b
 683 00f4 00C0      		rjmp .
 684 00f6 0000      		nop
 685               	.LVL29:
 686               	.L28:
 187:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 687               		.loc 2 187 2 is_stmt 0 view .LVU141
 688               	.LBE47:
 689               	.LBE46:
 181:keyboards/crkbd/rev1/matrix.c **** }
 690               		.loc 1 181 5 is_stmt 1 view .LVU142
 182:keyboards/crkbd/rev1/matrix.c **** 
 691               		.loc 1 182 1 is_stmt 0 view .LVU143
 692 00f8 81E0      		ldi r24,lo8(1)
 693               	/* epilogue start */
 694 00fa DF91      		pop r29
 695 00fc CF91      		pop r28
 696 00fe 1F91      		pop r17
 697 0100 0F91      		pop r16
 698 0102 FF90      		pop r15
 699 0104 EF90      		pop r14
 700 0106 DF90      		pop r13
 701 0108 CF90      		pop r12
 702               	.LVL30:
 182:keyboards/crkbd/rev1/matrix.c **** 
 703               		.loc 1 182 1 view .LVU144
 704 010a BF90      		pop r11
 705 010c AF90      		pop r10
 706 010e 9F90      		pop r9
 707 0110 0895      		ret
 708               	.LVL31:
 709               	.L31:
 710               	.LBB48:
 711               	.LBB44:
 712               	.LBB43:
 713               	.LBB42:
 714               	.LBB41:
 375:keyboards/crkbd/rev1/matrix.c ****     }
 715               		.loc 1 375 77 view .LVU145
 716 0112 80E0      		ldi r24,0
 717 0114 00C0      		rjmp .L22
 718               	.LVL32:
 719               	.L27:
 375:keyboards/crkbd/rev1/matrix.c ****     }
 720               		.loc 1 375 77 view .LVU146
 721 0116 C050      		subi r28,lo8(-(matrix))
 722 0118 D040      		sbci r29,hi8(-(matrix))
 723               	.LVL33:
 724               	.L29:
 375:keyboards/crkbd/rev1/matrix.c ****     }
 725               		.loc 1 375 77 view .LVU147
 726               	.LBE41:
 727               	.LBE42:
 728               	.LBE43:
 729               	.LBE44:
 730               	.LBE48:
 731               	.LBB49:
 176:keyboards/crkbd/rev1/matrix.c ****             }
 732               		.loc 1 176 17 is_stmt 1 discriminator 3 view .LVU148
 176:keyboards/crkbd/rev1/matrix.c ****             }
 733               		.loc 1 176 53 is_stmt 0 discriminator 3 view .LVU149
 734 011a F701      		movw r30,r14
 735 011c 9191      		ld r25,Z+
 736 011e 7F01      		movw r14,r30
 176:keyboards/crkbd/rev1/matrix.c ****             }
 737               		.loc 1 176 34 discriminator 3 view .LVU150
 738 0120 9993      		st Y+,r25
 175:keyboards/crkbd/rev1/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 739               		.loc 1 175 53 discriminator 3 view .LVU151
 740 0122 8F5F      		subi r24,lo8(-(1))
 741               	.LVL34:
 175:keyboards/crkbd/rev1/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 742               		.loc 1 175 13 discriminator 3 view .LVU152
 743 0124 8430      		cpi r24,lo8(4)
 744 0126 01F4      		brne .L29
 745 0128 00C0      		rjmp .L28
 746               	.LBE49:
 747               		.cfi_endproc
 748               	.LFE21:
 750               		.section	.text.serial_transaction,"ax",@progbits
 751               	.global	serial_transaction
 753               	serial_transaction:
 754               	.LVL35:
 755               	.LFB22:
 219:keyboards/crkbd/rev1/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 756               		.loc 1 219 44 is_stmt 1 view -0
 757               		.cfi_startproc
 219:keyboards/crkbd/rev1/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 758               		.loc 1 219 44 is_stmt 0 view .LVU154
 759 0000 0F93      		push r16
 760               	.LCFI13:
 761               		.cfi_def_cfa_offset 3
 762               		.cfi_offset 16, -2
 763 0002 1F93      		push r17
 764               	.LCFI14:
 765               		.cfi_def_cfa_offset 4
 766               		.cfi_offset 17, -3
 767 0004 CF93      		push r28
 768               	.LCFI15:
 769               		.cfi_def_cfa_offset 5
 770               		.cfi_offset 28, -4
 771 0006 DF93      		push r29
 772               	.LCFI16:
 773               		.cfi_def_cfa_offset 6
 774               		.cfi_offset 29, -5
 775               	/* prologue: function */
 776               	/* frame size = 0 */
 777               	/* stack size = 4 */
 778               	.L__stack_usage = 4
 220:keyboards/crkbd/rev1/matrix.c **** #ifdef SERIAL_USE_MULTI_TRANSACTION
 779               		.loc 1 220 5 is_stmt 1 view .LVU155
 220:keyboards/crkbd/rev1/matrix.c **** #ifdef SERIAL_USE_MULTI_TRANSACTION
 780               		.loc 1 220 36 is_stmt 0 view .LVU156
 781 0008 2091 0000 		lds r18,isLeftHand
 220:keyboards/crkbd/rev1/matrix.c **** #ifdef SERIAL_USE_MULTI_TRANSACTION
 782               		.loc 1 220 54 view .LVU157
 783 000c 10E0      		ldi r17,0
 784 000e 00E0      		ldi r16,0
 785 0010 2223      		tst r18
 786 0012 01F0      		breq .L39
 787 0014 04E0      		ldi r16,lo8(4)
 788 0016 10E0      		ldi r17,0
 789               	.L39:
 790               	.LVL36:
 222:keyboards/crkbd/rev1/matrix.c **** #else
 791               		.loc 1 222 5 is_stmt 1 discriminator 4 view .LVU158
 222:keyboards/crkbd/rev1/matrix.c **** #else
 792               		.loc 1 222 13 is_stmt 0 discriminator 4 view .LVU159
 793 0018 0E94 0000 		call serial_update_buffers
 794               	.LVL37:
 222:keyboards/crkbd/rev1/matrix.c **** #else
 795               		.loc 1 222 13 discriminator 4 view .LVU160
 796 001c EC01      		movw r28,r24
 797               	.LVL38:
 226:keyboards/crkbd/rev1/matrix.c ****         if(ret==2) rx_led_on();
 798               		.loc 1 226 5 is_stmt 1 discriminator 4 view .LVU161
 226:keyboards/crkbd/rev1/matrix.c ****         if(ret==2) rx_led_on();
 799               		.loc 1 226 8 is_stmt 0 discriminator 4 view .LVU162
 800 001e 0097      		sbiw r24,0
 801 0020 01F0      		breq .L40
 227:keyboards/crkbd/rev1/matrix.c ****         return 1;
 802               		.loc 1 227 9 is_stmt 1 view .LVU163
 227:keyboards/crkbd/rev1/matrix.c ****         return 1;
 803               		.loc 1 227 11 is_stmt 0 view .LVU164
 804 0022 0297      		sbiw r24,2
 805 0024 01F4      		brne .L43
 227:keyboards/crkbd/rev1/matrix.c ****         return 1;
 806               		.loc 1 227 20 is_stmt 1 discriminator 1 view .LVU165
 807 0026 0E94 0000 		call rx_led_on
 808               	.LVL39:
 809               	.L43:
 228:keyboards/crkbd/rev1/matrix.c ****     }
 810               		.loc 1 228 16 is_stmt 0 view .LVU166
 811 002a C1E0      		ldi r28,lo8(1)
 812 002c D0E0      		ldi r29,0
 813               	.LVL40:
 228:keyboards/crkbd/rev1/matrix.c ****     }
 814               		.loc 1 228 16 view .LVU167
 815 002e 00C0      		rjmp .L38
 816               	.LVL41:
 817               	.L40:
 230:keyboards/crkbd/rev1/matrix.c ****     memcpy(&matrix[slaveOffset],
 818               		.loc 1 230 5 is_stmt 1 view .LVU168
 819 0030 0E94 0000 		call rx_led_off
 820               	.LVL42:
 231:keyboards/crkbd/rev1/matrix.c ****         (void *)serial_slave_buffer, SERIAL_SLAVE_BUFFER_LENGTH);
 821               		.loc 1 231 5 view .LVU169
 231:keyboards/crkbd/rev1/matrix.c ****         (void *)serial_slave_buffer, SERIAL_SLAVE_BUFFER_LENGTH);
 822               		.loc 1 231 12 is_stmt 0 view .LVU170
 823 0034 F801      		movw r30,r16
 824 0036 E050      		subi r30,lo8(-(matrix))
 825 0038 F040      		sbci r31,hi8(-(matrix))
 231:keyboards/crkbd/rev1/matrix.c ****         (void *)serial_slave_buffer, SERIAL_SLAVE_BUFFER_LENGTH);
 826               		.loc 1 231 5 view .LVU171
 827 003a 8091 0000 		lds r24,serial_slave_buffer
 828 003e 9091 0000 		lds r25,serial_slave_buffer+1
 829 0042 A091 0000 		lds r26,serial_slave_buffer+2
 830 0046 B091 0000 		lds r27,serial_slave_buffer+3
 831 004a 8083      		st Z,r24
 832 004c 9183      		std Z+1,r25
 833 004e A283      		std Z+2,r26
 834 0050 B383      		std Z+3,r27
 233:keyboards/crkbd/rev1/matrix.c **** }
 835               		.loc 1 233 5 is_stmt 1 view .LVU172
 836               	.LVL43:
 837               	.L38:
 234:keyboards/crkbd/rev1/matrix.c **** #endif
 838               		.loc 1 234 1 is_stmt 0 view .LVU173
 839 0052 CE01      		movw r24,r28
 840               	/* epilogue start */
 841 0054 DF91      		pop r29
 842 0056 CF91      		pop r28
 843 0058 1F91      		pop r17
 844 005a 0F91      		pop r16
 845               	.LVL44:
 234:keyboards/crkbd/rev1/matrix.c **** #endif
 846               		.loc 1 234 1 view .LVU174
 847 005c 0895      		ret
 848               		.cfi_endproc
 849               	.LFE22:
 851               		.section	.text.matrix_slave_scan,"ax",@progbits
 852               	.global	matrix_slave_scan
 854               	matrix_slave_scan:
 855               	.LFB25:
 299:keyboards/crkbd/rev1/matrix.c ****     _matrix_scan();
 856               		.loc 1 299 30 is_stmt 1 view -0
 857               		.cfi_startproc
 858               	/* prologue: function */
 859               	/* frame size = 0 */
 860               	/* stack size = 0 */
 861               	.L__stack_usage = 0
 300:keyboards/crkbd/rev1/matrix.c **** 
 862               		.loc 1 300 5 view .LVU176
 863 0000 0E94 0000 		call _matrix_scan
 864               	.LVL45:
 302:keyboards/crkbd/rev1/matrix.c **** 
 865               		.loc 1 302 5 view .LVU177
 302:keyboards/crkbd/rev1/matrix.c **** 
 866               		.loc 1 302 31 is_stmt 0 view .LVU178
 867 0004 8091 0000 		lds r24,isLeftHand
 302:keyboards/crkbd/rev1/matrix.c **** 
 868               		.loc 1 302 35 view .LVU179
 869 0008 E4E0      		ldi r30,lo8(4)
 870 000a F0E0      		ldi r31,0
 871 000c 8823      		tst r24
 872 000e 01F0      		breq .L45
 873 0010 F0E0      		ldi r31,0
 874 0012 E0E0      		ldi r30,0
 875               	.L45:
 876               	.LVL46:
 311:keyboards/crkbd/rev1/matrix.c ****   #endif
 877               		.loc 1 311 5 is_stmt 1 discriminator 4 view .LVU180
 313:keyboards/crkbd/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 878               		.loc 1 313 5 discriminator 4 view .LVU181
 879               	.LBB50:
 313:keyboards/crkbd/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 880               		.loc 1 313 10 discriminator 4 view .LVU182
 313:keyboards/crkbd/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 881               		.loc 1 313 10 is_stmt 0 discriminator 4 view .LVU183
 882 0014 E050      		subi r30,lo8(-(matrix))
 883 0016 F040      		sbci r31,hi8(-(matrix))
 884               	.LVL47:
 313:keyboards/crkbd/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 885               		.loc 1 313 14 discriminator 4 view .LVU184
 886 0018 90E0      		ldi r25,0
 887 001a 80E0      		ldi r24,0
 888               	.LBE50:
 311:keyboards/crkbd/rev1/matrix.c ****   #endif
 889               		.loc 1 311 9 discriminator 4 view .LVU185
 890 001c 20E0      		ldi r18,0
 891               	.LVL48:
 892               	.L47:
 893               	.LBB51:
 315:keyboards/crkbd/rev1/matrix.c **** 	    change = 1;
 894               		.loc 1 315 9 is_stmt 1 view .LVU186
 315:keyboards/crkbd/rev1/matrix.c **** 	    change = 1;
 895               		.loc 1 315 32 is_stmt 0 view .LVU187
 896 001e DC01      		movw r26,r24
 897 0020 A050      		subi r26,lo8(-(serial_slave_buffer))
 898 0022 B040      		sbci r27,hi8(-(serial_slave_buffer))
 899 0024 4C91      		ld r20,X
 315:keyboards/crkbd/rev1/matrix.c **** 	    change = 1;
 900               		.loc 1 315 45 view .LVU188
 901 0026 3191      		ld r19,Z+
 315:keyboards/crkbd/rev1/matrix.c **** 	    change = 1;
 902               		.loc 1 315 11 view .LVU189
 903 0028 4313      		cpse r20,r19
 316:keyboards/crkbd/rev1/matrix.c ****   #endif
 904               		.loc 1 316 13 view .LVU190
 905 002a 21E0      		ldi r18,lo8(1)
 906               	.LVL49:
 907               	.L46:
 318:keyboards/crkbd/rev1/matrix.c ****     }
 908               		.loc 1 318 9 is_stmt 1 discriminator 2 view .LVU191
 318:keyboards/crkbd/rev1/matrix.c ****     }
 909               		.loc 1 318 32 is_stmt 0 discriminator 2 view .LVU192
 910 002c 3C93      		st X,r19
 313:keyboards/crkbd/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 911               		.loc 1 313 40 discriminator 2 view .LVU193
 912 002e 0196      		adiw r24,1
 913               	.LVL50:
 313:keyboards/crkbd/rev1/matrix.c ****   #ifdef SERIAL_USE_MULTI_TRANSACTION
 914               		.loc 1 313 5 discriminator 2 view .LVU194
 915 0030 8430      		cpi r24,4
 916 0032 9105      		cpc r25,__zero_reg__
 917 0034 01F4      		brne .L47
 918               	.LBE51:
 321:keyboards/crkbd/rev1/matrix.c ****   #endif
 919               		.loc 1 321 5 is_stmt 1 view .LVU195
 321:keyboards/crkbd/rev1/matrix.c ****   #endif
 920               		.loc 1 321 31 is_stmt 0 view .LVU196
 921 0036 8091 0000 		lds r24,slave_buffer_change_count
 922               	.LVL51:
 321:keyboards/crkbd/rev1/matrix.c ****   #endif
 923               		.loc 1 321 31 view .LVU197
 924 003a 820F      		add r24,r18
 925 003c 8093 0000 		sts slave_buffer_change_count,r24
 926               	/* epilogue start */
 324:keyboards/crkbd/rev1/matrix.c **** 
 927               		.loc 1 324 1 view .LVU198
 928 0040 0895      		ret
 929               		.cfi_endproc
 930               	.LFE25:
 932               		.section	.text.matrix_scan,"ax",@progbits
 933               	.global	matrix_scan
 935               	matrix_scan:
 936               	.LFB23:
 238:keyboards/crkbd/rev1/matrix.c ****     if (is_master) {
 937               		.loc 1 238 1 is_stmt 1 view -0
 938               		.cfi_startproc
 939 0000 CF93      		push r28
 940               	.LCFI17:
 941               		.cfi_def_cfa_offset 3
 942               		.cfi_offset 28, -2
 943 0002 DF93      		push r29
 944               	.LCFI18:
 945               		.cfi_def_cfa_offset 4
 946               		.cfi_offset 29, -3
 947               	/* prologue: function */
 948               	/* frame size = 0 */
 949               	/* stack size = 2 */
 950               	.L__stack_usage = 2
 239:keyboards/crkbd/rev1/matrix.c ****         matrix_master_scan();
 951               		.loc 1 239 5 view .LVU200
 239:keyboards/crkbd/rev1/matrix.c ****         matrix_master_scan();
 952               		.loc 1 239 8 is_stmt 0 view .LVU201
 953 0004 8091 0000 		lds r24,is_master
 954 0008 8823      		tst r24
 955 000a 01F4      		brne .+2
 956 000c 00C0      		rjmp .L51
 240:keyboards/crkbd/rev1/matrix.c ****     }else{
 957               		.loc 1 240 9 is_stmt 1 view .LVU202
 958               	.LBB57:
 959               	.LBI57:
 252:keyboards/crkbd/rev1/matrix.c **** 
 960               		.loc 1 252 9 view .LVU203
 961               	.LBB58:
 254:keyboards/crkbd/rev1/matrix.c ****     int mchanged = 1;
 962               		.loc 1 254 5 view .LVU204
 254:keyboards/crkbd/rev1/matrix.c ****     int mchanged = 1;
 963               		.loc 1 254 15 is_stmt 0 view .LVU205
 964 000e 0E94 0000 		call _matrix_scan
 965               	.LVL52:
 255:keyboards/crkbd/rev1/matrix.c **** 
 966               		.loc 1 255 5 is_stmt 1 view .LVU206
 257:keyboards/crkbd/rev1/matrix.c **** 
 967               		.loc 1 257 5 view .LVU207
 257:keyboards/crkbd/rev1/matrix.c **** 
 968               		.loc 1 257 31 is_stmt 0 view .LVU208
 969 0012 8091 0000 		lds r24,isLeftHand
 257:keyboards/crkbd/rev1/matrix.c **** 
 970               		.loc 1 257 35 view .LVU209
 971 0016 C4E0      		ldi r28,lo8(4)
 972 0018 D0E0      		ldi r29,0
 973 001a 8823      		tst r24
 974 001c 01F0      		breq .L52
 975 001e D0E0      		ldi r29,0
 976 0020 C0E0      		ldi r28,0
 977               	.L52:
 978               	.LVL53:
 266:keyboards/crkbd/rev1/matrix.c **** 		      &matrix[offset], SERIAL_MASTER_BUFFER_LENGTH);
 979               		.loc 1 266 5 is_stmt 1 view .LVU210
 267:keyboards/crkbd/rev1/matrix.c ****   #endif
 980               		.loc 1 267 9 is_stmt 0 view .LVU211
 981 0022 C050      		subi r28,lo8(-(matrix))
 982 0024 D040      		sbci r29,hi8(-(matrix))
 983               	.LVL54:
 266:keyboards/crkbd/rev1/matrix.c **** 		      &matrix[offset], SERIAL_MASTER_BUFFER_LENGTH);
 984               		.loc 1 266 16 view .LVU212
 985 0026 44E0      		ldi r20,lo8(4)
 986 0028 50E0      		ldi r21,0
 987 002a BE01      		movw r22,r28
 988 002c 80E0      		ldi r24,lo8(serial_master_buffer)
 989 002e 90E0      		ldi r25,hi8(serial_master_buffer)
 990 0030 0E94 0000 		call memcmp
 991               	.LVL55:
 269:keyboards/crkbd/rev1/matrix.c **** 	   &matrix[offset], SERIAL_MASTER_BUFFER_LENGTH);
 992               		.loc 1 269 5 is_stmt 1 view .LVU213
 993 0034 4881      		ld r20,Y
 994 0036 5981      		ldd r21,Y+1
 995 0038 6A81      		ldd r22,Y+2
 996 003a 7B81      		ldd r23,Y+3
 997 003c 4093 0000 		sts serial_master_buffer,r20
 998 0040 5093 0000 		sts serial_master_buffer+1,r21
 999 0044 6093 0000 		sts serial_master_buffer+2,r22
 1000 0048 7093 0000 		sts serial_master_buffer+3,r23
 276:keyboards/crkbd/rev1/matrix.c **** #endif
 1001               		.loc 1 276 5 view .LVU214
 276:keyboards/crkbd/rev1/matrix.c **** #endif
 1002               		.loc 1 276 9 is_stmt 0 view .LVU215
 1003 004c 0E94 0000 		call serial_transaction
 1004               	.LVL56:
 276:keyboards/crkbd/rev1/matrix.c **** #endif
 1005               		.loc 1 276 7 view .LVU216
 1006 0050 892B      		or r24,r25
 1007 0052 01F0      		breq .L53
 279:keyboards/crkbd/rev1/matrix.c **** 
 1008               		.loc 1 279 9 is_stmt 1 view .LVU217
 1009 0054 0E94 0000 		call tx_led_on
 1010               	.LVL57:
 281:keyboards/crkbd/rev1/matrix.c **** 
 1011               		.loc 1 281 9 view .LVU218
 281:keyboards/crkbd/rev1/matrix.c **** 
 1012               		.loc 1 281 20 is_stmt 0 view .LVU219
 1013 0058 8091 0000 		lds r24,error_count
 1014 005c 8F5F      		subi r24,lo8(-(1))
 1015 005e 8093 0000 		sts error_count,r24
 283:keyboards/crkbd/rev1/matrix.c ****             // reset other half if disconnected
 1016               		.loc 1 283 9 is_stmt 1 view .LVU220
 283:keyboards/crkbd/rev1/matrix.c ****             // reset other half if disconnected
 1017               		.loc 1 283 12 is_stmt 0 view .LVU221
 1018 0062 8630      		cpi r24,lo8(6)
 1019 0064 00F0      		brlo .L61
 1020               	.LBB59:
 285:keyboards/crkbd/rev1/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 1021               		.loc 1 285 13 is_stmt 1 view .LVU222
 285:keyboards/crkbd/rev1/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 1022               		.loc 1 285 44 is_stmt 0 view .LVU223
 1023 0066 8091 0000 		lds r24,isLeftHand
 285:keyboards/crkbd/rev1/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 1024               		.loc 1 285 62 view .LVU224
 1025 006a F0E0      		ldi r31,0
 1026 006c E0E0      		ldi r30,0
 1027 006e 8823      		tst r24
 1028 0070 01F0      		breq .L55
 1029 0072 E4E0      		ldi r30,lo8(4)
 1030 0074 F0E0      		ldi r31,0
 1031               	.L55:
 1032               	.LVL58:
 286:keyboards/crkbd/rev1/matrix.c ****                 matrix[slaveOffset+i] = 0;
 1033               		.loc 1 286 13 is_stmt 1 view .LVU225
 1034               	.LBB60:
 286:keyboards/crkbd/rev1/matrix.c ****                 matrix[slaveOffset+i] = 0;
 1035               		.loc 1 286 18 view .LVU226
 287:keyboards/crkbd/rev1/matrix.c ****             }
 1036               		.loc 1 287 17 view .LVU227
 287:keyboards/crkbd/rev1/matrix.c ****             }
 1037               		.loc 1 287 39 is_stmt 0 view .LVU228
 1038 0076 E050      		subi r30,lo8(-(matrix))
 1039 0078 F040      		sbci r31,hi8(-(matrix))
 1040               	.LVL59:
 287:keyboards/crkbd/rev1/matrix.c ****             }
 1041               		.loc 1 287 39 view .LVU229
 1042 007a 1082      		st Z,__zero_reg__
 1043               	.LVL60:
 287:keyboards/crkbd/rev1/matrix.c ****             }
 1044               		.loc 1 287 17 is_stmt 1 view .LVU230
 287:keyboards/crkbd/rev1/matrix.c ****             }
 1045               		.loc 1 287 39 is_stmt 0 view .LVU231
 1046 007c 1182      		std Z+1,__zero_reg__
 1047               	.LVL61:
 287:keyboards/crkbd/rev1/matrix.c ****             }
 1048               		.loc 1 287 17 is_stmt 1 view .LVU232
 287:keyboards/crkbd/rev1/matrix.c ****             }
 1049               		.loc 1 287 39 is_stmt 0 view .LVU233
 1050 007e 1282      		std Z+2,__zero_reg__
 1051               	.LVL62:
 287:keyboards/crkbd/rev1/matrix.c ****             }
 1052               		.loc 1 287 17 is_stmt 1 view .LVU234
 287:keyboards/crkbd/rev1/matrix.c ****             }
 1053               		.loc 1 287 39 is_stmt 0 view .LVU235
 1054 0080 1382      		std Z+3,__zero_reg__
 1055               	.LVL63:
 1056               	.L61:
 287:keyboards/crkbd/rev1/matrix.c ****             }
 1057               		.loc 1 287 39 view .LVU236
 1058               	.LBE60:
 1059               	.LBE59:
 1060               	.LBE58:
 1061               	.LBE57:
 1062               	.LBB62:
 246:keyboards/crkbd/rev1/matrix.c ****     }
 1063               		.loc 1 246 9 is_stmt 1 discriminator 4 view .LVU237
 1064 0082 0E94 0000 		call matrix_scan_quantum
 1065               	.LVL64:
 1066               	.LBE62:
 248:keyboards/crkbd/rev1/matrix.c **** }
 1067               		.loc 1 248 5 discriminator 4 view .LVU238
 249:keyboards/crkbd/rev1/matrix.c **** 
 1068               		.loc 1 249 1 is_stmt 0 discriminator 4 view .LVU239
 1069 0086 81E0      		ldi r24,lo8(1)
 1070               	/* epilogue start */
 1071 0088 DF91      		pop r29
 1072 008a CF91      		pop r28
 1073 008c 0895      		ret
 1074               	.LVL65:
 1075               	.L53:
 1076               	.LBB63:
 1077               	.LBB61:
 292:keyboards/crkbd/rev1/matrix.c ****         error_count = 0;
 1078               		.loc 1 292 9 is_stmt 1 view .LVU240
 1079 008e 0E94 0000 		call tx_led_off
 1080               	.LVL66:
 293:keyboards/crkbd/rev1/matrix.c ****     }
 1081               		.loc 1 293 9 view .LVU241
 293:keyboards/crkbd/rev1/matrix.c ****     }
 1082               		.loc 1 293 21 is_stmt 0 view .LVU242
 1083 0092 1092 0000 		sts error_count,__zero_reg__
 295:keyboards/crkbd/rev1/matrix.c ****     return ret;
 1084               		.loc 1 295 5 is_stmt 1 view .LVU243
 1085 0096 00C0      		rjmp .L61
 1086               	.LVL67:
 1087               	.L51:
 295:keyboards/crkbd/rev1/matrix.c ****     return ret;
 1088               		.loc 1 295 5 is_stmt 0 view .LVU244
 1089               	.LBE61:
 1090               	.LBE63:
 1091               	.LBB64:
 242:keyboards/crkbd/rev1/matrix.c ****         int offset = (isLeftHand) ? ROWS_PER_HAND : 0;
 1092               		.loc 1 242 9 is_stmt 1 view .LVU245
 1093 0098 0E94 0000 		call matrix_slave_scan
 1094               	.LVL68:
 243:keyboards/crkbd/rev1/matrix.c ****         memcpy(&matrix[offset],
 1095               		.loc 1 243 9 view .LVU246
 243:keyboards/crkbd/rev1/matrix.c ****         memcpy(&matrix[offset],
 1096               		.loc 1 243 35 is_stmt 0 view .LVU247
 1097 009c 8091 0000 		lds r24,isLeftHand
 243:keyboards/crkbd/rev1/matrix.c ****         memcpy(&matrix[offset],
 1098               		.loc 1 243 51 view .LVU248
 1099 00a0 8111      		cpse r24,__zero_reg__
 1100 00a2 00C0      		rjmp .L60
 1101 00a4 90E0      		ldi r25,0
 1102 00a6 80E0      		ldi r24,0
 1103               	.L57:
 1104               	.LVL69:
 244:keyboards/crkbd/rev1/matrix.c ****                (void *)serial_master_buffer, SERIAL_MASTER_BUFFER_LENGTH);
 1105               		.loc 1 244 9 is_stmt 1 discriminator 4 view .LVU249
 244:keyboards/crkbd/rev1/matrix.c ****                (void *)serial_master_buffer, SERIAL_MASTER_BUFFER_LENGTH);
 1106               		.loc 1 244 16 is_stmt 0 discriminator 4 view .LVU250
 1107 00a8 8050      		subi r24,lo8(-(matrix))
 1108 00aa 9040      		sbci r25,hi8(-(matrix))
 1109               	.LVL70:
 244:keyboards/crkbd/rev1/matrix.c ****                (void *)serial_master_buffer, SERIAL_MASTER_BUFFER_LENGTH);
 1110               		.loc 1 244 9 discriminator 4 view .LVU251
 1111 00ac 4091 0000 		lds r20,serial_master_buffer
 1112 00b0 5091 0000 		lds r21,serial_master_buffer+1
 1113 00b4 6091 0000 		lds r22,serial_master_buffer+2
 1114 00b8 7091 0000 		lds r23,serial_master_buffer+3
 1115 00bc FC01      		movw r30,r24
 1116 00be 4083      		st Z,r20
 1117 00c0 5183      		std Z+1,r21
 1118 00c2 6283      		std Z+2,r22
 1119 00c4 7383      		std Z+3,r23
 1120 00c6 00C0      		rjmp .L61
 1121               	.LVL71:
 1122               	.L60:
 243:keyboards/crkbd/rev1/matrix.c ****         memcpy(&matrix[offset],
 1123               		.loc 1 243 51 view .LVU252
 1124 00c8 84E0      		ldi r24,lo8(4)
 1125 00ca 90E0      		ldi r25,0
 1126 00cc 00C0      		rjmp .L57
 1127               	.LBE64:
 1128               		.cfi_endproc
 1129               	.LFE23:
 1131               		.section	.text.matrix_is_modified,"ax",@progbits
 1132               	.global	matrix_is_modified
 1134               	matrix_is_modified:
 1135               	.LFB26:
 327:keyboards/crkbd/rev1/matrix.c ****     if (debouncing) return false;
 1136               		.loc 1 327 1 is_stmt 1 view -0
 1137               		.cfi_startproc
 1138               	/* prologue: function */
 1139               	/* frame size = 0 */
 1140               	/* stack size = 0 */
 1141               	.L__stack_usage = 0
 328:keyboards/crkbd/rev1/matrix.c ****     return true;
 1142               		.loc 1 328 5 view .LVU254
 328:keyboards/crkbd/rev1/matrix.c ****     return true;
 1143               		.loc 1 328 8 is_stmt 0 view .LVU255
 1144 0000 81E0      		ldi r24,lo8(1)
 1145 0002 9091 0000 		lds r25,debouncing
 1146 0006 9111      		cpse r25,__zero_reg__
 1147 0008 80E0      		ldi r24,0
 1148               	.L63:
 1149               	/* epilogue start */
 330:keyboards/crkbd/rev1/matrix.c **** 
 1150               		.loc 1 330 1 view .LVU256
 1151 000a 0895      		ret
 1152               		.cfi_endproc
 1153               	.LFE26:
 1155               		.section	.text.matrix_is_on,"ax",@progbits
 1156               	.global	matrix_is_on
 1158               	matrix_is_on:
 1159               	.LVL72:
 1160               	.LFB27:
 334:keyboards/crkbd/rev1/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<<col));
 1161               		.loc 1 334 1 is_stmt 1 view -0
 1162               		.cfi_startproc
 1163               	/* prologue: function */
 1164               	/* frame size = 0 */
 1165               	/* stack size = 0 */
 1166               	.L__stack_usage = 0
 335:keyboards/crkbd/rev1/matrix.c **** }
 1167               		.loc 1 335 5 view .LVU258
 335:keyboards/crkbd/rev1/matrix.c **** }
 1168               		.loc 1 335 19 is_stmt 0 view .LVU259
 1169 0000 E82F      		mov r30,r24
 1170 0002 F0E0      		ldi r31,0
 1171 0004 E050      		subi r30,lo8(-(matrix))
 1172 0006 F040      		sbci r31,hi8(-(matrix))
 1173 0008 2081      		ld r18,Z
 1174 000a 30E0      		ldi r19,0
 335:keyboards/crkbd/rev1/matrix.c **** }
 1175               		.loc 1 335 43 view .LVU260
 1176 000c 81E0      		ldi r24,lo8(1)
 1177 000e 90E0      		ldi r25,0
 1178               	.LVL73:
 335:keyboards/crkbd/rev1/matrix.c **** }
 1179               		.loc 1 335 43 view .LVU261
 1180 0010 00C0      		rjmp 2f
 1181               		1:
 1182 0012 880F      		lsl r24
 1183 0014 991F      		rol r25
 1184               		2:
 1185 0016 6A95      		dec r22
 1186 0018 02F4      		brpl 1b
 335:keyboards/crkbd/rev1/matrix.c **** }
 1187               		.loc 1 335 25 view .LVU262
 1188 001a 2823      		and r18,r24
 1189 001c 3923      		and r19,r25
 1190 001e 81E0      		ldi r24,lo8(1)
 1191 0020 232B      		or r18,r19
 1192 0022 01F4      		brne .L68
 1193 0024 80E0      		ldi r24,0
 1194               	.L68:
 1195               	/* epilogue start */
 336:keyboards/crkbd/rev1/matrix.c **** 
 1196               		.loc 1 336 1 view .LVU263
 1197 0026 0895      		ret
 1198               		.cfi_endproc
 1199               	.LFE27:
 1201               		.section	.text.matrix_get_row,"ax",@progbits
 1202               	.global	matrix_get_row
 1204               	matrix_get_row:
 1205               	.LVL74:
 1206               	.LFB28:
 340:keyboards/crkbd/rev1/matrix.c ****     return matrix[row];
 1207               		.loc 1 340 1 is_stmt 1 view -0
 1208               		.cfi_startproc
 1209               	/* prologue: function */
 1210               	/* frame size = 0 */
 1211               	/* stack size = 0 */
 1212               	.L__stack_usage = 0
 341:keyboards/crkbd/rev1/matrix.c **** }
 1213               		.loc 1 341 5 view .LVU265
 341:keyboards/crkbd/rev1/matrix.c **** }
 1214               		.loc 1 341 18 is_stmt 0 view .LVU266
 1215 0000 E82F      		mov r30,r24
 1216 0002 F0E0      		ldi r31,0
 1217 0004 E050      		subi r30,lo8(-(matrix))
 1218 0006 F040      		sbci r31,hi8(-(matrix))
 342:keyboards/crkbd/rev1/matrix.c **** 
 1219               		.loc 1 342 1 view .LVU267
 1220 0008 8081      		ld r24,Z
 1221               	.LVL75:
 1222               	/* epilogue start */
 342:keyboards/crkbd/rev1/matrix.c **** 
 1223               		.loc 1 342 1 view .LVU268
 1224 000a 0895      		ret
 1225               		.cfi_endproc
 1226               	.LFE28:
 1228               		.section	.text.matrix_print,"ax",@progbits
 1229               	.global	matrix_print
 1231               	matrix_print:
 1232               	.LFB29:
 345:keyboards/crkbd/rev1/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 1233               		.loc 1 345 1 is_stmt 1 view -0
 1234               		.cfi_startproc
 1235               	/* prologue: function */
 1236               	/* frame size = 0 */
 1237               	/* stack size = 0 */
 1238               	.L__stack_usage = 0
 346:keyboards/crkbd/rev1/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 1239               		.loc 1 346 38 view .LVU270
 347:keyboards/crkbd/rev1/matrix.c ****         phex(row); print(": ");
 1240               		.loc 1 347 5 view .LVU271
 347:keyboards/crkbd/rev1/matrix.c ****         phex(row); print(": ");
 1241               		.loc 1 347 10 view .LVU272
 1242               	.LVL76:
 1243               	/* epilogue start */
 352:keyboards/crkbd/rev1/matrix.c **** 
 1244               		.loc 1 352 1 is_stmt 0 view .LVU273
 1245 0000 0895      		ret
 1246               		.cfi_endproc
 1247               	.LFE29:
 1249               		.section	.text.matrix_key_count,"ax",@progbits
 1250               	.global	matrix_key_count
 1252               	matrix_key_count:
 1253               	.LFB30:
 355:keyboards/crkbd/rev1/matrix.c ****     uint8_t count = 0;
 1254               		.loc 1 355 1 is_stmt 1 view -0
 1255               		.cfi_startproc
 1256 0000 0F93      		push r16
 1257               	.LCFI19:
 1258               		.cfi_def_cfa_offset 3
 1259               		.cfi_offset 16, -2
 1260 0002 1F93      		push r17
 1261               	.LCFI20:
 1262               		.cfi_def_cfa_offset 4
 1263               		.cfi_offset 17, -3
 1264 0004 CF93      		push r28
 1265               	.LCFI21:
 1266               		.cfi_def_cfa_offset 5
 1267               		.cfi_offset 28, -4
 1268               	/* prologue: function */
 1269               	/* frame size = 0 */
 1270               	/* stack size = 3 */
 1271               	.L__stack_usage = 3
 356:keyboards/crkbd/rev1/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1272               		.loc 1 356 5 view .LVU275
 1273               	.LVL77:
 357:keyboards/crkbd/rev1/matrix.c ****         count += bitpop16(matrix[i]);
 1274               		.loc 1 357 5 view .LVU276
 1275               	.LBB65:
 357:keyboards/crkbd/rev1/matrix.c ****         count += bitpop16(matrix[i]);
 1276               		.loc 1 357 10 view .LVU277
 357:keyboards/crkbd/rev1/matrix.c ****         count += bitpop16(matrix[i]);
 1277               		.loc 1 357 10 is_stmt 0 view .LVU278
 1278 0006 00E0      		ldi r16,lo8(matrix)
 1279 0008 10E0      		ldi r17,hi8(matrix)
 1280               	.LBE65:
 356:keyboards/crkbd/rev1/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1281               		.loc 1 356 13 view .LVU279
 1282 000a C0E0      		ldi r28,0
 1283               	.LVL78:
 1284               	.L72:
 1285               	.LBB66:
 358:keyboards/crkbd/rev1/matrix.c ****     }
 1286               		.loc 1 358 9 is_stmt 1 discriminator 3 view .LVU280
 358:keyboards/crkbd/rev1/matrix.c ****     }
 1287               		.loc 1 358 33 is_stmt 0 discriminator 3 view .LVU281
 1288 000c F801      		movw r30,r16
 1289 000e 8191      		ld r24,Z+
 1290 0010 8F01      		movw r16,r30
 1291               	.LVL79:
 358:keyboards/crkbd/rev1/matrix.c ****     }
 1292               		.loc 1 358 18 discriminator 3 view .LVU282
 1293 0012 90E0      		ldi r25,0
 1294 0014 0E94 0000 		call bitpop16
 1295               	.LVL80:
 358:keyboards/crkbd/rev1/matrix.c ****     }
 1296               		.loc 1 358 15 discriminator 3 view .LVU283
 1297 0018 C80F      		add r28,r24
 1298               	.LVL81:
 357:keyboards/crkbd/rev1/matrix.c ****         count += bitpop16(matrix[i]);
 1299               		.loc 1 357 5 discriminator 3 view .LVU284
 1300 001a F0E0      		ldi r31,hi8(matrix+8)
 1301 001c 0030      		cpi r16,lo8(matrix+8)
 1302 001e 1F07      		cpc r17,r31
 1303 0020 01F4      		brne .L72
 1304               	.LBE66:
 360:keyboards/crkbd/rev1/matrix.c **** }
 1305               		.loc 1 360 5 is_stmt 1 view .LVU285
 361:keyboards/crkbd/rev1/matrix.c **** 
 1306               		.loc 1 361 1 is_stmt 0 view .LVU286
 1307 0022 8C2F      		mov r24,r28
 1308               	/* epilogue start */
 1309 0024 CF91      		pop r28
 1310               	.LVL82:
 361:keyboards/crkbd/rev1/matrix.c **** 
 1311               		.loc 1 361 1 view .LVU287
 1312 0026 1F91      		pop r17
 1313 0028 0F91      		pop r16
 1314               	.LVL83:
 361:keyboards/crkbd/rev1/matrix.c **** 
 1315               		.loc 1 361 1 view .LVU288
 1316 002a 0895      		ret
 1317               		.cfi_endproc
 1318               	.LFE30:
 1320               		.section	.bss.matrix_debouncing,"aw",@nobits
 1323               	matrix_debouncing:
 1324 0000 0000 0000 		.zero	8
 1324      0000 0000 
 1325               		.section	.bss.matrix,"aw",@nobits
 1328               	matrix:
 1329 0000 0000 0000 		.zero	8
 1329      0000 0000 
 1330               		.section	.rodata.col_pins,"a"
 1333               	col_pins:
 1334 0000 F4        		.byte	-12
 1335 0001 F5        		.byte	-11
 1336 0002 F6        		.byte	-10
 1337 0003 F7        		.byte	-9
 1338 0004 31        		.byte	49
 1339 0005 33        		.byte	51
 1340               		.section	.rodata.row_pins,"a"
 1343               	row_pins:
 1344 0000 94        		.byte	-108
 1345 0001 66        		.byte	102
 1346 0002 97        		.byte	-105
 1347 0003 C6        		.byte	-58
 1348 0004 0000 0000 		.zero	4
 1349               	.global	is_master
 1350               		.section	.bss.is_master,"aw",@nobits
 1353               	is_master:
 1354 0000 00        		.zero	1
 1355               		.section	.bss.error_count,"aw",@nobits
 1358               	error_count:
 1359 0000 00        		.zero	1
 1360               		.section	.data.debouncing,"aw"
 1363               	debouncing:
 1364 0000 05        		.byte	5
 1365               		.text
 1366               	.Letext0:
 1367               		.file 3 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 1368               		.file 4 "tmk_core/common/debug.h"
 1369               		.file 5 "tmk_core/common/matrix.h"
 1370               		.file 6 "keyboards/crkbd/rev1/split_util.h"
 1371               		.file 7 "drivers/avr/pro_micro.h"
 1372               		.file 8 "keyboards/crkbd/rev1/split_scomm.h"
 1373               		.file 9 "tmk_core/common/util.h"
 1374               		.file 10 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
DEFINED SYMBOLS
                            *ABS*:00000000 matrix.c
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:2      *ABS*:0000003e __SP_H__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:3      *ABS*:0000003d __SP_L__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:4      *ABS*:0000003f __SREG__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:6      *ABS*:00000001 __zero_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:12     .text.unselect_rows:00000000 unselect_rows
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1343   .rodata.row_pins:00000000 row_pins
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:89     .text.matrix_init_user:00000000 matrix_init_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:89     .text.matrix_init_user:00000000 matrix_init_user.localalias.0
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:107    .text.matrix_init_kb:00000000 matrix_init_kb
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:124    .text.matrix_scan_user:00000000 matrix_scan_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:139    .text.matrix_scan_kb:00000000 matrix_scan_kb
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:156    .text.matrix_rows:00000000 matrix_rows
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:175    .text.matrix_cols:00000000 matrix_cols
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:194    .text.tx_rx_leds_init:00000000 tx_rx_leds_init
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:218    .text.tx_led_on:00000000 tx_led_on
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:237    .text.tx_led_off:00000000 tx_led_off
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:256    .text.rx_led_on:00000000 rx_led_on
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:275    .text.rx_led_off:00000000 rx_led_off
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:294    .text.matrix_init:00000000 matrix_init
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1333   .rodata.col_pins:00000000 col_pins
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1328   .bss.matrix:00000000 matrix
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1323   .bss.matrix_debouncing:00000000 matrix_debouncing
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1353   .bss.is_master:00000000 is_master
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:406    .text._matrix_scan:00000000 _matrix_scan
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1363   .data.debouncing:00000000 debouncing
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:753    .text.serial_transaction:00000000 serial_transaction
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:854    .text.matrix_slave_scan:00000000 matrix_slave_scan
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:935    .text.matrix_scan:00000000 matrix_scan
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1358   .bss.error_count:00000000 error_count
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1134   .text.matrix_is_modified:00000000 matrix_is_modified
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1158   .text.matrix_is_on:00000000 matrix_is_on
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1204   .text.matrix_get_row:00000000 matrix_get_row
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1231   .text.matrix_print:00000000 matrix_print
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccB784qO.s:1252   .text.matrix_key_count:00000000 matrix_key_count

UNDEFINED SYMBOLS
split_keyboard_setup
has_usb
matrix_init_quantum
isLeftHand
serial_update_buffers
serial_slave_buffer
slave_buffer_change_count
serial_master_buffer
memcmp
matrix_scan_quantum
bitpop16
__do_copy_data
__do_clear_bss
