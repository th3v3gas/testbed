   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB114:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** 
  19:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  20:quantum/quantum.c **** #    include "outputselect.h"
  21:quantum/quantum.c **** #endif
  22:quantum/quantum.c **** 
  23:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
  24:quantum/quantum.c **** #    include "backlight.h"
  25:quantum/quantum.c **** extern backlight_config_t backlight_config;
  26:quantum/quantum.c **** #endif
  27:quantum/quantum.c **** 
  28:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  29:quantum/quantum.c **** #    include "fauxclicky.h"
  30:quantum/quantum.c **** #endif
  31:quantum/quantum.c **** 
  32:quantum/quantum.c **** #ifdef API_ENABLE
  33:quantum/quantum.c **** #    include "api.h"
  34:quantum/quantum.c **** #endif
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** #ifdef MIDI_ENABLE
  37:quantum/quantum.c **** #    include "process_midi.h"
  38:quantum/quantum.c **** #endif
  39:quantum/quantum.c **** 
  40:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
  41:quantum/quantum.c **** #    include "velocikey.h"
  42:quantum/quantum.c **** #endif
  43:quantum/quantum.c **** 
  44:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
  45:quantum/quantum.c **** #    include "haptic.h"
  46:quantum/quantum.c **** #endif
  47:quantum/quantum.c **** 
  48:quantum/quantum.c **** #ifdef ENCODER_ENABLE
  49:quantum/quantum.c **** #    include "encoder.h"
  50:quantum/quantum.c **** #endif
  51:quantum/quantum.c **** 
  52:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  53:quantum/quantum.c **** #    ifndef GOODBYE_SONG
  54:quantum/quantum.c **** #        define GOODBYE_SONG SONG(GOODBYE_SOUND)
  55:quantum/quantum.c **** #    endif
  56:quantum/quantum.c **** float goodbye_song[][2] = GOODBYE_SONG;
  57:quantum/quantum.c **** #    ifdef DEFAULT_LAYER_SONGS
  58:quantum/quantum.c **** float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  59:quantum/quantum.c **** #    endif
  60:quantum/quantum.c **** #    ifdef SENDSTRING_BELL
  61:quantum/quantum.c **** float bell_song[][2] = SONG(TERMINAL_SOUND);
  62:quantum/quantum.c **** #    endif
  63:quantum/quantum.c **** #endif
  64:quantum/quantum.c **** 
  65:quantum/quantum.c **** static void do_code16(uint16_t code, void (*f)(uint8_t)) {
  16               		.loc 1 65 58 view -0
  17               		.cfi_startproc
  18               		.loc 1 65 58 is_stmt 0 view .LVU1
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  66:quantum/quantum.c ****     switch (code) {
  31               		.loc 1 66 5 is_stmt 1 view .LVU2
  32 0004 9C01      		movw r18,r24
  33 0006 3A95      		dec r19
  34 0008 2115      		cp r18,__zero_reg__
  35 000a 3F41      		sbci r19,31
  36 000c 00F4      		brsh .L1
  67:quantum/quantum.c ****         case QK_MODS ... QK_MODS_MAX:
  68:quantum/quantum.c ****             break;
  37               		.loc 1 68 13 view .LVU3
  69:quantum/quantum.c ****         default:
  70:quantum/quantum.c ****             return;
  71:quantum/quantum.c ****     }
  72:quantum/quantum.c **** 
  73:quantum/quantum.c ****     uint8_t mods_to_send = 0;
  38               		.loc 1 73 5 view .LVU4
  39               	.LVL1:
  74:quantum/quantum.c **** 
  75:quantum/quantum.c ****     if (code & QK_RMODS_MIN) {  // Right mod flag is set
  40               		.loc 1 75 5 view .LVU5
  41 000e EC01      		movw r28,r24
  42 0010 CC27      		clr r28
  43 0012 D170      		andi r29,1
  44 0014 DC01      		movw r26,r24
  45 0016 AA27      		clr r26
  46 0018 B270      		andi r27,2
  47 001a AC01      		movw r20,r24
  48 001c 4427      		clr r20
  49 001e 5470      		andi r21,4
  50 0020 9C01      		movw r18,r24
  51 0022 2227      		clr r18
  52 0024 3870      		andi r19,8
  53               		.loc 1 75 8 is_stmt 0 view .LVU6
  54 0026 94FF      		sbrs r25,4
  55 0028 00C0      		rjmp .L3
  76:quantum/quantum.c ****         if (code & QK_LCTL) mods_to_send |= MOD_BIT(KC_RCTL);
  56               		.loc 1 76 9 is_stmt 1 view .LVU7
  57               		.loc 1 76 42 is_stmt 0 view .LVU8
  58 002a 80E1      		ldi r24,lo8(16)
  59               	.LVL2:
  60               		.loc 1 76 12 view .LVU9
  61 002c CD2B      		or r28,r29
  62 002e 01F4      		brne .L4
  73:quantum/quantum.c **** 
  63               		.loc 1 73 13 view .LVU10
  64 0030 80E0      		ldi r24,0
  65               	.L4:
  66               	.LVL3:
  77:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_RSFT);
  67               		.loc 1 77 9 is_stmt 1 view .LVU11
  68               		.loc 1 77 12 is_stmt 0 view .LVU12
  69 0032 AB2B      		or r26,r27
  70 0034 01F0      		breq .L5
  71               		.loc 1 77 29 is_stmt 1 discriminator 1 view .LVU13
  72               		.loc 1 77 42 is_stmt 0 discriminator 1 view .LVU14
  73 0036 8062      		ori r24,lo8(32)
  74               	.LVL4:
  75               	.L5:
  78:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_RALT);
  76               		.loc 1 78 9 is_stmt 1 view .LVU15
  77               		.loc 1 78 12 is_stmt 0 view .LVU16
  78 0038 452B      		or r20,r21
  79 003a 01F0      		breq .L6
  80               		.loc 1 78 29 is_stmt 1 discriminator 1 view .LVU17
  81               		.loc 1 78 42 is_stmt 0 discriminator 1 view .LVU18
  82 003c 8064      		ori r24,lo8(64)
  83               	.LVL5:
  84               	.L6:
  79:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_RGUI);
  85               		.loc 1 79 9 is_stmt 1 view .LVU19
  86               		.loc 1 79 12 is_stmt 0 view .LVU20
  87 003e 232B      		or r18,r19
  88 0040 01F0      		breq .L7
  89               		.loc 1 79 29 is_stmt 1 discriminator 1 view .LVU21
  90               		.loc 1 79 42 is_stmt 0 discriminator 1 view .LVU22
  91 0042 8068      		ori r24,lo8(-128)
  92               	.LVL6:
  93               	.L7:
  80:quantum/quantum.c ****     } else {
  81:quantum/quantum.c ****         if (code & QK_LCTL) mods_to_send |= MOD_BIT(KC_LCTL);
  82:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
  83:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
  84:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
  85:quantum/quantum.c ****     }
  86:quantum/quantum.c **** 
  87:quantum/quantum.c ****     f(mods_to_send);
  94               		.loc 1 87 5 is_stmt 1 view .LVU23
  95 0044 FB01      		movw r30,r22
  96               	/* epilogue start */
  88:quantum/quantum.c **** }
  97               		.loc 1 88 1 is_stmt 0 view .LVU24
  98 0046 DF91      		pop r29
  99 0048 CF91      		pop r28
  87:quantum/quantum.c **** }
 100               		.loc 1 87 5 view .LVU25
 101 004a 0994      		ijmp
 102               	.LVL7:
 103               	.L3:
  81:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 104               		.loc 1 81 9 is_stmt 1 view .LVU26
  81:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 105               		.loc 1 81 12 is_stmt 0 view .LVU27
 106 004c 81E0      		ldi r24,lo8(1)
 107               	.LVL8:
  81:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 108               		.loc 1 81 12 view .LVU28
 109 004e CD2B      		or r28,r29
 110 0050 01F4      		brne .L8
 111 0052 80E0      		ldi r24,0
 112               	.L8:
 113               	.LVL9:
  82:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 114               		.loc 1 82 9 is_stmt 1 view .LVU29
  82:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 115               		.loc 1 82 12 is_stmt 0 view .LVU30
 116 0054 AB2B      		or r26,r27
 117 0056 01F0      		breq .L9
  82:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 118               		.loc 1 82 29 is_stmt 1 discriminator 1 view .LVU31
  82:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 119               		.loc 1 82 42 is_stmt 0 discriminator 1 view .LVU32
 120 0058 8260      		ori r24,lo8(2)
 121               	.LVL10:
 122               	.L9:
  83:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 123               		.loc 1 83 9 is_stmt 1 view .LVU33
  83:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 124               		.loc 1 83 12 is_stmt 0 view .LVU34
 125 005a 452B      		or r20,r21
 126 005c 01F0      		breq .L10
  83:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 127               		.loc 1 83 29 is_stmt 1 discriminator 1 view .LVU35
  83:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 128               		.loc 1 83 42 is_stmt 0 discriminator 1 view .LVU36
 129 005e 8460      		ori r24,lo8(4)
 130               	.LVL11:
 131               	.L10:
  84:quantum/quantum.c ****     }
 132               		.loc 1 84 9 is_stmt 1 view .LVU37
  84:quantum/quantum.c ****     }
 133               		.loc 1 84 12 is_stmt 0 view .LVU38
 134 0060 232B      		or r18,r19
 135 0062 01F0      		breq .L7
  84:quantum/quantum.c ****     }
 136               		.loc 1 84 29 is_stmt 1 discriminator 1 view .LVU39
  84:quantum/quantum.c ****     }
 137               		.loc 1 84 42 is_stmt 0 discriminator 1 view .LVU40
 138 0064 8860      		ori r24,lo8(8)
 139               	.LVL12:
  84:quantum/quantum.c ****     }
 140               		.loc 1 84 42 discriminator 1 view .LVU41
 141 0066 00C0      		rjmp .L7
 142               	.LVL13:
 143               	.L1:
 144               	/* epilogue start */
 145               		.loc 1 88 1 view .LVU42
 146 0068 DF91      		pop r29
 147 006a CF91      		pop r28
 148 006c 0895      		ret
 149               		.cfi_endproc
 150               	.LFE114:
 152               		.section	.text.register_code16,"ax",@progbits
 153               	.global	register_code16
 155               	register_code16:
 156               	.LVL14:
 157               	.LFB115:
  89:quantum/quantum.c **** 
  90:quantum/quantum.c **** void register_code16(uint16_t code) {
 158               		.loc 1 90 37 is_stmt 1 view -0
 159               		.cfi_startproc
 160               		.loc 1 90 37 is_stmt 0 view .LVU44
 161 0000 CF93      		push r28
 162               	.LCFI2:
 163               		.cfi_def_cfa_offset 3
 164               		.cfi_offset 28, -2
 165 0002 DF93      		push r29
 166               	.LCFI3:
 167               		.cfi_def_cfa_offset 4
 168               		.cfi_offset 29, -3
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 2 */
 172               	.L__stack_usage = 2
 173 0004 EC01      		movw r28,r24
  91:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 174               		.loc 1 91 5 is_stmt 1 view .LVU45
 175               		.loc 1 91 9 is_stmt 0 view .LVU46
 176 0006 805E      		subi r24,-32
 177 0008 9109      		sbc r25,__zero_reg__
 178               	.LVL15:
 179               		.loc 1 91 8 view .LVU47
 180 000a 0897      		sbiw r24,8
 181 000c 00F0      		brlo .L31
  92:quantum/quantum.c ****         do_code16(code, register_mods);
  93:quantum/quantum.c ****     } else {
  94:quantum/quantum.c ****         do_code16(code, register_weak_mods);
 182               		.loc 1 94 9 discriminator 1 view .LVU48
 183 000e 60E0      		ldi r22,lo8(gs(register_weak_mods))
 184 0010 70E0      		ldi r23,hi8(gs(register_weak_mods))
  91:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 185               		.loc 1 91 22 discriminator 1 view .LVU49
 186 0012 2097      		sbiw r28,0
 187 0014 01F4      		brne .L34
 188               	.L31:
  92:quantum/quantum.c ****         do_code16(code, register_mods);
 189               		.loc 1 92 9 is_stmt 1 view .LVU50
 190 0016 60E0      		ldi r22,lo8(gs(register_mods))
 191 0018 70E0      		ldi r23,hi8(gs(register_mods))
 192               	.L34:
 193               		.loc 1 94 9 is_stmt 0 view .LVU51
 194 001a CE01      		movw r24,r28
 195 001c 0E94 0000 		call do_code16
 196               	.LVL16:
  95:quantum/quantum.c ****     }
  96:quantum/quantum.c ****     register_code(code);
 197               		.loc 1 96 5 is_stmt 1 view .LVU52
 198 0020 8C2F      		mov r24,r28
 199               	/* epilogue start */
  97:quantum/quantum.c **** }
 200               		.loc 1 97 1 is_stmt 0 view .LVU53
 201 0022 DF91      		pop r29
 202 0024 CF91      		pop r28
 203               	.LVL17:
  96:quantum/quantum.c **** }
 204               		.loc 1 96 5 view .LVU54
 205 0026 0C94 0000 		jmp register_code
 206               	.LVL18:
 207               		.cfi_endproc
 208               	.LFE115:
 210               		.section	.text.unregister_code16,"ax",@progbits
 211               	.global	unregister_code16
 213               	unregister_code16:
 214               	.LVL19:
 215               	.LFB116:
  98:quantum/quantum.c **** 
  99:quantum/quantum.c **** void unregister_code16(uint16_t code) {
 216               		.loc 1 99 39 is_stmt 1 view -0
 217               		.cfi_startproc
 218               		.loc 1 99 39 is_stmt 0 view .LVU56
 219 0000 CF93      		push r28
 220               	.LCFI4:
 221               		.cfi_def_cfa_offset 3
 222               		.cfi_offset 28, -2
 223 0002 DF93      		push r29
 224               	.LCFI5:
 225               		.cfi_def_cfa_offset 4
 226               		.cfi_offset 29, -3
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 2 */
 230               	.L__stack_usage = 2
 231 0004 EC01      		movw r28,r24
 100:quantum/quantum.c ****     unregister_code(code);
 232               		.loc 1 100 5 is_stmt 1 view .LVU57
 233 0006 0E94 0000 		call unregister_code
 234               	.LVL20:
 101:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 235               		.loc 1 101 5 view .LVU58
 236               		.loc 1 101 9 is_stmt 0 view .LVU59
 237 000a CE01      		movw r24,r28
 238 000c 805E      		subi r24,-32
 239 000e 9109      		sbc r25,__zero_reg__
 240               		.loc 1 101 8 view .LVU60
 241 0010 0897      		sbiw r24,8
 242 0012 00F0      		brlo .L36
 102:quantum/quantum.c ****         do_code16(code, unregister_mods);
 103:quantum/quantum.c ****     } else {
 104:quantum/quantum.c ****         do_code16(code, unregister_weak_mods);
 243               		.loc 1 104 9 discriminator 1 view .LVU61
 244 0014 60E0      		ldi r22,lo8(gs(unregister_weak_mods))
 245 0016 70E0      		ldi r23,hi8(gs(unregister_weak_mods))
 101:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 246               		.loc 1 101 22 discriminator 1 view .LVU62
 247 0018 2097      		sbiw r28,0
 248 001a 01F4      		brne .L38
 249               	.L36:
 102:quantum/quantum.c ****         do_code16(code, unregister_mods);
 250               		.loc 1 102 9 is_stmt 1 view .LVU63
 251 001c 60E0      		ldi r22,lo8(gs(unregister_mods))
 252 001e 70E0      		ldi r23,hi8(gs(unregister_mods))
 253               	.L38:
 254               		.loc 1 104 9 is_stmt 0 view .LVU64
 255 0020 CE01      		movw r24,r28
 256               	/* epilogue start */
 105:quantum/quantum.c ****     }
 106:quantum/quantum.c **** }
 257               		.loc 1 106 1 view .LVU65
 258 0022 DF91      		pop r29
 259 0024 CF91      		pop r28
 260               	.LVL21:
 104:quantum/quantum.c ****     }
 261               		.loc 1 104 9 view .LVU66
 262 0026 0C94 0000 		jmp do_code16
 263               	.LVL22:
 104:quantum/quantum.c ****     }
 264               		.loc 1 104 9 view .LVU67
 265               		.cfi_endproc
 266               	.LFE116:
 268               		.section	.text.tap_code16,"ax",@progbits
 269               	.global	tap_code16
 271               	tap_code16:
 272               	.LVL23:
 273               	.LFB117:
 107:quantum/quantum.c **** 
 108:quantum/quantum.c **** void tap_code16(uint16_t code) {
 274               		.loc 1 108 32 is_stmt 1 view -0
 275               		.cfi_startproc
 276               		.loc 1 108 32 is_stmt 0 view .LVU69
 277 0000 CF93      		push r28
 278               	.LCFI6:
 279               		.cfi_def_cfa_offset 3
 280               		.cfi_offset 28, -2
 281 0002 DF93      		push r29
 282               	.LCFI7:
 283               		.cfi_def_cfa_offset 4
 284               		.cfi_offset 29, -3
 285               	/* prologue: function */
 286               	/* frame size = 0 */
 287               	/* stack size = 2 */
 288               	.L__stack_usage = 2
 289 0004 EC01      		movw r28,r24
 109:quantum/quantum.c ****     register_code16(code);
 290               		.loc 1 109 5 is_stmt 1 view .LVU70
 291 0006 0E94 0000 		call register_code16
 292               	.LVL24:
 110:quantum/quantum.c **** #if TAP_CODE_DELAY > 0
 111:quantum/quantum.c ****     wait_ms(TAP_CODE_DELAY);
 112:quantum/quantum.c **** #endif
 113:quantum/quantum.c ****     unregister_code16(code);
 293               		.loc 1 113 5 view .LVU71
 294 000a CE01      		movw r24,r28
 295               	/* epilogue start */
 114:quantum/quantum.c **** }
 296               		.loc 1 114 1 is_stmt 0 view .LVU72
 297 000c DF91      		pop r29
 298 000e CF91      		pop r28
 299               	.LVL25:
 113:quantum/quantum.c **** }
 300               		.loc 1 113 5 view .LVU73
 301 0010 0C94 0000 		jmp unregister_code16
 302               	.LVL26:
 113:quantum/quantum.c **** }
 303               		.loc 1 113 5 view .LVU74
 304               		.cfi_endproc
 305               	.LFE117:
 307               		.section	.text.process_action_kb,"ax",@progbits
 308               		.weak	process_action_kb
 310               	process_action_kb:
 311               	.LVL27:
 312               	.LFB118:
 115:quantum/quantum.c **** 
 116:quantum/quantum.c **** __attribute__((weak)) bool process_action_kb(keyrecord_t *record) { return true; }
 313               		.loc 1 116 67 is_stmt 1 view -0
 314               		.cfi_startproc
 315               	/* prologue: function */
 316               	/* frame size = 0 */
 317               	/* stack size = 0 */
 318               	.L__stack_usage = 0
 319               		.loc 1 116 69 view .LVU76
 320               		.loc 1 116 1 is_stmt 0 view .LVU77
 321 0000 81E0      		ldi r24,lo8(1)
 322               	.LVL28:
 323               	/* epilogue start */
 324               		.loc 1 116 1 view .LVU78
 325 0002 0895      		ret
 326               		.cfi_endproc
 327               	.LFE118:
 329               		.section	.text.process_record_user,"ax",@progbits
 330               		.weak	process_record_user
 332               	process_record_user:
 333               	.LVL29:
 334               	.LFB120:
 117:quantum/quantum.c **** 
 118:quantum/quantum.c **** __attribute__((weak)) bool process_record_kb(uint16_t keycode, keyrecord_t *record) { return proces
 119:quantum/quantum.c **** 
 120:quantum/quantum.c **** __attribute__((weak)) bool process_record_user(uint16_t keycode, keyrecord_t *record) { return true
 335               		.loc 1 120 87 is_stmt 1 view -0
 336               		.cfi_startproc
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 0 */
 340               	.L__stack_usage = 0
 341               		.loc 1 120 89 view .LVU80
 342               		.loc 1 120 1 is_stmt 0 view .LVU81
 343 0000 81E0      		ldi r24,lo8(1)
 344               	.LVL30:
 345               	/* epilogue start */
 346               		.loc 1 120 1 view .LVU82
 347 0002 0895      		ret
 348               		.cfi_endproc
 349               	.LFE120:
 351               		.section	.text.process_record_kb,"ax",@progbits
 352               		.weak	process_record_kb
 354               	process_record_kb:
 355               	.LVL31:
 356               	.LFB119:
 118:quantum/quantum.c **** 
 357               		.loc 1 118 85 is_stmt 1 view -0
 358               		.cfi_startproc
 359               	/* prologue: function */
 360               	/* frame size = 0 */
 361               	/* stack size = 0 */
 362               	.L__stack_usage = 0
 118:quantum/quantum.c **** 
 363               		.loc 1 118 87 view .LVU84
 118:quantum/quantum.c **** 
 364               		.loc 1 118 94 is_stmt 0 view .LVU85
 365 0000 0C94 0000 		jmp process_record_user
 366               	.LVL32:
 118:quantum/quantum.c **** 
 367               		.loc 1 118 94 view .LVU86
 368               		.cfi_endproc
 369               	.LFE119:
 371               		.section	.text.get_event_keycode,"ax",@progbits
 372               	.global	get_event_keycode
 374               	get_event_keycode:
 375               	.LFB123:
 121:quantum/quantum.c **** 
 122:quantum/quantum.c **** void reset_keyboard(void) {
 123:quantum/quantum.c ****     clear_keyboard();
 124:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 125:quantum/quantum.c ****     process_midi_all_notes_off();
 126:quantum/quantum.c **** #endif
 127:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 128:quantum/quantum.c **** #    ifndef NO_MUSIC_MODE
 129:quantum/quantum.c ****     music_all_notes_off();
 130:quantum/quantum.c **** #    endif
 131:quantum/quantum.c ****     uint16_t timer_start = timer_read();
 132:quantum/quantum.c ****     PLAY_SONG(goodbye_song);
 133:quantum/quantum.c ****     shutdown_user();
 134:quantum/quantum.c ****     while (timer_elapsed(timer_start) < 250) wait_ms(1);
 135:quantum/quantum.c ****     stop_all_notes();
 136:quantum/quantum.c **** #else
 137:quantum/quantum.c ****     shutdown_user();
 138:quantum/quantum.c ****     wait_ms(250);
 139:quantum/quantum.c **** #endif
 140:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 141:quantum/quantum.c ****     haptic_shutdown();
 142:quantum/quantum.c **** #endif
 143:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 144:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 145:quantum/quantum.c ****     *(uint16_t *)0x0800 = 0x7777;  // these two are a-star-specific
 146:quantum/quantum.c **** #endif
 147:quantum/quantum.c ****     bootloader_jump();
 148:quantum/quantum.c **** }
 149:quantum/quantum.c **** 
 150:quantum/quantum.c **** /* Convert record into usable keycode via the contained event. */
 151:quantum/quantum.c **** uint16_t get_record_keycode(keyrecord_t *record) { return get_event_keycode(record->event); }
 152:quantum/quantum.c **** 
 153:quantum/quantum.c **** /* Convert event into usable keycode. Checks the layer cache to ensure that it
 154:quantum/quantum.c ****  * retains the correct keycode after a layer change, if the key is still pressed.
 155:quantum/quantum.c ****  */
 156:quantum/quantum.c **** uint16_t get_event_keycode(keyevent_t event) {
 376               		.loc 1 156 46 is_stmt 1 view -0
 377               		.cfi_startproc
 378 0000 1F93      		push r17
 379               	.LCFI8:
 380               		.cfi_def_cfa_offset 3
 381               		.cfi_offset 17, -2
 382 0002 CF93      		push r28
 383               	.LCFI9:
 384               		.cfi_def_cfa_offset 4
 385               		.cfi_offset 28, -3
 386 0004 DF93      		push r29
 387               	.LCFI10:
 388               		.cfi_def_cfa_offset 5
 389               		.cfi_offset 29, -4
 390 0006 00D0      		rcall .
 391 0008 00D0      		rcall .
 392 000a 0F92      		push __tmp_reg__
 393               	.LCFI11:
 394               		.cfi_def_cfa_offset 10
 395 000c CDB7      		in r28,__SP_L__
 396 000e DEB7      		in r29,__SP_H__
 397               	.LCFI12:
 398               		.cfi_def_cfa_register 28
 399               	/* prologue: function */
 400               	/* frame size = 5 */
 401               	/* stack size = 8 */
 402               	.L__stack_usage = 8
 403 0010 4983      		std Y+1,r20
 404 0012 5A83      		std Y+2,r21
 405 0014 6B83      		std Y+3,r22
 157:quantum/quantum.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 158:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 159:quantum/quantum.c ****     if (!disable_action_cache) {
 406               		.loc 1 159 5 view .LVU88
 407               		.loc 1 159 8 is_stmt 0 view .LVU89
 408 0016 2091 0000 		lds r18,disable_action_cache
 409 001a 8981      		ldd r24,Y+1
 410 001c 9A81      		ldd r25,Y+2
 411 001e 2111      		cpse r18,__zero_reg__
 412 0020 00C0      		rjmp .L44
 413               	.LBB24:
 160:quantum/quantum.c ****         uint8_t layer;
 414               		.loc 1 160 9 is_stmt 1 view .LVU90
 161:quantum/quantum.c **** 
 162:quantum/quantum.c ****         if (event.pressed) {
 415               		.loc 1 162 9 view .LVU91
 416               		.loc 1 162 12 is_stmt 0 view .LVU92
 417 0022 6623      		tst r22
 418 0024 01F0      		breq .L45
 163:quantum/quantum.c ****             layer = layer_switch_get_layer(event.key);
 419               		.loc 1 163 13 is_stmt 1 view .LVU93
 420               		.loc 1 163 21 is_stmt 0 view .LVU94
 421 0026 0E94 0000 		call layer_switch_get_layer
 422               	.LVL33:
 423 002a 182F      		mov r17,r24
 424               	.LVL34:
 164:quantum/quantum.c ****             update_source_layers_cache(event.key, layer);
 425               		.loc 1 164 13 is_stmt 1 view .LVU95
 426 002c 682F      		mov r22,r24
 427 002e 8981      		ldd r24,Y+1
 428 0030 9A81      		ldd r25,Y+2
 429 0032 0E94 0000 		call update_source_layers_cache
 430               	.LVL35:
 431               	.L46:
 165:quantum/quantum.c ****         } else {
 166:quantum/quantum.c ****             layer = read_source_layers_cache(event.key);
 167:quantum/quantum.c ****         }
 168:quantum/quantum.c ****         return keymap_key_to_keycode(layer, event.key);
 432               		.loc 1 168 9 view .LVU96
 433               		.loc 1 168 16 is_stmt 0 view .LVU97
 434 0036 6981      		ldd r22,Y+1
 435 0038 7A81      		ldd r23,Y+2
 436 003a 812F      		mov r24,r17
 437               	.LVL36:
 438               	.L47:
 439               	/* epilogue start */
 440               		.loc 1 168 16 view .LVU98
 441               	.LBE24:
 169:quantum/quantum.c ****     } else
 170:quantum/quantum.c **** #endif
 171:quantum/quantum.c ****         return keymap_key_to_keycode(layer_switch_get_layer(event.key), event.key);
 172:quantum/quantum.c **** }
 442               		.loc 1 172 1 view .LVU99
 443 003c 0F90      		pop __tmp_reg__
 444 003e 0F90      		pop __tmp_reg__
 445 0040 0F90      		pop __tmp_reg__
 446 0042 0F90      		pop __tmp_reg__
 447 0044 0F90      		pop __tmp_reg__
 448 0046 DF91      		pop r29
 449 0048 CF91      		pop r28
 450 004a 1F91      		pop r17
 171:quantum/quantum.c **** }
 451               		.loc 1 171 16 view .LVU100
 452 004c 0C94 0000 		jmp keymap_key_to_keycode
 453               	.LVL37:
 454               	.L45:
 455               	.LBB25:
 166:quantum/quantum.c ****         }
 456               		.loc 1 166 13 is_stmt 1 view .LVU101
 166:quantum/quantum.c ****         }
 457               		.loc 1 166 21 is_stmt 0 view .LVU102
 458 0050 0E94 0000 		call read_source_layers_cache
 459               	.LVL38:
 460 0054 182F      		mov r17,r24
 461               	.LVL39:
 166:quantum/quantum.c ****         }
 462               		.loc 1 166 21 view .LVU103
 463 0056 00C0      		rjmp .L46
 464               	.LVL40:
 465               	.L44:
 166:quantum/quantum.c ****         }
 466               		.loc 1 166 21 view .LVU104
 467               	.LBE25:
 171:quantum/quantum.c **** }
 468               		.loc 1 171 9 is_stmt 1 view .LVU105
 171:quantum/quantum.c **** }
 469               		.loc 1 171 16 is_stmt 0 view .LVU106
 470 0058 0E94 0000 		call layer_switch_get_layer
 471               	.LVL41:
 472 005c 6981      		ldd r22,Y+1
 473 005e 7A81      		ldd r23,Y+2
 474 0060 00C0      		rjmp .L47
 475               		.cfi_endproc
 476               	.LFE123:
 478               		.section	.text.get_record_keycode,"ax",@progbits
 479               	.global	get_record_keycode
 481               	get_record_keycode:
 482               	.LVL42:
 483               	.LFB122:
 151:quantum/quantum.c **** 
 484               		.loc 1 151 50 is_stmt 1 view -0
 485               		.cfi_startproc
 486               	/* prologue: function */
 487               	/* frame size = 0 */
 488               	/* stack size = 0 */
 489               	.L__stack_usage = 0
 151:quantum/quantum.c **** 
 490               		.loc 1 151 50 is_stmt 0 view .LVU108
 491 0000 FC01      		movw r30,r24
 151:quantum/quantum.c **** 
 492               		.loc 1 151 52 is_stmt 1 view .LVU109
 151:quantum/quantum.c **** 
 493               		.loc 1 151 59 is_stmt 0 view .LVU110
 494 0002 4081      		ld r20,Z
 495 0004 5181      		ldd r21,Z+1
 496 0006 6281      		ldd r22,Z+2
 497 0008 7381      		ldd r23,Z+3
 498 000a 8481      		ldd r24,Z+4
 499               	.LVL43:
 151:quantum/quantum.c **** 
 500               		.loc 1 151 59 view .LVU111
 501 000c 0C94 0000 		jmp get_event_keycode
 502               	.LVL44:
 151:quantum/quantum.c **** 
 503               		.loc 1 151 59 view .LVU112
 504               		.cfi_endproc
 505               	.LFE122:
 507               		.section	.text.send_char,"ax",@progbits
 508               	.global	send_char
 510               	send_char:
 511               	.LVL45:
 512               	.LFB129:
 173:quantum/quantum.c **** 
 174:quantum/quantum.c **** /* Main keycode processing function. Hands off handling to other functions,
 175:quantum/quantum.c ****  * then processes internal Quantum keycodes, then processes ACTIONs.
 176:quantum/quantum.c ****  */
 177:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 178:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 179:quantum/quantum.c **** 
 180:quantum/quantum.c ****     // This is how you use actions here
 181:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 182:quantum/quantum.c ****     //   action_t action;
 183:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 184:quantum/quantum.c ****     //   process_action(record, action);
 185:quantum/quantum.c ****     //   return false;
 186:quantum/quantum.c ****     // }
 187:quantum/quantum.c **** 
 188:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 189:quantum/quantum.c ****     if (velocikey_enabled() && record->event.pressed) {
 190:quantum/quantum.c ****         velocikey_accelerate();
 191:quantum/quantum.c ****     }
 192:quantum/quantum.c **** #endif
 193:quantum/quantum.c **** 
 194:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 195:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 196:quantum/quantum.c **** #endif
 197:quantum/quantum.c **** 
 198:quantum/quantum.c ****     if (!(
 199:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 200:quantum/quantum.c ****             // Must run first to be able to mask key_up events.
 201:quantum/quantum.c ****             process_key_lock(&keycode, record) &&
 202:quantum/quantum.c **** #endif
 203:quantum/quantum.c **** #if defined(DYNAMIC_MACRO_ENABLE) && !defined(DYNAMIC_MACRO_USER_CALL)
 204:quantum/quantum.c ****             // Must run asap to ensure all keypresses are recorded.
 205:quantum/quantum.c ****             process_dynamic_macro(keycode, record) &&
 206:quantum/quantum.c **** #endif
 207:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 208:quantum/quantum.c ****             process_clicky(keycode, record) &&
 209:quantum/quantum.c **** #endif  // AUDIO_CLICKY
 210:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 211:quantum/quantum.c ****             process_haptic(keycode, record) &&
 212:quantum/quantum.c **** #endif  // HAPTIC_ENABLE
 213:quantum/quantum.c **** #if defined(RGB_MATRIX_ENABLE)
 214:quantum/quantum.c ****             process_rgb_matrix(keycode, record) &&
 215:quantum/quantum.c **** #endif
 216:quantum/quantum.c **** #if defined(VIA_ENABLE)
 217:quantum/quantum.c ****             process_record_via(keycode, record) &&
 218:quantum/quantum.c **** #endif
 219:quantum/quantum.c ****             process_record_kb(keycode, record) &&
 220:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 221:quantum/quantum.c ****             process_midi(keycode, record) &&
 222:quantum/quantum.c **** #endif
 223:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 224:quantum/quantum.c ****             process_audio(keycode, record) &&
 225:quantum/quantum.c **** #endif
 226:quantum/quantum.c **** #ifdef STENO_ENABLE
 227:quantum/quantum.c ****             process_steno(keycode, record) &&
 228:quantum/quantum.c **** #endif
 229:quantum/quantum.c **** #if (defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSIC_M
 230:quantum/quantum.c ****             process_music(keycode, record) &&
 231:quantum/quantum.c **** #endif
 232:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 233:quantum/quantum.c ****             process_tap_dance(keycode, record) &&
 234:quantum/quantum.c **** #endif
 235:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 236:quantum/quantum.c ****             process_unicode_common(keycode, record) &&
 237:quantum/quantum.c **** #endif
 238:quantum/quantum.c **** #ifdef LEADER_ENABLE
 239:quantum/quantum.c ****             process_leader(keycode, record) &&
 240:quantum/quantum.c **** #endif
 241:quantum/quantum.c **** #ifdef COMBO_ENABLE
 242:quantum/quantum.c ****             process_combo(keycode, record) &&
 243:quantum/quantum.c **** #endif
 244:quantum/quantum.c **** #ifdef PRINTING_ENABLE
 245:quantum/quantum.c ****             process_printer(keycode, record) &&
 246:quantum/quantum.c **** #endif
 247:quantum/quantum.c **** #ifdef AUTO_SHIFT_ENABLE
 248:quantum/quantum.c ****             process_auto_shift(keycode, record) &&
 249:quantum/quantum.c **** #endif
 250:quantum/quantum.c **** #ifdef TERMINAL_ENABLE
 251:quantum/quantum.c ****             process_terminal(keycode, record) &&
 252:quantum/quantum.c **** #endif
 253:quantum/quantum.c **** #ifdef SPACE_CADET_ENABLE
 254:quantum/quantum.c ****             process_space_cadet(keycode, record) &&
 255:quantum/quantum.c **** #endif
 256:quantum/quantum.c **** #ifdef MAGIC_KEYCODE_ENABLE
 257:quantum/quantum.c ****             process_magic(keycode, record) &&
 258:quantum/quantum.c **** #endif
 259:quantum/quantum.c **** #ifdef GRAVE_ESC_ENABLE
 260:quantum/quantum.c ****             process_grave_esc(keycode, record) &&
 261:quantum/quantum.c **** #endif
 262:quantum/quantum.c **** #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 263:quantum/quantum.c ****             process_rgb(keycode, record) &&
 264:quantum/quantum.c **** #endif
 265:quantum/quantum.c ****             true)) {
 266:quantum/quantum.c ****         return false;
 267:quantum/quantum.c ****     }
 268:quantum/quantum.c **** 
 269:quantum/quantum.c ****     if (record->event.pressed) {
 270:quantum/quantum.c ****         switch (keycode) {
 271:quantum/quantum.c ****             case RESET:
 272:quantum/quantum.c ****                 reset_keyboard();
 273:quantum/quantum.c ****                 return false;
 274:quantum/quantum.c **** #ifndef NO_DEBUG
 275:quantum/quantum.c ****             case DEBUG:
 276:quantum/quantum.c ****                 debug_enable ^= 1;
 277:quantum/quantum.c ****                 if (debug_enable) {
 278:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 279:quantum/quantum.c ****                 } else {
 280:quantum/quantum.c ****                     print("DEBUG: disabled.\n");
 281:quantum/quantum.c ****                 }
 282:quantum/quantum.c **** #endif
 283:quantum/quantum.c ****                 return false;
 284:quantum/quantum.c ****             case EEPROM_RESET:
 285:quantum/quantum.c ****                 eeconfig_init();
 286:quantum/quantum.c ****                 return false;
 287:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
 288:quantum/quantum.c ****             case FC_TOG:
 289:quantum/quantum.c ****                 FAUXCLICKY_TOGGLE;
 290:quantum/quantum.c ****                 return false;
 291:quantum/quantum.c ****             case FC_ON:
 292:quantum/quantum.c ****                 FAUXCLICKY_ON;
 293:quantum/quantum.c ****                 return false;
 294:quantum/quantum.c ****             case FC_OFF:
 295:quantum/quantum.c ****                 FAUXCLICKY_OFF;
 296:quantum/quantum.c ****                 return false;
 297:quantum/quantum.c **** #endif
 298:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 299:quantum/quantum.c ****             case VLK_TOG:
 300:quantum/quantum.c ****                 velocikey_toggle();
 301:quantum/quantum.c ****                 return false;
 302:quantum/quantum.c **** #endif
 303:quantum/quantum.c **** #ifdef BLUETOOTH_ENABLE
 304:quantum/quantum.c ****             case OUT_AUTO:
 305:quantum/quantum.c ****                 set_output(OUTPUT_AUTO);
 306:quantum/quantum.c ****                 return false;
 307:quantum/quantum.c ****             case OUT_USB:
 308:quantum/quantum.c ****                 set_output(OUTPUT_USB);
 309:quantum/quantum.c ****                 return false;
 310:quantum/quantum.c ****             case OUT_BT:
 311:quantum/quantum.c ****                 set_output(OUTPUT_BLUETOOTH);
 312:quantum/quantum.c ****                 return false;
 313:quantum/quantum.c **** #endif
 314:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 315:quantum/quantum.c ****             case BL_BRTG:
 316:quantum/quantum.c ****                 backlight_toggle_breathing();
 317:quantum/quantum.c ****                 return false;
 318:quantum/quantum.c **** #endif
 319:quantum/quantum.c ****         }
 320:quantum/quantum.c ****     }
 321:quantum/quantum.c **** 
 322:quantum/quantum.c ****     return process_action_kb(record);
 323:quantum/quantum.c **** }
 324:quantum/quantum.c **** 
 325:quantum/quantum.c **** __attribute__((weak)) const bool ascii_to_shift_lut[128] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 326:quantum/quantum.c **** 
 327:quantum/quantum.c ****                                                                     0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1
 328:quantum/quantum.c **** 
 329:quantum/quantum.c **** __attribute__((weak)) const bool ascii_to_altgr_lut[128] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 330:quantum/quantum.c **** 
 331:quantum/quantum.c ****                                                                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 332:quantum/quantum.c **** 
 333:quantum/quantum.c **** // clang-format off
 334:quantum/quantum.c **** __attribute__((weak)) const uint8_t ascii_to_keycode_lut[128] PROGMEM = {// NUL   SOH      STX     
 335:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 336:quantum/quantum.c ****                                                                          // BS    TAB      LF      
 337:quantum/quantum.c ****                                                                          KC_BSPC, KC_TAB, KC_ENT, X
 338:quantum/quantum.c ****                                                                          // DLE   DC1      DC2     
 339:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 340:quantum/quantum.c ****                                                                          // CAN   EM       SUB     
 341:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 342:quantum/quantum.c **** 
 343:quantum/quantum.c ****                                                                          //       !        "       
 344:quantum/quantum.c ****                                                                          KC_SPC, KC_1, KC_QUOT, KC_
 345:quantum/quantum.c ****                                                                          // (     )        *       
 346:quantum/quantum.c ****                                                                          KC_9, KC_0, KC_8, KC_EQL, 
 347:quantum/quantum.c ****                                                                          // 0     1        2       
 348:quantum/quantum.c ****                                                                          KC_0, KC_1, KC_2, KC_3, KC
 349:quantum/quantum.c ****                                                                          // 8     9        :       
 350:quantum/quantum.c ****                                                                          KC_8, KC_9, KC_SCLN, KC_SC
 351:quantum/quantum.c ****                                                                          // @     A        B       
 352:quantum/quantum.c ****                                                                          KC_2, KC_A, KC_B, KC_C, KC
 353:quantum/quantum.c ****                                                                          // H     I        J       
 354:quantum/quantum.c ****                                                                          KC_H, KC_I, KC_J, KC_K, KC
 355:quantum/quantum.c ****                                                                          // P     Q        R       
 356:quantum/quantum.c ****                                                                          KC_P, KC_Q, KC_R, KC_S, KC
 357:quantum/quantum.c ****                                                                          // X     Y        Z       
 358:quantum/quantum.c ****                                                                          KC_X, KC_Y, KC_Z, KC_LBRC,
 359:quantum/quantum.c ****                                                                          // `     a        b       
 360:quantum/quantum.c ****                                                                          KC_GRV, KC_A, KC_B, KC_C, 
 361:quantum/quantum.c ****                                                                          // h     i        j       
 362:quantum/quantum.c ****                                                                          KC_H, KC_I, KC_J, KC_K, KC
 363:quantum/quantum.c ****                                                                          // p     q        r       
 364:quantum/quantum.c ****                                                                          KC_P, KC_Q, KC_R, KC_S, KC
 365:quantum/quantum.c ****                                                                          // x     y        z       
 366:quantum/quantum.c ****                                                                          KC_X, KC_Y, KC_Z, KC_LBRC,
 367:quantum/quantum.c **** // clang-format on
 368:quantum/quantum.c **** 
 369:quantum/quantum.c **** void send_string(const char *str) { send_string_with_delay(str, 0); }
 370:quantum/quantum.c **** 
 371:quantum/quantum.c **** void send_string_P(const char *str) { send_string_with_delay_P(str, 0); }
 372:quantum/quantum.c **** 
 373:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 374:quantum/quantum.c ****     while (1) {
 375:quantum/quantum.c ****         char ascii_code = *str;
 376:quantum/quantum.c ****         if (!ascii_code) break;
 377:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 378:quantum/quantum.c ****             // tap
 379:quantum/quantum.c ****             uint8_t keycode = *(++str);
 380:quantum/quantum.c ****             register_code(keycode);
 381:quantum/quantum.c ****             unregister_code(keycode);
 382:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 383:quantum/quantum.c ****             // down
 384:quantum/quantum.c ****             uint8_t keycode = *(++str);
 385:quantum/quantum.c ****             register_code(keycode);
 386:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 387:quantum/quantum.c ****             // up
 388:quantum/quantum.c ****             uint8_t keycode = *(++str);
 389:quantum/quantum.c ****             unregister_code(keycode);
 390:quantum/quantum.c ****         } else {
 391:quantum/quantum.c ****             send_char(ascii_code);
 392:quantum/quantum.c ****         }
 393:quantum/quantum.c ****         ++str;
 394:quantum/quantum.c ****         // interval
 395:quantum/quantum.c ****         {
 396:quantum/quantum.c ****             uint8_t ms = interval;
 397:quantum/quantum.c ****             while (ms--) wait_ms(1);
 398:quantum/quantum.c ****         }
 399:quantum/quantum.c ****     }
 400:quantum/quantum.c **** }
 401:quantum/quantum.c **** 
 402:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 403:quantum/quantum.c ****     while (1) {
 404:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 405:quantum/quantum.c ****         if (!ascii_code) break;
 406:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 407:quantum/quantum.c ****             // tap
 408:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 409:quantum/quantum.c ****             register_code(keycode);
 410:quantum/quantum.c ****             unregister_code(keycode);
 411:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 412:quantum/quantum.c ****             // down
 413:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 414:quantum/quantum.c ****             register_code(keycode);
 415:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 416:quantum/quantum.c ****             // up
 417:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 418:quantum/quantum.c ****             unregister_code(keycode);
 419:quantum/quantum.c ****         } else {
 420:quantum/quantum.c ****             send_char(ascii_code);
 421:quantum/quantum.c ****         }
 422:quantum/quantum.c ****         ++str;
 423:quantum/quantum.c ****         // interval
 424:quantum/quantum.c ****         {
 425:quantum/quantum.c ****             uint8_t ms = interval;
 426:quantum/quantum.c ****             while (ms--) wait_ms(1);
 427:quantum/quantum.c ****         }
 428:quantum/quantum.c ****     }
 429:quantum/quantum.c **** }
 430:quantum/quantum.c **** 
 431:quantum/quantum.c **** void send_char(char ascii_code) {
 513               		.loc 1 431 33 is_stmt 1 view -0
 514               		.cfi_startproc
 515               		.loc 1 431 33 is_stmt 0 view .LVU114
 516 0000 1F93      		push r17
 517               	.LCFI13:
 518               		.cfi_def_cfa_offset 3
 519               		.cfi_offset 17, -2
 520 0002 CF93      		push r28
 521               	.LCFI14:
 522               		.cfi_def_cfa_offset 4
 523               		.cfi_offset 28, -3
 524 0004 DF93      		push r29
 525               	.LCFI15:
 526               		.cfi_def_cfa_offset 5
 527               		.cfi_offset 29, -4
 528               	/* prologue: function */
 529               	/* frame size = 0 */
 530               	/* stack size = 3 */
 531               	.L__stack_usage = 3
 432:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(SENDSTRING_BELL)
 433:quantum/quantum.c ****     if (ascii_code == '\a') {  // BEL
 434:quantum/quantum.c ****         PLAY_SONG(bell_song);
 435:quantum/quantum.c ****         return;
 436:quantum/quantum.c ****     }
 437:quantum/quantum.c **** #endif
 438:quantum/quantum.c **** 
 439:quantum/quantum.c ****     uint8_t keycode    = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 532               		.loc 1 439 5 is_stmt 1 view .LVU115
 533               	.LBB26:
 534               		.loc 1 439 26 view .LVU116
 535 0006 90E0      		ldi r25,0
 536               	.LVL46:
 537               		.loc 1 439 26 view .LVU117
 538               		.loc 1 439 26 view .LVU118
 539 0008 FC01      		movw r30,r24
 540 000a E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 541 000c F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 542               	.LVL47:
 543               		.loc 1 439 26 is_stmt 0 view .LVU119
 544               	/* #APP */
 545               	 ;  439 "quantum/quantum.c" 1
 546 000e 1491      		lpm r17, Z
 547               		
 548               	 ;  0 "" 2
 549               	.LVL48:
 550               		.loc 1 439 26 is_stmt 1 view .LVU120
 551               		.loc 1 439 26 is_stmt 0 view .LVU121
 552               	/* #NOAPP */
 553               	.LBE26:
 440:quantum/quantum.c ****     bool    is_shifted = pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code]);
 554               		.loc 1 440 5 is_stmt 1 view .LVU122
 555               	.LBB27:
 556               		.loc 1 440 26 view .LVU123
 557               		.loc 1 440 26 view .LVU124
 558               		.loc 1 440 26 view .LVU125
 559 0010 FC01      		movw r30,r24
 560               	.LVL49:
 561               		.loc 1 440 26 is_stmt 0 view .LVU126
 562 0012 E050      		subi r30,lo8(-(ascii_to_shift_lut))
 563 0014 F040      		sbci r31,hi8(-(ascii_to_shift_lut))
 564               	.LVL50:
 565               		.loc 1 440 26 view .LVU127
 566               	/* #APP */
 567               	 ;  440 "quantum/quantum.c" 1
 568 0016 D491      		lpm r29, Z
 569               		
 570               	 ;  0 "" 2
 571               	.LVL51:
 572               		.loc 1 440 26 is_stmt 1 view .LVU128
 573               		.loc 1 440 26 is_stmt 0 view .LVU129
 574               	/* #NOAPP */
 575               	.LBE27:
 441:quantum/quantum.c ****     bool    is_altgred = pgm_read_byte(&ascii_to_altgr_lut[(uint8_t)ascii_code]);
 576               		.loc 1 441 5 is_stmt 1 view .LVU130
 577               	.LBB28:
 578               		.loc 1 441 26 view .LVU131
 579               		.loc 1 441 26 view .LVU132
 580               		.loc 1 441 26 view .LVU133
 581 0018 8050      		subi r24,lo8(-(ascii_to_altgr_lut))
 582 001a 9040      		sbci r25,hi8(-(ascii_to_altgr_lut))
 583               	.LVL52:
 584               		.loc 1 441 26 is_stmt 0 view .LVU134
 585 001c FC01      		movw r30,r24
 586               	.LVL53:
 587               		.loc 1 441 26 view .LVU135
 588               	/* #APP */
 589               	 ;  441 "quantum/quantum.c" 1
 590 001e C491      		lpm r28, Z
 591               		
 592               	 ;  0 "" 2
 593               	.LVL54:
 594               		.loc 1 441 26 is_stmt 1 view .LVU136
 595               		.loc 1 441 26 is_stmt 0 view .LVU137
 596               	/* #NOAPP */
 597               	.LBE28:
 442:quantum/quantum.c **** 
 443:quantum/quantum.c ****     if (is_shifted) {
 598               		.loc 1 443 5 is_stmt 1 view .LVU138
 599               		.loc 1 443 8 is_stmt 0 view .LVU139
 600 0020 DD23      		tst r29
 601 0022 01F0      		breq .L50
 444:quantum/quantum.c ****         register_code(KC_LSFT);
 602               		.loc 1 444 9 is_stmt 1 view .LVU140
 603 0024 81EE      		ldi r24,lo8(-31)
 604               	.LVL55:
 605               		.loc 1 444 9 is_stmt 0 view .LVU141
 606 0026 0E94 0000 		call register_code
 607               	.LVL56:
 608               	.L50:
 445:quantum/quantum.c ****     }
 446:quantum/quantum.c ****     if (is_altgred) {
 609               		.loc 1 446 5 is_stmt 1 view .LVU142
 610               		.loc 1 446 8 is_stmt 0 view .LVU143
 611 002a CC23      		tst r28
 612 002c 01F0      		breq .L51
 447:quantum/quantum.c ****         register_code(KC_RALT);
 613               		.loc 1 447 9 is_stmt 1 view .LVU144
 614 002e 86EE      		ldi r24,lo8(-26)
 615 0030 0E94 0000 		call register_code
 616               	.LVL57:
 617               	.L51:
 448:quantum/quantum.c ****     }
 449:quantum/quantum.c ****     tap_code(keycode);
 618               		.loc 1 449 5 view .LVU145
 619 0034 812F      		mov r24,r17
 620 0036 0E94 0000 		call tap_code
 621               	.LVL58:
 450:quantum/quantum.c ****     if (is_altgred) {
 622               		.loc 1 450 5 view .LVU146
 623               		.loc 1 450 8 is_stmt 0 view .LVU147
 624 003a CC23      		tst r28
 625 003c 01F0      		breq .L52
 451:quantum/quantum.c ****         unregister_code(KC_RALT);
 626               		.loc 1 451 9 is_stmt 1 view .LVU148
 627 003e 86EE      		ldi r24,lo8(-26)
 628 0040 0E94 0000 		call unregister_code
 629               	.LVL59:
 630               	.L52:
 452:quantum/quantum.c ****     }
 453:quantum/quantum.c ****     if (is_shifted) {
 631               		.loc 1 453 5 view .LVU149
 632               		.loc 1 453 8 is_stmt 0 view .LVU150
 633 0044 DD23      		tst r29
 634 0046 01F0      		breq .L49
 454:quantum/quantum.c ****         unregister_code(KC_LSFT);
 635               		.loc 1 454 9 is_stmt 1 view .LVU151
 636 0048 81EE      		ldi r24,lo8(-31)
 637               	/* epilogue start */
 455:quantum/quantum.c ****     }
 456:quantum/quantum.c **** }
 638               		.loc 1 456 1 is_stmt 0 view .LVU152
 639 004a DF91      		pop r29
 640               	.LVL60:
 641               		.loc 1 456 1 view .LVU153
 642 004c CF91      		pop r28
 643               	.LVL61:
 644               		.loc 1 456 1 view .LVU154
 645 004e 1F91      		pop r17
 646               	.LVL62:
 454:quantum/quantum.c ****         unregister_code(KC_LSFT);
 647               		.loc 1 454 9 view .LVU155
 648 0050 0C94 0000 		jmp unregister_code
 649               	.LVL63:
 650               	.L49:
 651               	/* epilogue start */
 652               		.loc 1 456 1 view .LVU156
 653 0054 DF91      		pop r29
 654               	.LVL64:
 655               		.loc 1 456 1 view .LVU157
 656 0056 CF91      		pop r28
 657               	.LVL65:
 658               		.loc 1 456 1 view .LVU158
 659 0058 1F91      		pop r17
 660               	.LVL66:
 661               		.loc 1 456 1 view .LVU159
 662 005a 0895      		ret
 663               		.cfi_endproc
 664               	.LFE129:
 666               		.section	.text.send_string_with_delay,"ax",@progbits
 667               	.global	send_string_with_delay
 669               	send_string_with_delay:
 670               	.LVL67:
 671               	.LFB127:
 373:quantum/quantum.c ****     while (1) {
 672               		.loc 1 373 64 is_stmt 1 view -0
 673               		.cfi_startproc
 373:quantum/quantum.c ****     while (1) {
 674               		.loc 1 373 64 is_stmt 0 view .LVU161
 675 0000 FF92      		push r15
 676               	.LCFI16:
 677               		.cfi_def_cfa_offset 3
 678               		.cfi_offset 15, -2
 679 0002 0F93      		push r16
 680               	.LCFI17:
 681               		.cfi_def_cfa_offset 4
 682               		.cfi_offset 16, -3
 683 0004 1F93      		push r17
 684               	.LCFI18:
 685               		.cfi_def_cfa_offset 5
 686               		.cfi_offset 17, -4
 687 0006 CF93      		push r28
 688               	.LCFI19:
 689               		.cfi_def_cfa_offset 6
 690               		.cfi_offset 28, -5
 691 0008 DF93      		push r29
 692               	.LCFI20:
 693               		.cfi_def_cfa_offset 7
 694               		.cfi_offset 29, -6
 695               	/* prologue: function */
 696               	/* frame size = 0 */
 697               	/* stack size = 5 */
 698               	.L__stack_usage = 5
 699 000a EC01      		movw r28,r24
 700 000c F62E      		mov r15,r22
 701               	.LVL68:
 702               	.L71:
 374:quantum/quantum.c ****         char ascii_code = *str;
 703               		.loc 1 374 5 is_stmt 1 view .LVU162
 704               	.LBB29:
 375:quantum/quantum.c ****         if (!ascii_code) break;
 705               		.loc 1 375 9 view .LVU163
 375:quantum/quantum.c ****         if (!ascii_code) break;
 706               		.loc 1 375 14 is_stmt 0 view .LVU164
 707 000e 8881      		ld r24,Y
 708               	.LVL69:
 376:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 709               		.loc 1 376 9 is_stmt 1 view .LVU165
 376:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 710               		.loc 1 376 12 is_stmt 0 view .LVU166
 711 0010 8823      		tst r24
 712 0012 01F0      		breq .L63
 377:quantum/quantum.c ****             // tap
 713               		.loc 1 377 9 is_stmt 1 view .LVU167
 714 0014 8E01      		movw r16,r28
 715 0016 0F5F      		subi r16,-1
 716 0018 1F4F      		sbci r17,-1
 377:quantum/quantum.c ****             // tap
 717               		.loc 1 377 12 is_stmt 0 view .LVU168
 718 001a 8130      		cpi r24,lo8(1)
 719 001c 01F4      		brne .L65
 720               	.LBB30:
 379:quantum/quantum.c ****             register_code(keycode);
 721               		.loc 1 379 13 is_stmt 1 view .LVU169
 722               	.LVL70:
 379:quantum/quantum.c ****             register_code(keycode);
 723               		.loc 1 379 21 is_stmt 0 view .LVU170
 724 001e C981      		ldd r28,Y+1
 725               	.LVL71:
 380:quantum/quantum.c ****             unregister_code(keycode);
 726               		.loc 1 380 13 is_stmt 1 view .LVU171
 727 0020 8C2F      		mov r24,r28
 728               	.LVL72:
 380:quantum/quantum.c ****             unregister_code(keycode);
 729               		.loc 1 380 13 is_stmt 0 view .LVU172
 730 0022 0E94 0000 		call register_code
 731               	.LVL73:
 381:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 732               		.loc 1 381 13 is_stmt 1 view .LVU173
 733 0026 8C2F      		mov r24,r28
 734               	.LVL74:
 735               	.L72:
 381:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 736               		.loc 1 381 13 is_stmt 0 view .LVU174
 737               	.LBE30:
 738               	.LBB31:
 389:quantum/quantum.c ****         } else {
 739               		.loc 1 389 13 view .LVU175
 740 0028 0E94 0000 		call unregister_code
 741               	.LVL75:
 742               	.LBE31:
 743 002c 00C0      		rjmp .L66
 744               	.LVL76:
 745               	.L65:
 382:quantum/quantum.c ****             // down
 746               		.loc 1 382 16 is_stmt 1 view .LVU176
 382:quantum/quantum.c ****             // down
 747               		.loc 1 382 19 is_stmt 0 view .LVU177
 748 002e 8230      		cpi r24,lo8(2)
 749 0030 01F4      		brne .L67
 750               	.LBB32:
 384:quantum/quantum.c ****             register_code(keycode);
 751               		.loc 1 384 13 is_stmt 1 view .LVU178
 752               	.LVL77:
 385:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 753               		.loc 1 385 13 view .LVU179
 754 0032 8981      		ldd r24,Y+1
 755               	.LVL78:
 385:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 756               		.loc 1 385 13 is_stmt 0 view .LVU180
 757 0034 0E94 0000 		call register_code
 758               	.LVL79:
 759               	.L66:
 385:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 760               		.loc 1 385 13 view .LVU181
 761               	.LBE32:
 393:quantum/quantum.c ****         // interval
 762               		.loc 1 393 9 is_stmt 1 view .LVU182
 763 0038 E801      		movw r28,r16
 764 003a 2196      		adiw r28,1
 765               	.LVL80:
 766               	.LBB33:
 396:quantum/quantum.c ****             while (ms--) wait_ms(1);
 767               		.loc 1 396 13 view .LVU183
 397:quantum/quantum.c ****         }
 768               		.loc 1 397 13 view .LVU184
 396:quantum/quantum.c ****             while (ms--) wait_ms(1);
 769               		.loc 1 396 21 is_stmt 0 view .LVU185
 770 003c 8F2D      		mov r24,r15
 771               	.LVL81:
 772               	.L69:
 397:quantum/quantum.c ****         }
 773               		.loc 1 397 22 discriminator 1 view .LVU186
 774               	.LVL82:
 775 003e 8150      		subi r24,1
 776 0040 00F0      		brcs .L71
 397:quantum/quantum.c ****         }
 777               		.loc 1 397 26 is_stmt 1 view .LVU187
 778               	.LBB34:
 779               	.LBI34:
 780               		.file 2 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
   1:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 781               		.loc 2 166 1 view .LVU188
 782               	.LBB35:
 167:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 783               		.loc 2 168 2 view .LVU189
 169:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 784               		.loc 2 172 2 view .LVU190
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 785               		.loc 2 173 2 view .LVU191
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 786               		.loc 2 174 2 view .LVU192
 175:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 787               		.loc 2 184 3 view .LVU193
 185:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 788               		.loc 2 187 2 view .LVU194
 789 0042 EFE9      		ldi r30,lo8(3999)
 790 0044 FFE0      		ldi r31,hi8(3999)
 791 0046 3197      	1:	sbiw r30,1
 792 0048 01F4      		brne 1b
 793 004a 00C0      		rjmp .
 794 004c 0000      		nop
 795 004e 00C0      		rjmp .L69
 796               	.LVL83:
 797               	.L67:
 798               		.loc 2 187 2 is_stmt 0 view .LVU195
 799               	.LBE35:
 800               	.LBE34:
 801               	.LBE33:
 386:quantum/quantum.c ****             // up
 802               		.loc 1 386 16 is_stmt 1 view .LVU196
 386:quantum/quantum.c ****             // up
 803               		.loc 1 386 19 is_stmt 0 view .LVU197
 804 0050 8330      		cpi r24,lo8(3)
 805 0052 01F4      		brne .L68
 806               	.LBB36:
 388:quantum/quantum.c ****             unregister_code(keycode);
 807               		.loc 1 388 13 is_stmt 1 view .LVU198
 808               	.LVL84:
 389:quantum/quantum.c ****         } else {
 809               		.loc 1 389 13 view .LVU199
 810 0054 8981      		ldd r24,Y+1
 811               	.LVL85:
 389:quantum/quantum.c ****         } else {
 812               		.loc 1 389 13 is_stmt 0 view .LVU200
 813 0056 00C0      		rjmp .L72
 814               	.LVL86:
 815               	.L68:
 389:quantum/quantum.c ****         } else {
 816               		.loc 1 389 13 view .LVU201
 817               	.LBE36:
 391:quantum/quantum.c ****         }
 818               		.loc 1 391 13 is_stmt 1 view .LVU202
 819 0058 0E94 0000 		call send_char
 820               	.LVL87:
 391:quantum/quantum.c ****         }
 821               		.loc 1 391 13 is_stmt 0 view .LVU203
 822 005c 8E01      		movw r16,r28
 823 005e 00C0      		rjmp .L66
 824               	.LVL88:
 825               	.L63:
 826               	/* epilogue start */
 391:quantum/quantum.c ****         }
 827               		.loc 1 391 13 view .LVU204
 828               	.LBE29:
 400:quantum/quantum.c **** 
 829               		.loc 1 400 1 view .LVU205
 830 0060 DF91      		pop r29
 831 0062 CF91      		pop r28
 832               	.LVL89:
 400:quantum/quantum.c **** 
 833               		.loc 1 400 1 view .LVU206
 834 0064 1F91      		pop r17
 835 0066 0F91      		pop r16
 836 0068 FF90      		pop r15
 837               	.LVL90:
 400:quantum/quantum.c **** 
 838               		.loc 1 400 1 view .LVU207
 839 006a 0895      		ret
 840               		.cfi_endproc
 841               	.LFE127:
 843               		.section	.text.send_string,"ax",@progbits
 844               	.global	send_string
 846               	send_string:
 847               	.LVL91:
 848               	.LFB125:
 369:quantum/quantum.c **** 
 849               		.loc 1 369 35 is_stmt 1 view -0
 850               		.cfi_startproc
 851               	/* prologue: function */
 852               	/* frame size = 0 */
 853               	/* stack size = 0 */
 854               	.L__stack_usage = 0
 369:quantum/quantum.c **** 
 855               		.loc 1 369 37 view .LVU209
 856 0000 60E0      		ldi r22,0
 857 0002 0C94 0000 		jmp send_string_with_delay
 858               	.LVL92:
 369:quantum/quantum.c **** 
 859               		.loc 1 369 37 is_stmt 0 view .LVU210
 860               		.cfi_endproc
 861               	.LFE125:
 863               		.section	.text.send_string_with_delay_P,"ax",@progbits
 864               	.global	send_string_with_delay_P
 866               	send_string_with_delay_P:
 867               	.LVL93:
 868               	.LFB128:
 402:quantum/quantum.c ****     while (1) {
 869               		.loc 1 402 66 is_stmt 1 view -0
 870               		.cfi_startproc
 402:quantum/quantum.c ****     while (1) {
 871               		.loc 1 402 66 is_stmt 0 view .LVU212
 872 0000 FF92      		push r15
 873               	.LCFI21:
 874               		.cfi_def_cfa_offset 3
 875               		.cfi_offset 15, -2
 876 0002 0F93      		push r16
 877               	.LCFI22:
 878               		.cfi_def_cfa_offset 4
 879               		.cfi_offset 16, -3
 880 0004 1F93      		push r17
 881               	.LCFI23:
 882               		.cfi_def_cfa_offset 5
 883               		.cfi_offset 17, -4
 884 0006 CF93      		push r28
 885               	.LCFI24:
 886               		.cfi_def_cfa_offset 6
 887               		.cfi_offset 28, -5
 888 0008 DF93      		push r29
 889               	.LCFI25:
 890               		.cfi_def_cfa_offset 7
 891               		.cfi_offset 29, -6
 892               	/* prologue: function */
 893               	/* frame size = 0 */
 894               	/* stack size = 5 */
 895               	.L__stack_usage = 5
 896 000a 8C01      		movw r16,r24
 897 000c F62E      		mov r15,r22
 898               	.LVL94:
 899               	.L82:
 403:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 900               		.loc 1 403 5 is_stmt 1 view .LVU213
 901               	.LBB37:
 404:quantum/quantum.c ****         if (!ascii_code) break;
 902               		.loc 1 404 9 view .LVU214
 903               	.LBB38:
 404:quantum/quantum.c ****         if (!ascii_code) break;
 904               		.loc 1 404 27 view .LVU215
 404:quantum/quantum.c ****         if (!ascii_code) break;
 905               		.loc 1 404 27 view .LVU216
 404:quantum/quantum.c ****         if (!ascii_code) break;
 906               		.loc 1 404 27 view .LVU217
 907 000e F801      		movw r30,r16
 908               	/* #APP */
 909               	 ;  404 "quantum/quantum.c" 1
 910 0010 8491      		lpm r24, Z
 911               		
 912               	 ;  0 "" 2
 913               	.LVL95:
 404:quantum/quantum.c ****         if (!ascii_code) break;
 914               		.loc 1 404 27 view .LVU218
 404:quantum/quantum.c ****         if (!ascii_code) break;
 915               		.loc 1 404 27 is_stmt 0 view .LVU219
 916               	/* #NOAPP */
 917               	.LBE38:
 405:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 918               		.loc 1 405 9 is_stmt 1 view .LVU220
 405:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 919               		.loc 1 405 12 is_stmt 0 view .LVU221
 920 0012 8823      		tst r24
 921 0014 01F0      		breq .L74
 406:quantum/quantum.c ****             // tap
 922               		.loc 1 406 9 is_stmt 1 view .LVU222
 923 0016 E801      		movw r28,r16
 924 0018 2196      		adiw r28,1
 406:quantum/quantum.c ****             // tap
 925               		.loc 1 406 12 is_stmt 0 view .LVU223
 926 001a 8130      		cpi r24,lo8(1)
 927 001c 01F4      		brne .L76
 928               	.LBB39:
 408:quantum/quantum.c ****             register_code(keycode);
 929               		.loc 1 408 13 is_stmt 1 view .LVU224
 930               	.LBB40:
 408:quantum/quantum.c ****             register_code(keycode);
 931               		.loc 1 408 31 view .LVU225
 932               	.LVL96:
 408:quantum/quantum.c ****             register_code(keycode);
 933               		.loc 1 408 31 view .LVU226
 408:quantum/quantum.c ****             register_code(keycode);
 934               		.loc 1 408 31 view .LVU227
 935 001e FE01      		movw r30,r28
 936               	/* #APP */
 937               	 ;  408 "quantum/quantum.c" 1
 938 0020 1491      		lpm r17, Z
 939               		
 940               	 ;  0 "" 2
 941               	.LVL97:
 408:quantum/quantum.c ****             register_code(keycode);
 942               		.loc 1 408 31 view .LVU228
 408:quantum/quantum.c ****             register_code(keycode);
 943               		.loc 1 408 31 is_stmt 0 view .LVU229
 944               	/* #NOAPP */
 945               	.LBE40:
 409:quantum/quantum.c ****             unregister_code(keycode);
 946               		.loc 1 409 13 is_stmt 1 view .LVU230
 947 0022 812F      		mov r24,r17
 948               	.LVL98:
 409:quantum/quantum.c ****             unregister_code(keycode);
 949               		.loc 1 409 13 is_stmt 0 view .LVU231
 950 0024 0E94 0000 		call register_code
 951               	.LVL99:
 410:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 952               		.loc 1 410 13 is_stmt 1 view .LVU232
 953 0028 812F      		mov r24,r17
 954               	.LVL100:
 955               	.L83:
 410:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 956               		.loc 1 410 13 is_stmt 0 view .LVU233
 957               	.LBE39:
 958               	.LBB41:
 959               	.LBB42:
 417:quantum/quantum.c ****             unregister_code(keycode);
 960               		.loc 1 417 31 is_stmt 1 view .LVU234
 417:quantum/quantum.c ****             unregister_code(keycode);
 961               		.loc 1 417 31 is_stmt 0 view .LVU235
 962               	.LBE42:
 418:quantum/quantum.c ****         } else {
 963               		.loc 1 418 13 is_stmt 1 view .LVU236
 964 002a 0E94 0000 		call unregister_code
 965               	.LVL101:
 418:quantum/quantum.c ****         } else {
 966               		.loc 1 418 13 is_stmt 0 view .LVU237
 967               	.LBE41:
 968 002e 00C0      		rjmp .L77
 969               	.LVL102:
 970               	.L76:
 411:quantum/quantum.c ****             // down
 971               		.loc 1 411 16 is_stmt 1 view .LVU238
 411:quantum/quantum.c ****             // down
 972               		.loc 1 411 19 is_stmt 0 view .LVU239
 973 0030 8230      		cpi r24,lo8(2)
 974 0032 01F4      		brne .L78
 975               	.LBB44:
 413:quantum/quantum.c ****             register_code(keycode);
 976               		.loc 1 413 13 is_stmt 1 view .LVU240
 977               	.LBB45:
 413:quantum/quantum.c ****             register_code(keycode);
 978               		.loc 1 413 31 view .LVU241
 979               	.LVL103:
 413:quantum/quantum.c ****             register_code(keycode);
 980               		.loc 1 413 31 view .LVU242
 413:quantum/quantum.c ****             register_code(keycode);
 981               		.loc 1 413 31 view .LVU243
 982 0034 FE01      		movw r30,r28
 983               	/* #APP */
 984               	 ;  413 "quantum/quantum.c" 1
 985 0036 8491      		lpm r24, Z
 986               		
 987               	 ;  0 "" 2
 988               	.LVL104:
 413:quantum/quantum.c ****             register_code(keycode);
 989               		.loc 1 413 31 view .LVU244
 413:quantum/quantum.c ****             register_code(keycode);
 990               		.loc 1 413 31 is_stmt 0 view .LVU245
 991               	/* #NOAPP */
 992               	.LBE45:
 414:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 993               		.loc 1 414 13 is_stmt 1 view .LVU246
 994 0038 0E94 0000 		call register_code
 995               	.LVL105:
 996               	.L77:
 414:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 997               		.loc 1 414 13 is_stmt 0 view .LVU247
 998               	.LBE44:
 422:quantum/quantum.c ****         // interval
 999               		.loc 1 422 9 is_stmt 1 view .LVU248
 422:quantum/quantum.c ****         // interval
 1000               		.loc 1 422 9 is_stmt 0 view .LVU249
 1001 003c 8E01      		movw r16,r28
 1002 003e 0F5F      		subi r16,-1
 1003 0040 1F4F      		sbci r17,-1
 1004               	.LVL106:
 1005               	.LBB46:
 425:quantum/quantum.c ****             while (ms--) wait_ms(1);
 1006               		.loc 1 425 13 is_stmt 1 view .LVU250
 426:quantum/quantum.c ****         }
 1007               		.loc 1 426 13 view .LVU251
 425:quantum/quantum.c ****             while (ms--) wait_ms(1);
 1008               		.loc 1 425 21 is_stmt 0 view .LVU252
 1009 0042 8F2D      		mov r24,r15
 1010               	.LVL107:
 1011               	.L80:
 426:quantum/quantum.c ****         }
 1012               		.loc 1 426 22 discriminator 1 view .LVU253
 1013               	.LVL108:
 1014 0044 8150      		subi r24,1
 1015 0046 00F0      		brcs .L82
 426:quantum/quantum.c ****         }
 1016               		.loc 1 426 26 is_stmt 1 view .LVU254
 1017               	.LBB47:
 1018               	.LBI47:
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1019               		.loc 2 166 1 view .LVU255
 1020               	.LBB48:
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1021               		.loc 2 168 2 view .LVU256
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1022               		.loc 2 172 2 view .LVU257
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1023               		.loc 2 173 2 view .LVU258
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1024               		.loc 2 174 2 view .LVU259
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1025               		.loc 2 184 3 view .LVU260
 1026               		.loc 2 187 2 view .LVU261
 1027 0048 EFE9      		ldi r30,lo8(3999)
 1028 004a FFE0      		ldi r31,hi8(3999)
 1029 004c 3197      	1:	sbiw r30,1
 1030 004e 01F4      		brne 1b
 1031 0050 00C0      		rjmp .
 1032 0052 0000      		nop
 1033 0054 00C0      		rjmp .L80
 1034               	.LVL109:
 1035               	.L78:
 1036               		.loc 2 187 2 is_stmt 0 view .LVU262
 1037               	.LBE48:
 1038               	.LBE47:
 1039               	.LBE46:
 415:quantum/quantum.c ****             // up
 1040               		.loc 1 415 16 is_stmt 1 view .LVU263
 415:quantum/quantum.c ****             // up
 1041               		.loc 1 415 19 is_stmt 0 view .LVU264
 1042 0056 8330      		cpi r24,lo8(3)
 1043 0058 01F4      		brne .L79
 1044               	.LBB49:
 417:quantum/quantum.c ****             unregister_code(keycode);
 1045               		.loc 1 417 13 is_stmt 1 view .LVU265
 1046               	.LBB43:
 417:quantum/quantum.c ****             unregister_code(keycode);
 1047               		.loc 1 417 31 view .LVU266
 1048               	.LVL110:
 417:quantum/quantum.c ****             unregister_code(keycode);
 1049               		.loc 1 417 31 view .LVU267
 417:quantum/quantum.c ****             unregister_code(keycode);
 1050               		.loc 1 417 31 view .LVU268
 1051 005a FE01      		movw r30,r28
 1052               	/* #APP */
 1053               	 ;  417 "quantum/quantum.c" 1
 1054 005c 8491      		lpm r24, Z
 1055               		
 1056               	 ;  0 "" 2
 1057               	.LVL111:
 417:quantum/quantum.c ****             unregister_code(keycode);
 1058               		.loc 1 417 31 is_stmt 0 view .LVU269
 1059               	/* #NOAPP */
 1060 005e 00C0      		rjmp .L83
 1061               	.LVL112:
 1062               	.L79:
 417:quantum/quantum.c ****             unregister_code(keycode);
 1063               		.loc 1 417 31 view .LVU270
 1064               	.LBE43:
 1065               	.LBE49:
 420:quantum/quantum.c ****         }
 1066               		.loc 1 420 13 is_stmt 1 view .LVU271
 1067 0060 0E94 0000 		call send_char
 1068               	.LVL113:
 420:quantum/quantum.c ****         }
 1069               		.loc 1 420 13 is_stmt 0 view .LVU272
 1070 0064 E801      		movw r28,r16
 1071 0066 00C0      		rjmp .L77
 1072               	.LVL114:
 1073               	.L74:
 1074               	/* epilogue start */
 420:quantum/quantum.c ****         }
 1075               		.loc 1 420 13 view .LVU273
 1076               	.LBE37:
 429:quantum/quantum.c **** 
 1077               		.loc 1 429 1 view .LVU274
 1078 0068 DF91      		pop r29
 1079 006a CF91      		pop r28
 1080 006c 1F91      		pop r17
 1081 006e 0F91      		pop r16
 1082               	.LVL115:
 429:quantum/quantum.c **** 
 1083               		.loc 1 429 1 view .LVU275
 1084 0070 FF90      		pop r15
 1085               	.LVL116:
 429:quantum/quantum.c **** 
 1086               		.loc 1 429 1 view .LVU276
 1087 0072 0895      		ret
 1088               		.cfi_endproc
 1089               	.LFE128:
 1091               		.section	.text.send_string_P,"ax",@progbits
 1092               	.global	send_string_P
 1094               	send_string_P:
 1095               	.LVL117:
 1096               	.LFB126:
 371:quantum/quantum.c **** 
 1097               		.loc 1 371 37 is_stmt 1 view -0
 1098               		.cfi_startproc
 1099               	/* prologue: function */
 1100               	/* frame size = 0 */
 1101               	/* stack size = 0 */
 1102               	.L__stack_usage = 0
 371:quantum/quantum.c **** 
 1103               		.loc 1 371 39 view .LVU278
 1104 0000 60E0      		ldi r22,0
 1105 0002 0C94 0000 		jmp send_string_with_delay_P
 1106               	.LVL118:
 371:quantum/quantum.c **** 
 1107               		.loc 1 371 39 is_stmt 0 view .LVU279
 1108               		.cfi_endproc
 1109               	.LFE126:
 1111               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1112               	.global	set_single_persistent_default_layer
 1114               	set_single_persistent_default_layer:
 1115               	.LVL119:
 1116               	.LFB130:
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1117               		.loc 1 458 65 is_stmt 1 view -0
 1118               		.cfi_startproc
 1119               		.loc 1 458 65 is_stmt 0 view .LVU281
 1120 0000 CF93      		push r28
 1121               	.LCFI26:
 1122               		.cfi_def_cfa_offset 3
 1123               		.cfi_offset 28, -2
 1124 0002 DF93      		push r29
 1125               	.LCFI27:
 1126               		.cfi_def_cfa_offset 4
 1127               		.cfi_offset 29, -3
 1128               	/* prologue: function */
 1129               	/* frame size = 0 */
 1130               	/* stack size = 2 */
 1131               	.L__stack_usage = 2
 459:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 460:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 461:quantum/quantum.c **** #endif
 462:quantum/quantum.c ****     eeconfig_update_default_layer(1U << default_layer);
 1132               		.loc 1 462 5 is_stmt 1 view .LVU282
 1133               		.loc 1 462 38 is_stmt 0 view .LVU283
 1134 0004 C1E0      		ldi r28,lo8(1)
 1135 0006 D0E0      		ldi r29,0
 1136 0008 00C0      		rjmp 2f
 1137               		1:
 1138 000a CC0F      		lsl r28
 1139 000c DD1F      		rol r29
 1140               		2:
 1141 000e 8A95      		dec r24
 1142 0010 02F4      		brpl 1b
 1143               		.loc 1 462 5 view .LVU284
 1144 0012 8C2F      		mov r24,r28
 1145               	.LVL120:
 1146               		.loc 1 462 5 view .LVU285
 1147 0014 0E94 0000 		call eeconfig_update_default_layer
 1148               	.LVL121:
 463:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 1149               		.loc 1 463 5 is_stmt 1 view .LVU286
 1150 0018 BE01      		movw r22,r28
 1151 001a 90E0      		ldi r25,0
 1152 001c 80E0      		ldi r24,0
 1153               	/* epilogue start */
 464:quantum/quantum.c **** }
 1154               		.loc 1 464 1 is_stmt 0 view .LVU287
 1155 001e DF91      		pop r29
 1156 0020 CF91      		pop r28
 463:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 1157               		.loc 1 463 5 view .LVU288
 1158 0022 0C94 0000 		jmp default_layer_set
 1159               	.LVL122:
 1160               		.cfi_endproc
 1161               	.LFE130:
 1163               		.section	.text.update_tri_layer_state,"ax",@progbits
 1164               	.global	update_tri_layer_state
 1166               	update_tri_layer_state:
 1167               	.LVL123:
 1168               	.LFB131:
 465:quantum/quantum.c **** 
 466:quantum/quantum.c **** layer_state_t update_tri_layer_state(layer_state_t state, uint8_t layer1, uint8_t layer2, uint8_t l
 1169               		.loc 1 466 107 is_stmt 1 view -0
 1170               		.cfi_startproc
 1171               		.loc 1 466 107 is_stmt 0 view .LVU290
 1172 0000 8F92      		push r8
 1173               	.LCFI28:
 1174               		.cfi_def_cfa_offset 3
 1175               		.cfi_offset 8, -2
 1176 0002 9F92      		push r9
 1177               	.LCFI29:
 1178               		.cfi_def_cfa_offset 4
 1179               		.cfi_offset 9, -3
 1180 0004 AF92      		push r10
 1181               	.LCFI30:
 1182               		.cfi_def_cfa_offset 5
 1183               		.cfi_offset 10, -4
 1184 0006 BF92      		push r11
 1185               	.LCFI31:
 1186               		.cfi_def_cfa_offset 6
 1187               		.cfi_offset 11, -5
 1188 0008 CF92      		push r12
 1189               	.LCFI32:
 1190               		.cfi_def_cfa_offset 7
 1191               		.cfi_offset 12, -6
 1192 000a DF92      		push r13
 1193               	.LCFI33:
 1194               		.cfi_def_cfa_offset 8
 1195               		.cfi_offset 13, -7
 1196 000c EF92      		push r14
 1197               	.LCFI34:
 1198               		.cfi_def_cfa_offset 9
 1199               		.cfi_offset 14, -8
 1200 000e FF92      		push r15
 1201               	.LCFI35:
 1202               		.cfi_def_cfa_offset 10
 1203               		.cfi_offset 15, -9
 1204 0010 0F93      		push r16
 1205               	.LCFI36:
 1206               		.cfi_def_cfa_offset 11
 1207               		.cfi_offset 16, -10
 1208 0012 1F93      		push r17
 1209               	.LCFI37:
 1210               		.cfi_def_cfa_offset 12
 1211               		.cfi_offset 17, -11
 1212               	/* prologue: function */
 1213               	/* frame size = 0 */
 1214               	/* stack size = 10 */
 1215               	.L__stack_usage = 10
 1216 0014 6B01      		movw r12,r22
 1217 0016 7C01      		movw r14,r24
 467:quantum/quantum.c ****     layer_state_t mask12 = (1UL << layer1) | (1UL << layer2);
 1218               		.loc 1 467 5 is_stmt 1 view .LVU291
 1219               		.loc 1 467 33 is_stmt 0 view .LVU292
 1220 0018 81E0      		ldi r24,lo8(1)
 1221 001a 90E0      		ldi r25,0
 1222 001c A0E0      		ldi r26,0
 1223 001e B0E0      		ldi r27,0
 1224 0020 4C01      		movw r8,r24
 1225 0022 5D01      		movw r10,r26
 1226 0024 00C0      		rjmp 2f
 1227               		1:
 1228 0026 880C      		lsl r8
 1229 0028 991C      		rol r9
 1230 002a AA1C      		rol r10
 1231 002c BB1C      		rol r11
 1232               		2:
 1233 002e 4A95      		dec r20
 1234 0030 02F4      		brpl 1b
 1235 0032 B501      		movw r22,r10
 1236               	.LVL124:
 1237               		.loc 1 467 33 view .LVU293
 1238 0034 A401      		movw r20,r8
 1239               	.LVL125:
 1240               		.loc 1 467 51 view .LVU294
 1241 0036 4C01      		movw r8,r24
 1242 0038 5D01      		movw r10,r26
 1243 003a 00C0      		rjmp 2f
 1244               		1:
 1245 003c 880C      		lsl r8
 1246 003e 991C      		rol r9
 1247 0040 AA1C      		rol r10
 1248 0042 BB1C      		rol r11
 1249               		2:
 1250 0044 2A95      		dec r18
 1251 0046 02F4      		brpl 1b
 1252               		.loc 1 467 19 view .LVU295
 1253 0048 4829      		or r20,r8
 1254 004a 5929      		or r21,r9
 1255 004c 6A29      		or r22,r10
 1256 004e 7B29      		or r23,r11
 1257               	.LVL126:
 468:quantum/quantum.c ****     layer_state_t mask3  = 1UL << layer3;
 1258               		.loc 1 468 5 is_stmt 1 view .LVU296
 1259               		.loc 1 468 19 is_stmt 0 view .LVU297
 1260 0050 00C0      		rjmp 2f
 1261               		1:
 1262 0052 880F      		lsl r24
 1263 0054 991F      		rol r25
 1264 0056 AA1F      		rol r26
 1265 0058 BB1F      		rol r27
 1266               		2:
 1267 005a 0A95      		dec r16
 1268 005c 02F4      		brpl 1b
 1269               	.LVL127:
 469:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1270               		.loc 1 469 5 is_stmt 1 view .LVU298
 1271               		.loc 1 469 19 is_stmt 0 view .LVU299
 1272 005e 8A01      		movw r16,r20
 1273               	.LVL128:
 1274               		.loc 1 469 19 view .LVU300
 1275 0060 9B01      		movw r18,r22
 1276               	.LVL129:
 1277               		.loc 1 469 19 view .LVU301
 1278 0062 0C21      		and r16,r12
 1279 0064 1D21      		and r17,r13
 1280 0066 2E21      		and r18,r14
 1281 0068 3F21      		and r19,r15
 1282               		.loc 1 469 57 view .LVU302
 1283 006a 0417      		cp r16,r20
 1284 006c 1507      		cpc r17,r21
 1285 006e 2607      		cpc r18,r22
 1286 0070 3707      		cpc r19,r23
 1287 0072 01F4      		brne .L87
 1288               		.loc 1 469 57 discriminator 1 view .LVU303
 1289 0074 8C29      		or r24,r12
 1290               	.LVL130:
 1291               		.loc 1 469 57 discriminator 1 view .LVU304
 1292 0076 9D29      		or r25,r13
 1293 0078 AE29      		or r26,r14
 1294 007a BF29      		or r27,r15
 1295               	.L86:
 470:quantum/quantum.c **** }
 1296               		.loc 1 470 1 view .LVU305
 1297 007c BC01      		movw r22,r24
 1298 007e CD01      		movw r24,r26
 1299               	/* epilogue start */
 1300 0080 1F91      		pop r17
 1301               	.LVL131:
 1302               		.loc 1 470 1 view .LVU306
 1303 0082 0F91      		pop r16
 1304               	.LVL132:
 1305               		.loc 1 470 1 view .LVU307
 1306 0084 FF90      		pop r15
 1307 0086 EF90      		pop r14
 1308 0088 DF90      		pop r13
 1309 008a CF90      		pop r12
 1310 008c BF90      		pop r11
 1311 008e AF90      		pop r10
 1312 0090 9F90      		pop r9
 1313 0092 8F90      		pop r8
 1314               	.LVL133:
 1315               		.loc 1 470 1 view .LVU308
 1316 0094 0895      		ret
 1317               	.LVL134:
 1318               	.L87:
 469:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1319               		.loc 1 469 68 discriminator 2 view .LVU309
 1320 0096 8095      		com r24
 1321 0098 9095      		com r25
 1322 009a A095      		com r26
 1323 009c B095      		com r27
 1324               	.LVL135:
 469:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1325               		.loc 1 469 57 discriminator 2 view .LVU310
 1326 009e 8C21      		and r24,r12
 1327               	.LVL136:
 469:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1328               		.loc 1 469 57 discriminator 2 view .LVU311
 1329 00a0 9D21      		and r25,r13
 1330 00a2 AE21      		and r26,r14
 1331 00a4 BF21      		and r27,r15
 1332 00a6 00C0      		rjmp .L86
 1333               		.cfi_endproc
 1334               	.LFE131:
 1336               		.section	.text.update_tri_layer,"ax",@progbits
 1337               	.global	update_tri_layer
 1339               	update_tri_layer:
 1340               	.LVL137:
 1341               	.LFB132:
 471:quantum/quantum.c **** 
 472:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) { layer_state_set(update_tri_
 1342               		.loc 1 472 71 is_stmt 1 view -0
 1343               		.cfi_startproc
 1344               		.loc 1 472 71 is_stmt 0 view .LVU313
 1345 0000 0F93      		push r16
 1346               	.LCFI38:
 1347               		.cfi_def_cfa_offset 3
 1348               		.cfi_offset 16, -2
 1349               	/* prologue: function */
 1350               	/* frame size = 0 */
 1351               	/* stack size = 1 */
 1352               	.L__stack_usage = 1
 1353 0002 382F      		mov r19,r24
 1354 0004 262F      		mov r18,r22
 1355               		.loc 1 472 73 is_stmt 1 view .LVU314
 1356 0006 6091 0000 		lds r22,layer_state
 1357 000a 7091 0000 		lds r23,layer_state+1
 1358 000e 8091 0000 		lds r24,layer_state+2
 1359 0012 9091 0000 		lds r25,layer_state+3
 1360               	.LVL138:
 1361               		.loc 1 472 73 is_stmt 0 view .LVU315
 1362 0016 042F      		mov r16,r20
 1363 0018 432F      		mov r20,r19
 1364               	.LVL139:
 1365               		.loc 1 472 73 view .LVU316
 1366 001a 0E94 0000 		call update_tri_layer_state
 1367               	.LVL140:
 1368               	/* epilogue start */
 1369               		.loc 1 472 1 view .LVU317
 1370 001e 0F91      		pop r16
 1371               	.LVL141:
 1372               		.loc 1 472 73 view .LVU318
 1373 0020 0C94 0000 		jmp layer_state_set
 1374               	.LVL142:
 1375               		.cfi_endproc
 1376               	.LFE132:
 1378               		.section	.text.tap_random_base64,"ax",@progbits
 1379               	.global	tap_random_base64
 1381               	tap_random_base64:
 1382               	.LFB133:
 473:quantum/quantum.c **** 
 474:quantum/quantum.c **** void tap_random_base64(void) {
 1383               		.loc 1 474 30 is_stmt 1 view -0
 1384               		.cfi_startproc
 1385 0000 CF93      		push r28
 1386               	.LCFI39:
 1387               		.cfi_def_cfa_offset 3
 1388               		.cfi_offset 28, -2
 1389 0002 DF93      		push r29
 1390               	.LCFI40:
 1391               		.cfi_def_cfa_offset 4
 1392               		.cfi_offset 29, -3
 1393               	/* prologue: function */
 1394               	/* frame size = 0 */
 1395               	/* stack size = 2 */
 1396               	.L__stack_usage = 2
 475:quantum/quantum.c **** #if defined(__AVR_ATmega32U4__)
 476:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1397               		.loc 1 476 5 view .LVU320
 1398               		.loc 1 476 20 is_stmt 0 view .LVU321
 1399 0004 46B5      		in r20,0x26
 1400               		.loc 1 476 28 view .LVU322
 1401 0006 2091 8400 		lds r18,132
 1402 000a 3091 8500 		lds r19,132+1
 1403               		.loc 1 476 36 view .LVU323
 1404 000e C091 9400 		lds r28,148
 1405 0012 D091 9500 		lds r29,148+1
 1406               		.loc 1 476 44 view .LVU324
 1407 0016 8091 BE00 		lds r24,190
 1408 001a 9091 BF00 		lds r25,190+1
 1409               		.loc 1 476 34 view .LVU325
 1410 001e C20F      		add r28,r18
 1411 0020 C40F      		add r28,r20
 1412               		.loc 1 476 42 view .LVU326
 1413 0022 C80F      		add r28,r24
 1414               		.loc 1 476 13 view .LVU327
 1415 0024 CF73      		andi r28,lo8(63)
 1416               	.LVL143:
 477:quantum/quantum.c **** #else
 478:quantum/quantum.c ****     uint8_t key = rand() % 64;
 479:quantum/quantum.c **** #endif
 480:quantum/quantum.c ****     switch (key) {
 1417               		.loc 1 480 5 is_stmt 1 view .LVU328
 1418 0026 CE33      		cpi r28,lo8(62)
 1419 0028 00F4      		brsh .L91
 1420 002a C533      		cpi r28,lo8(53)
 1421 002c 00F4      		brsh .L92
 1422 002e CA31      		cpi r28,lo8(26)
 1423 0030 00F0      		brlo .L93
 1424 0032 C433      		cpi r28,lo8(52)
 1425 0034 00F4      		brsh .L98
 481:quantum/quantum.c ****         case 0 ... 25:
 482:quantum/quantum.c ****             register_code(KC_LSFT);
 483:quantum/quantum.c ****             register_code(key + KC_A);
 484:quantum/quantum.c ****             unregister_code(key + KC_A);
 485:quantum/quantum.c ****             unregister_code(KC_LSFT);
 486:quantum/quantum.c ****             break;
 487:quantum/quantum.c ****         case 26 ... 51:
 488:quantum/quantum.c ****             register_code(key - 26 + KC_A);
 1426               		.loc 1 488 13 view .LVU329
 1427 0036 C651      		subi r28,lo8(-(-22))
 1428               	.LVL144:
 1429               	.L101:
 489:quantum/quantum.c ****             unregister_code(key - 26 + KC_A);
 490:quantum/quantum.c ****             break;
 491:quantum/quantum.c ****         case 52:
 492:quantum/quantum.c ****             register_code(KC_0);
 493:quantum/quantum.c ****             unregister_code(KC_0);
 494:quantum/quantum.c ****             break;
 495:quantum/quantum.c ****         case 53 ... 61:
 496:quantum/quantum.c ****             register_code(key - 53 + KC_1);
 1430               		.loc 1 496 13 is_stmt 0 view .LVU330
 1431 0038 8C2F      		mov r24,r28
 1432 003a 0E94 0000 		call register_code
 1433               	.LVL145:
 497:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1434               		.loc 1 497 13 is_stmt 1 view .LVU331
 1435 003e 8C2F      		mov r24,r28
 1436 0040 00C0      		rjmp .L99
 1437               	.LVL146:
 1438               	.L91:
 480:quantum/quantum.c ****         case 0 ... 25:
 1439               		.loc 1 480 5 is_stmt 0 view .LVU332
 1440 0042 CE33      		cpi r28,lo8(62)
 1441 0044 01F0      		breq .L96
 1442 0046 CF33      		cpi r28,lo8(63)
 1443 0048 01F0      		breq .L97
 1444               	.L93:
 482:quantum/quantum.c ****             register_code(key + KC_A);
 1445               		.loc 1 482 13 is_stmt 1 view .LVU333
 1446 004a 81EE      		ldi r24,lo8(-31)
 1447 004c 0E94 0000 		call register_code
 1448               	.LVL147:
 483:quantum/quantum.c ****             unregister_code(key + KC_A);
 1449               		.loc 1 483 13 view .LVU334
 1450 0050 CC5F      		subi r28,lo8(-(4))
 1451               	.LVL148:
 483:quantum/quantum.c ****             unregister_code(key + KC_A);
 1452               		.loc 1 483 13 is_stmt 0 view .LVU335
 1453 0052 8C2F      		mov r24,r28
 1454 0054 0E94 0000 		call register_code
 1455               	.LVL149:
 484:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1456               		.loc 1 484 13 is_stmt 1 view .LVU336
 1457 0058 8C2F      		mov r24,r28
 1458               	.LVL150:
 1459               	.L100:
 498:quantum/quantum.c ****             break;
 499:quantum/quantum.c ****         case 62:
 500:quantum/quantum.c ****             register_code(KC_LSFT);
 501:quantum/quantum.c ****             register_code(KC_EQL);
 502:quantum/quantum.c ****             unregister_code(KC_EQL);
 1460               		.loc 1 502 13 is_stmt 0 view .LVU337
 1461 005a 0E94 0000 		call unregister_code
 1462               	.LVL151:
 503:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1463               		.loc 1 503 13 is_stmt 1 view .LVU338
 1464 005e 81EE      		ldi r24,lo8(-31)
 1465 0060 00C0      		rjmp .L99
 1466               	.LVL152:
 1467               	.L98:
 492:quantum/quantum.c ****             unregister_code(KC_0);
 1468               		.loc 1 492 13 view .LVU339
 1469 0062 87E2      		ldi r24,lo8(39)
 1470 0064 0E94 0000 		call register_code
 1471               	.LVL153:
 493:quantum/quantum.c ****             break;
 1472               		.loc 1 493 13 view .LVU340
 1473 0068 87E2      		ldi r24,lo8(39)
 1474               	.LVL154:
 1475               	.L99:
 1476               	/* epilogue start */
 504:quantum/quantum.c ****             break;
 505:quantum/quantum.c ****         case 63:
 506:quantum/quantum.c ****             register_code(KC_SLSH);
 507:quantum/quantum.c ****             unregister_code(KC_SLSH);
 508:quantum/quantum.c ****             break;
 509:quantum/quantum.c ****     }
 510:quantum/quantum.c **** }
 1477               		.loc 1 510 1 is_stmt 0 view .LVU341
 1478 006a DF91      		pop r29
 1479 006c CF91      		pop r28
 507:quantum/quantum.c ****             break;
 1480               		.loc 1 507 13 view .LVU342
 1481 006e 0C94 0000 		jmp unregister_code
 1482               	.LVL155:
 1483               	.L92:
 496:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1484               		.loc 1 496 13 is_stmt 1 view .LVU343
 1485 0072 C751      		subi r28,lo8(-(-23))
 1486               	.LVL156:
 496:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1487               		.loc 1 496 13 is_stmt 0 view .LVU344
 1488 0074 00C0      		rjmp .L101
 1489               	.LVL157:
 1490               	.L96:
 500:quantum/quantum.c ****             register_code(KC_EQL);
 1491               		.loc 1 500 13 is_stmt 1 view .LVU345
 1492 0076 81EE      		ldi r24,lo8(-31)
 1493 0078 0E94 0000 		call register_code
 1494               	.LVL158:
 501:quantum/quantum.c ****             unregister_code(KC_EQL);
 1495               		.loc 1 501 13 view .LVU346
 1496 007c 8EE2      		ldi r24,lo8(46)
 1497 007e 0E94 0000 		call register_code
 1498               	.LVL159:
 502:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1499               		.loc 1 502 13 view .LVU347
 1500 0082 8EE2      		ldi r24,lo8(46)
 1501 0084 00C0      		rjmp .L100
 1502               	.L97:
 506:quantum/quantum.c ****             unregister_code(KC_SLSH);
 1503               		.loc 1 506 13 view .LVU348
 1504 0086 88E3      		ldi r24,lo8(56)
 1505 0088 0E94 0000 		call register_code
 1506               	.LVL160:
 507:quantum/quantum.c ****             break;
 1507               		.loc 1 507 13 view .LVU349
 1508 008c 88E3      		ldi r24,lo8(56)
 1509 008e 00C0      		rjmp .L99
 1510               		.cfi_endproc
 1511               	.LFE133:
 1513               		.section	.text.bootmagic_lite,"ax",@progbits
 1514               		.weak	bootmagic_lite
 1516               	bootmagic_lite:
 1517               	.LFB134:
 511:quantum/quantum.c **** 
 512:quantum/quantum.c **** __attribute__((weak)) void bootmagic_lite(void) {
 1518               		.loc 1 512 49 view -0
 1519               		.cfi_startproc
 1520               	/* prologue: function */
 1521               	/* frame size = 0 */
 1522               	/* stack size = 0 */
 1523               	.L__stack_usage = 0
 513:quantum/quantum.c ****     // The lite version of TMK's bootmagic based on Wilba.
 514:quantum/quantum.c ****     // 100% less potential for accidentally making the
 515:quantum/quantum.c ****     // keyboard do stupid things.
 516:quantum/quantum.c **** 
 517:quantum/quantum.c ****     // We need multiple scans because debouncing can't be turned off.
 518:quantum/quantum.c ****     matrix_scan();
 1524               		.loc 1 518 5 view .LVU351
 1525 0000 0E94 0000 		call matrix_scan
 1526               	.LVL161:
 519:quantum/quantum.c **** #if defined(DEBOUNCE) && DEBOUNCE > 0
 520:quantum/quantum.c ****     wait_ms(DEBOUNCE * 2);
 1527               		.loc 1 520 5 view .LVU352
 1528               	.LBB50:
 1529               	.LBI50:
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 1530               		.loc 2 166 1 view .LVU353
 1531               	.LBB51:
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1532               		.loc 2 168 2 view .LVU354
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1533               		.loc 2 172 2 view .LVU355
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1534               		.loc 2 173 2 view .LVU356
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 1535               		.loc 2 174 2 view .LVU357
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 1536               		.loc 2 184 3 view .LVU358
 1537               		.loc 2 187 2 view .LVU359
 1538 0004 8FE3      		ldi r24,lo8(-25537)
 1539 0006 9CE9      		ldi r25,hi8(-25537)
 1540 0008 0197      	1:	sbiw r24,1
 1541 000a 01F4      		brne 1b
 1542 000c 00C0      		rjmp .
 1543 000e 0000      		nop
 1544               	.LVL162:
 1545               		.loc 2 187 2 is_stmt 0 view .LVU360
 1546               	.LBE51:
 1547               	.LBE50:
 521:quantum/quantum.c **** #else
 522:quantum/quantum.c ****     wait_ms(30);
 523:quantum/quantum.c **** #endif
 524:quantum/quantum.c ****     matrix_scan();
 1548               		.loc 1 524 5 is_stmt 1 view .LVU361
 1549 0010 0E94 0000 		call matrix_scan
 1550               	.LVL163:
 525:quantum/quantum.c **** 
 526:quantum/quantum.c ****     // If the Esc and space bar are held down on power up,
 527:quantum/quantum.c ****     // reset the EEPROM valid state and jump to bootloader.
 528:quantum/quantum.c ****     // Assumes Esc is at [0,0].
 529:quantum/quantum.c ****     // This isn't very generalized, but we need something that doesn't
 530:quantum/quantum.c ****     // rely on user's keymaps in firmware or EEPROM.
 531:quantum/quantum.c ****     if (matrix_get_row(BOOTMAGIC_LITE_ROW) & (1 << BOOTMAGIC_LITE_COLUMN)) {
 1551               		.loc 1 531 5 view .LVU362
 1552               		.loc 1 531 9 is_stmt 0 view .LVU363
 1553 0014 80E0      		ldi r24,0
 1554 0016 0E94 0000 		call matrix_get_row
 1555               	.LVL164:
 1556               		.loc 1 531 8 view .LVU364
 1557 001a 80FF      		sbrs r24,0
 1558 001c 00C0      		rjmp .L102
 532:quantum/quantum.c ****         eeconfig_disable();
 1559               		.loc 1 532 9 is_stmt 1 view .LVU365
 1560 001e 0E94 0000 		call eeconfig_disable
 1561               	.LVL165:
 533:quantum/quantum.c ****         // Jump to bootloader.
 534:quantum/quantum.c ****         bootloader_jump();
 1562               		.loc 1 534 9 view .LVU366
 1563 0022 0C94 0000 		jmp bootloader_jump
 1564               	.LVL166:
 1565               	.L102:
 1566               	/* epilogue start */
 535:quantum/quantum.c ****     }
 536:quantum/quantum.c **** }
 1567               		.loc 1 536 1 is_stmt 0 view .LVU367
 1568 0026 0895      		ret
 1569               		.cfi_endproc
 1570               	.LFE134:
 1572               		.section	.text.matrix_init_quantum,"ax",@progbits
 1573               	.global	matrix_init_quantum
 1575               	matrix_init_quantum:
 1576               	.LFB135:
 537:quantum/quantum.c **** 
 538:quantum/quantum.c **** void matrix_init_quantum() {
 1577               		.loc 1 538 28 is_stmt 1 view -0
 1578               		.cfi_startproc
 1579               	/* prologue: function */
 1580               	/* frame size = 0 */
 1581               	/* stack size = 0 */
 1582               	.L__stack_usage = 0
 539:quantum/quantum.c **** #ifdef BOOTMAGIC_LITE
 540:quantum/quantum.c ****     bootmagic_lite();
 541:quantum/quantum.c **** #endif
 542:quantum/quantum.c ****     if (!eeconfig_is_enabled()) {
 1583               		.loc 1 542 5 view .LVU369
 1584               		.loc 1 542 10 is_stmt 0 view .LVU370
 1585 0000 0E94 0000 		call eeconfig_is_enabled
 1586               	.LVL167:
 1587               		.loc 1 542 8 view .LVU371
 1588 0004 8111      		cpse r24,__zero_reg__
 1589 0006 00C0      		rjmp .L105
 543:quantum/quantum.c ****         eeconfig_init();
 1590               		.loc 1 543 9 is_stmt 1 view .LVU372
 1591 0008 0E94 0000 		call eeconfig_init
 1592               	.LVL168:
 1593               	.L105:
 544:quantum/quantum.c ****     }
 545:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
 546:quantum/quantum.c **** #    ifdef LED_MATRIX_ENABLE
 547:quantum/quantum.c ****     led_matrix_init();
 548:quantum/quantum.c **** #    else
 549:quantum/quantum.c ****     backlight_init_ports();
 550:quantum/quantum.c **** #    endif
 551:quantum/quantum.c **** #endif
 552:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 553:quantum/quantum.c ****     audio_init();
 554:quantum/quantum.c **** #endif
 555:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 556:quantum/quantum.c ****     rgb_matrix_init();
 557:quantum/quantum.c **** #endif
 558:quantum/quantum.c **** #ifdef ENCODER_ENABLE
 559:quantum/quantum.c ****     encoder_init();
 560:quantum/quantum.c **** #endif
 561:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 562:quantum/quantum.c ****     unicode_input_mode_init();
 563:quantum/quantum.c **** #endif
 564:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 565:quantum/quantum.c ****     haptic_init();
 566:quantum/quantum.c **** #endif
 567:quantum/quantum.c **** #ifdef OUTPUT_AUTO_ENABLE
 568:quantum/quantum.c ****     set_output(OUTPUT_AUTO);
 569:quantum/quantum.c **** #endif
 570:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
 571:quantum/quantum.c ****     dip_switch_init();
 572:quantum/quantum.c **** #endif
 573:quantum/quantum.c **** 
 574:quantum/quantum.c ****     matrix_init_kb();
 1594               		.loc 1 574 5 view .LVU373
 1595 000c 0C94 0000 		jmp matrix_init_kb
 1596               	.LVL169:
 1597               		.cfi_endproc
 1598               	.LFE135:
 1600               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1601               	.global	matrix_scan_quantum
 1603               	matrix_scan_quantum:
 1604               	.LFB136:
 575:quantum/quantum.c **** }
 576:quantum/quantum.c **** 
 577:quantum/quantum.c **** void matrix_scan_quantum() {
 1605               		.loc 1 577 28 view -0
 1606               		.cfi_startproc
 1607               	/* prologue: function */
 1608               	/* frame size = 0 */
 1609               	/* stack size = 0 */
 1610               	.L__stack_usage = 0
 578:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 579:quantum/quantum.c ****     matrix_scan_music();
 580:quantum/quantum.c **** #endif
 581:quantum/quantum.c **** 
 582:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 583:quantum/quantum.c ****     matrix_scan_tap_dance();
 1611               		.loc 1 583 5 view .LVU375
 1612 0000 0E94 0000 		call matrix_scan_tap_dance
 1613               	.LVL170:
 584:quantum/quantum.c **** #endif
 585:quantum/quantum.c **** 
 586:quantum/quantum.c **** #ifdef COMBO_ENABLE
 587:quantum/quantum.c ****     matrix_scan_combo();
 1614               		.loc 1 587 5 view .LVU376
 1615 0004 0E94 0000 		call matrix_scan_combo
 1616               	.LVL171:
 588:quantum/quantum.c **** #endif
 589:quantum/quantum.c **** 
 590:quantum/quantum.c **** #ifdef LED_MATRIX_ENABLE
 591:quantum/quantum.c ****     led_matrix_task();
 592:quantum/quantum.c **** #endif
 593:quantum/quantum.c **** 
 594:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 595:quantum/quantum.c ****     rgb_matrix_task();
 596:quantum/quantum.c **** #endif
 597:quantum/quantum.c **** 
 598:quantum/quantum.c **** #ifdef ENCODER_ENABLE
 599:quantum/quantum.c ****     encoder_read();
 600:quantum/quantum.c **** #endif
 601:quantum/quantum.c **** 
 602:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 603:quantum/quantum.c ****     haptic_task();
 604:quantum/quantum.c **** #endif
 605:quantum/quantum.c **** 
 606:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
 607:quantum/quantum.c ****     dip_switch_read(false);
 608:quantum/quantum.c **** #endif
 609:quantum/quantum.c **** 
 610:quantum/quantum.c ****     matrix_scan_kb();
 1617               		.loc 1 610 5 view .LVU377
 1618 0008 0C94 0000 		jmp matrix_scan_kb
 1619               	.LVL172:
 1620               		.cfi_endproc
 1621               	.LFE136:
 1623               		.section	.text.send_nibble,"ax",@progbits
 1624               	.global	send_nibble
 1626               	send_nibble:
 1627               	.LVL173:
 1628               	.LFB140:
 611:quantum/quantum.c **** }
 612:quantum/quantum.c **** 
 613:quantum/quantum.c **** #ifdef HD44780_ENABLED
 614:quantum/quantum.c **** #    include "hd44780.h"
 615:quantum/quantum.c **** #endif
 616:quantum/quantum.c **** 
 617:quantum/quantum.c **** // Functions for spitting out values
 618:quantum/quantum.c **** //
 619:quantum/quantum.c **** 
 620:quantum/quantum.c **** void send_dword(uint32_t number) {  // this might not actually work
 621:quantum/quantum.c ****     uint16_t word = (number >> 16);
 622:quantum/quantum.c ****     send_word(word);
 623:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 624:quantum/quantum.c **** }
 625:quantum/quantum.c **** 
 626:quantum/quantum.c **** void send_word(uint16_t number) {
 627:quantum/quantum.c ****     uint8_t byte = number >> 8;
 628:quantum/quantum.c ****     send_byte(byte);
 629:quantum/quantum.c ****     send_byte(number & 0xFF);
 630:quantum/quantum.c **** }
 631:quantum/quantum.c **** 
 632:quantum/quantum.c **** void send_byte(uint8_t number) {
 633:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 634:quantum/quantum.c ****     send_nibble(nibble);
 635:quantum/quantum.c ****     send_nibble(number & 0xF);
 636:quantum/quantum.c **** }
 637:quantum/quantum.c **** 
 638:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1629               		.loc 1 638 34 view -0
 1630               		.cfi_startproc
 1631               		.loc 1 638 34 is_stmt 0 view .LVU379
 1632 0000 CF93      		push r28
 1633               	.LCFI41:
 1634               		.cfi_def_cfa_offset 3
 1635               		.cfi_offset 28, -2
 1636               	/* prologue: function */
 1637               	/* frame size = 0 */
 1638               	/* stack size = 1 */
 1639               	.L__stack_usage = 1
 639:quantum/quantum.c ****     switch (number) {
 1640               		.loc 1 639 5 is_stmt 1 view .LVU380
 1641 0002 8A30      		cpi r24,lo8(10)
 1642 0004 00F4      		brsh .L108
 1643 0006 8823      		tst r24
 1644 0008 01F0      		breq .L113
 640:quantum/quantum.c ****         case 0:
 641:quantum/quantum.c ****             register_code(KC_0);
 642:quantum/quantum.c ****             unregister_code(KC_0);
 643:quantum/quantum.c ****             break;
 644:quantum/quantum.c ****         case 1 ... 9:
 645:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1645               		.loc 1 645 13 view .LVU381
 1646 000a CDE1      		ldi r28,lo8(29)
 1647               	.L116:
 646:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 647:quantum/quantum.c ****             break;
 648:quantum/quantum.c ****         case 0xA ... 0xF:
 649:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1648               		.loc 1 649 13 is_stmt 0 view .LVU382
 1649 000c C80F      		add r28,r24
 1650 000e 8C2F      		mov r24,r28
 1651               	.LVL174:
 1652               		.loc 1 649 13 view .LVU383
 1653 0010 0E94 0000 		call register_code
 1654               	.LVL175:
 650:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1655               		.loc 1 650 13 is_stmt 1 view .LVU384
 1656 0014 8C2F      		mov r24,r28
 1657 0016 00C0      		rjmp .L115
 1658               	.LVL176:
 1659               	.L108:
 649:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1660               		.loc 1 649 13 is_stmt 0 view .LVU385
 1661 0018 CAEF      		ldi r28,lo8(-6)
 639:quantum/quantum.c ****         case 0:
 1662               		.loc 1 639 5 view .LVU386
 1663 001a 8031      		cpi r24,lo8(16)
 1664 001c 00F0      		brlo .L116
 1665               	/* epilogue start */
 651:quantum/quantum.c ****             break;
 652:quantum/quantum.c ****     }
 653:quantum/quantum.c **** }
 1666               		.loc 1 653 1 view .LVU387
 1667 001e CF91      		pop r28
 1668 0020 0895      		ret
 1669               	.L113:
 641:quantum/quantum.c ****             unregister_code(KC_0);
 1670               		.loc 1 641 13 is_stmt 1 view .LVU388
 1671 0022 87E2      		ldi r24,lo8(39)
 1672               	.LVL177:
 641:quantum/quantum.c ****             unregister_code(KC_0);
 1673               		.loc 1 641 13 is_stmt 0 view .LVU389
 1674 0024 0E94 0000 		call register_code
 1675               	.LVL178:
 642:quantum/quantum.c ****             break;
 1676               		.loc 1 642 13 is_stmt 1 view .LVU390
 1677 0028 87E2      		ldi r24,lo8(39)
 1678               	.L115:
 1679               	/* epilogue start */
 1680               		.loc 1 653 1 is_stmt 0 view .LVU391
 1681 002a CF91      		pop r28
 650:quantum/quantum.c ****             break;
 1682               		.loc 1 650 13 view .LVU392
 1683 002c 0C94 0000 		jmp unregister_code
 1684               	.LVL179:
 1685               		.cfi_endproc
 1686               	.LFE140:
 1688               		.section	.text.send_byte,"ax",@progbits
 1689               	.global	send_byte
 1691               	send_byte:
 1692               	.LVL180:
 1693               	.LFB139:
 632:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1694               		.loc 1 632 32 is_stmt 1 view -0
 1695               		.cfi_startproc
 632:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1696               		.loc 1 632 32 is_stmt 0 view .LVU394
 1697 0000 CF93      		push r28
 1698               	.LCFI42:
 1699               		.cfi_def_cfa_offset 3
 1700               		.cfi_offset 28, -2
 1701               	/* prologue: function */
 1702               	/* frame size = 0 */
 1703               	/* stack size = 1 */
 1704               	.L__stack_usage = 1
 1705 0002 C82F      		mov r28,r24
 633:quantum/quantum.c ****     send_nibble(nibble);
 1706               		.loc 1 633 5 is_stmt 1 view .LVU395
 1707               	.LVL181:
 634:quantum/quantum.c ****     send_nibble(number & 0xF);
 1708               		.loc 1 634 5 view .LVU396
 1709 0004 8295      		swap r24
 1710               	.LVL182:
 634:quantum/quantum.c ****     send_nibble(number & 0xF);
 1711               		.loc 1 634 5 is_stmt 0 view .LVU397
 1712 0006 8F70      		andi r24,lo8(15)
 1713 0008 0E94 0000 		call send_nibble
 1714               	.LVL183:
 635:quantum/quantum.c **** }
 1715               		.loc 1 635 5 is_stmt 1 view .LVU398
 1716 000c 8C2F      		mov r24,r28
 1717 000e 8F70      		andi r24,lo8(15)
 1718               	/* epilogue start */
 636:quantum/quantum.c **** 
 1719               		.loc 1 636 1 is_stmt 0 view .LVU399
 1720 0010 CF91      		pop r28
 1721               	.LVL184:
 635:quantum/quantum.c **** }
 1722               		.loc 1 635 5 view .LVU400
 1723 0012 0C94 0000 		jmp send_nibble
 1724               	.LVL185:
 1725               		.cfi_endproc
 1726               	.LFE139:
 1728               		.section	.text.send_word,"ax",@progbits
 1729               	.global	send_word
 1731               	send_word:
 1732               	.LVL186:
 1733               	.LFB138:
 626:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1734               		.loc 1 626 33 is_stmt 1 view -0
 1735               		.cfi_startproc
 626:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1736               		.loc 1 626 33 is_stmt 0 view .LVU402
 1737 0000 CF93      		push r28
 1738               	.LCFI43:
 1739               		.cfi_def_cfa_offset 3
 1740               		.cfi_offset 28, -2
 1741               	/* prologue: function */
 1742               	/* frame size = 0 */
 1743               	/* stack size = 1 */
 1744               	.L__stack_usage = 1
 1745 0002 C82F      		mov r28,r24
 627:quantum/quantum.c ****     send_byte(byte);
 1746               		.loc 1 627 5 is_stmt 1 view .LVU403
 1747               	.LVL187:
 628:quantum/quantum.c ****     send_byte(number & 0xFF);
 1748               		.loc 1 628 5 view .LVU404
 1749 0004 892F      		mov r24,r25
 1750               	.LVL188:
 628:quantum/quantum.c ****     send_byte(number & 0xFF);
 1751               		.loc 1 628 5 is_stmt 0 view .LVU405
 1752 0006 0E94 0000 		call send_byte
 1753               	.LVL189:
 629:quantum/quantum.c **** }
 1754               		.loc 1 629 5 is_stmt 1 view .LVU406
 1755 000a 8C2F      		mov r24,r28
 1756               	/* epilogue start */
 630:quantum/quantum.c **** 
 1757               		.loc 1 630 1 is_stmt 0 view .LVU407
 1758 000c CF91      		pop r28
 629:quantum/quantum.c **** }
 1759               		.loc 1 629 5 view .LVU408
 1760 000e 0C94 0000 		jmp send_byte
 1761               	.LVL190:
 1762               		.cfi_endproc
 1763               	.LFE138:
 1765               		.section	.text.send_dword,"ax",@progbits
 1766               	.global	send_dword
 1768               	send_dword:
 1769               	.LVL191:
 1770               	.LFB137:
 620:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1771               		.loc 1 620 34 is_stmt 1 view -0
 1772               		.cfi_startproc
 620:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1773               		.loc 1 620 34 is_stmt 0 view .LVU410
 1774 0000 CF92      		push r12
 1775               	.LCFI44:
 1776               		.cfi_def_cfa_offset 3
 1777               		.cfi_offset 12, -2
 1778 0002 DF92      		push r13
 1779               	.LCFI45:
 1780               		.cfi_def_cfa_offset 4
 1781               		.cfi_offset 13, -3
 1782 0004 EF92      		push r14
 1783               	.LCFI46:
 1784               		.cfi_def_cfa_offset 5
 1785               		.cfi_offset 14, -4
 1786 0006 FF92      		push r15
 1787               	.LCFI47:
 1788               		.cfi_def_cfa_offset 6
 1789               		.cfi_offset 15, -5
 1790               	/* prologue: function */
 1791               	/* frame size = 0 */
 1792               	/* stack size = 4 */
 1793               	.L__stack_usage = 4
 1794 0008 6B01      		movw r12,r22
 621:quantum/quantum.c ****     send_word(word);
 1795               		.loc 1 621 5 is_stmt 1 view .LVU411
 622:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1796               		.loc 1 622 5 view .LVU412
 1797 000a 0E94 0000 		call send_word
 1798               	.LVL192:
 623:quantum/quantum.c **** }
 1799               		.loc 1 623 5 view .LVU413
 1800 000e C601      		movw r24,r12
 1801               	/* epilogue start */
 624:quantum/quantum.c **** 
 1802               		.loc 1 624 1 is_stmt 0 view .LVU414
 1803 0010 FF90      		pop r15
 1804 0012 EF90      		pop r14
 1805 0014 DF90      		pop r13
 1806 0016 CF90      		pop r12
 623:quantum/quantum.c **** }
 1807               		.loc 1 623 5 view .LVU415
 1808 0018 0C94 0000 		jmp send_word
 1809               	.LVL193:
 1810               		.cfi_endproc
 1811               	.LFE137:
 1813               		.section	.text.hex_to_keycode,"ax",@progbits
 1814               		.weak	hex_to_keycode
 1816               	hex_to_keycode:
 1817               	.LVL194:
 1818               	.LFB141:
 654:quantum/quantum.c **** 
 655:quantum/quantum.c **** __attribute__((weak)) uint16_t hex_to_keycode(uint8_t hex) {
 1819               		.loc 1 655 60 is_stmt 1 view -0
 1820               		.cfi_startproc
 1821               	/* prologue: function */
 1822               	/* frame size = 0 */
 1823               	/* stack size = 0 */
 1824               	.L__stack_usage = 0
 656:quantum/quantum.c ****     hex = hex & 0xF;
 1825               		.loc 1 656 5 view .LVU417
 1826               		.loc 1 656 9 is_stmt 0 view .LVU418
 1827 0000 282F      		mov r18,r24
 1828 0002 2F70      		andi r18,lo8(15)
 1829               	.LVL195:
 657:quantum/quantum.c ****     if (hex == 0x0) {
 1830               		.loc 1 657 5 is_stmt 1 view .LVU419
 1831               		.loc 1 657 8 is_stmt 0 view .LVU420
 1832 0004 01F0      		breq .L123
 658:quantum/quantum.c ****         return KC_0;
 659:quantum/quantum.c ****     } else if (hex < 0xA) {
 1833               		.loc 1 659 12 is_stmt 1 view .LVU421
 1834 0006 822F      		mov r24,r18
 1835 0008 90E0      		ldi r25,0
 1836               		.loc 1 659 15 is_stmt 0 view .LVU422
 1837 000a 2A30      		cpi r18,lo8(10)
 1838 000c 00F4      		brsh .L122
 660:quantum/quantum.c ****         return KC_1 + (hex - 0x1);
 1839               		.loc 1 660 9 is_stmt 1 view .LVU423
 1840               		.loc 1 660 21 is_stmt 0 view .LVU424
 1841 000e 4D96      		adiw r24,29
 1842 0010 0895      		ret
 1843               	.L122:
 661:quantum/quantum.c ****     } else {
 662:quantum/quantum.c ****         return KC_A + (hex - 0xA);
 1844               		.loc 1 662 9 is_stmt 1 view .LVU425
 1845               		.loc 1 662 21 is_stmt 0 view .LVU426
 1846 0012 0697      		sbiw r24,6
 1847 0014 0895      		ret
 1848               	.L123:
 658:quantum/quantum.c ****     } else if (hex < 0xA) {
 1849               		.loc 1 658 16 view .LVU427
 1850 0016 87E2      		ldi r24,lo8(39)
 1851 0018 90E0      		ldi r25,0
 1852               	/* epilogue start */
 663:quantum/quantum.c ****     }
 664:quantum/quantum.c **** }
 1853               		.loc 1 664 1 view .LVU428
 1854 001a 0895      		ret
 1855               		.cfi_endproc
 1856               	.LFE141:
 1858               		.section	.text.api_send_unicode,"ax",@progbits
 1859               	.global	api_send_unicode
 1861               	api_send_unicode:
 1862               	.LVL196:
 1863               	.LFB142:
 665:quantum/quantum.c **** 
 666:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1864               		.loc 1 666 41 is_stmt 1 view -0
 1865               		.cfi_startproc
 1866               	/* prologue: function */
 1867               	/* frame size = 0 */
 1868               	/* stack size = 0 */
 1869               	.L__stack_usage = 0
 667:quantum/quantum.c **** #ifdef API_ENABLE
 668:quantum/quantum.c ****     uint8_t chunk[4];
 669:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
 670:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
 671:quantum/quantum.c **** #endif
 672:quantum/quantum.c **** }
 1870               		.loc 1 672 1 view .LVU430
 1871               	/* epilogue start */
 1872 0000 0895      		ret
 1873               		.cfi_endproc
 1874               	.LFE142:
 1876               		.section	.text.led_set_user,"ax",@progbits
 1877               		.weak	led_set_user
 1879               	led_set_user:
 1880               	.LVL197:
 1881               	.LFB143:
 673:quantum/quantum.c **** 
 674:quantum/quantum.c **** /** \brief Lock LED set callback - keymap/user level
 675:quantum/quantum.c ****  *
 676:quantum/quantum.c ****  * \deprecated Use led_update_user() instead.
 677:quantum/quantum.c ****  */
 678:quantum/quantum.c **** __attribute__((weak)) void led_set_user(uint8_t usb_led) {}
 1882               		.loc 1 678 58 view -0
 1883               		.cfi_startproc
 1884               	/* prologue: function */
 1885               	/* frame size = 0 */
 1886               	/* stack size = 0 */
 1887               	.L__stack_usage = 0
 1888               		.loc 1 678 59 view .LVU432
 1889               	/* epilogue start */
 1890               		.loc 1 678 1 is_stmt 0 view .LVU433
 1891 0000 0895      		ret
 1892               		.cfi_endproc
 1893               	.LFE143:
 1895               		.section	.text.led_set_kb,"ax",@progbits
 1896               		.weak	led_set_kb
 1898               	led_set_kb:
 1899               	.LVL198:
 1900               	.LFB144:
 679:quantum/quantum.c **** 
 680:quantum/quantum.c **** /** \brief Lock LED set callback - keyboard level
 681:quantum/quantum.c ****  *
 682:quantum/quantum.c ****  * \deprecated Use led_update_kb() instead.
 683:quantum/quantum.c ****  */
 684:quantum/quantum.c **** __attribute__((weak)) void led_set_kb(uint8_t usb_led) { led_set_user(usb_led); }
 1901               		.loc 1 684 56 is_stmt 1 view -0
 1902               		.cfi_startproc
 1903               	/* prologue: function */
 1904               	/* frame size = 0 */
 1905               	/* stack size = 0 */
 1906               	.L__stack_usage = 0
 1907               		.loc 1 684 58 view .LVU435
 1908 0000 0C94 0000 		jmp led_set_user
 1909               	.LVL199:
 1910               		.loc 1 684 58 is_stmt 0 view .LVU436
 1911               		.cfi_endproc
 1912               	.LFE144:
 1914               		.section	.text.led_update_user,"ax",@progbits
 1915               		.weak	led_update_user
 1917               	led_update_user:
 1918               	.LVL200:
 1919               	.LFB145:
 685:quantum/quantum.c **** 
 686:quantum/quantum.c **** /** \brief Lock LED update callback - keymap/user level
 687:quantum/quantum.c ****  *
 688:quantum/quantum.c ****  * \return True if led_update_kb() should run its own code, false otherwise.
 689:quantum/quantum.c ****  */
 690:quantum/quantum.c **** __attribute__((weak)) bool led_update_user(led_t led_state) { return true; }
 1920               		.loc 1 690 61 is_stmt 1 view -0
 1921               		.cfi_startproc
 1922               	/* prologue: function */
 1923               	/* frame size = 0 */
 1924               	/* stack size = 0 */
 1925               	.L__stack_usage = 0
 1926               		.loc 1 690 63 view .LVU438
 1927               		.loc 1 690 1 is_stmt 0 view .LVU439
 1928 0000 81E0      		ldi r24,lo8(1)
 1929               	.LVL201:
 1930               	/* epilogue start */
 1931               		.loc 1 690 1 view .LVU440
 1932 0002 0895      		ret
 1933               		.cfi_endproc
 1934               	.LFE145:
 1936               		.section	.text.led_update_kb,"ax",@progbits
 1937               		.weak	led_update_kb
 1939               	led_update_kb:
 1940               	.LVL202:
 1941               	.LFB146:
 691:quantum/quantum.c **** 
 692:quantum/quantum.c **** /** \brief Lock LED update callback - keyboard level
 693:quantum/quantum.c ****  *
 694:quantum/quantum.c ****  * \return Ignored for now.
 695:quantum/quantum.c ****  */
 696:quantum/quantum.c **** __attribute__((weak)) bool led_update_kb(led_t led_state) { return led_update_user(led_state); }
 1942               		.loc 1 696 59 is_stmt 1 view -0
 1943               		.cfi_startproc
 1944               	/* prologue: function */
 1945               	/* frame size = 0 */
 1946               	/* stack size = 0 */
 1947               	.L__stack_usage = 0
 1948               		.loc 1 696 61 view .LVU442
 1949               		.loc 1 696 68 is_stmt 0 view .LVU443
 1950 0000 0C94 0000 		jmp led_update_user
 1951               	.LVL203:
 1952               		.loc 1 696 68 view .LVU444
 1953               		.cfi_endproc
 1954               	.LFE146:
 1956               		.section	.text.led_init_ports,"ax",@progbits
 1957               		.weak	led_init_ports
 1959               	led_init_ports:
 1960               	.LFB147:
 697:quantum/quantum.c **** 
 698:quantum/quantum.c **** __attribute__((weak)) void led_init_ports(void) {}
 1961               		.loc 1 698 49 is_stmt 1 view -0
 1962               		.cfi_startproc
 1963               	/* prologue: function */
 1964               	/* frame size = 0 */
 1965               	/* stack size = 0 */
 1966               	.L__stack_usage = 0
 1967               		.loc 1 698 50 view .LVU446
 1968               	/* epilogue start */
 1969               		.loc 1 698 1 is_stmt 0 view .LVU447
 1970 0000 0895      		ret
 1971               		.cfi_endproc
 1972               	.LFE147:
 1974               		.section	.text.led_set,"ax",@progbits
 1975               		.weak	led_set
 1977               	led_set:
 1978               	.LVL204:
 1979               	.LFB148:
 699:quantum/quantum.c **** 
 700:quantum/quantum.c **** __attribute__((weak)) void led_set(uint8_t usb_led) {
 1980               		.loc 1 700 53 is_stmt 1 view -0
 1981               		.cfi_startproc
 1982               		.loc 1 700 53 is_stmt 0 view .LVU449
 1983 0000 CF93      		push r28
 1984               	.LCFI48:
 1985               		.cfi_def_cfa_offset 3
 1986               		.cfi_offset 28, -2
 1987               	/* prologue: function */
 1988               	/* frame size = 0 */
 1989               	/* stack size = 1 */
 1990               	.L__stack_usage = 1
 1991 0002 C82F      		mov r28,r24
 701:quantum/quantum.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 702:quantum/quantum.c ****     // Use backlight as Caps Lock indicator
 703:quantum/quantum.c ****     uint8_t bl_toggle_lvl = 0;
 704:quantum/quantum.c **** 
 705:quantum/quantum.c ****     if (IS_LED_ON(usb_led, USB_LED_CAPS_LOCK) && !backlight_config.enable) {
 706:quantum/quantum.c ****         // Turning Caps Lock ON and backlight is disabled in config
 707:quantum/quantum.c ****         // Toggling backlight to the brightest level
 708:quantum/quantum.c ****         bl_toggle_lvl = BACKLIGHT_LEVELS;
 709:quantum/quantum.c ****     } else if (IS_LED_OFF(usb_led, USB_LED_CAPS_LOCK) && backlight_config.enable) {
 710:quantum/quantum.c ****         // Turning Caps Lock OFF and backlight is enabled in config
 711:quantum/quantum.c ****         // Toggling backlight and restoring config level
 712:quantum/quantum.c ****         bl_toggle_lvl = backlight_config.level;
 713:quantum/quantum.c ****     }
 714:quantum/quantum.c **** 
 715:quantum/quantum.c ****     // Set level without modify backlight_config to keep ability to restore state
 716:quantum/quantum.c ****     backlight_set(bl_toggle_lvl);
 717:quantum/quantum.c **** #endif
 718:quantum/quantum.c **** 
 719:quantum/quantum.c ****     led_set_kb(usb_led);
 1992               		.loc 1 719 5 is_stmt 1 view .LVU450
 1993 0004 0E94 0000 		call led_set_kb
 1994               	.LVL205:
 720:quantum/quantum.c ****     led_update_kb((led_t)usb_led);
 1995               		.loc 1 720 5 view .LVU451
 1996 0008 8C2F      		mov r24,r28
 1997               	/* epilogue start */
 721:quantum/quantum.c **** }
 1998               		.loc 1 721 1 is_stmt 0 view .LVU452
 1999 000a CF91      		pop r28
 2000               	.LVL206:
 720:quantum/quantum.c ****     led_update_kb((led_t)usb_led);
 2001               		.loc 1 720 5 view .LVU453
 2002 000c 0C94 0000 		jmp led_update_kb
 2003               	.LVL207:
 720:quantum/quantum.c ****     led_update_kb((led_t)usb_led);
 2004               		.loc 1 720 5 view .LVU454
 2005               		.cfi_endproc
 2006               	.LFE148:
 2008               		.section	.text.startup_user,"ax",@progbits
 2009               		.weak	startup_user
 2011               	startup_user:
 2012               	.LFB152:
 2013               		.cfi_startproc
 2014               	/* prologue: function */
 2015               	/* frame size = 0 */
 2016               	/* stack size = 0 */
 2017               	.L__stack_usage = 0
 2018               	/* epilogue start */
 2019 0000 0895      		ret
 2020               		.cfi_endproc
 2021               	.LFE152:
 2023               		.section	.text.shutdown_user,"ax",@progbits
 2024               		.weak	shutdown_user
 2026               	shutdown_user:
 2027               	.LFB154:
 2028               		.cfi_startproc
 2029               	/* prologue: function */
 2030               	/* frame size = 0 */
 2031               	/* stack size = 0 */
 2032               	.L__stack_usage = 0
 2033               	/* epilogue start */
 2034 0000 0895      		ret
 2035               		.cfi_endproc
 2036               	.LFE154:
 2038               		.section	.text.reset_keyboard,"ax",@progbits
 2039               	.global	reset_keyboard
 2041               	reset_keyboard:
 2042               	.LFB121:
 122:quantum/quantum.c ****     clear_keyboard();
 2043               		.loc 1 122 27 is_stmt 1 view -0
 2044               		.cfi_startproc
 2045               	/* prologue: function */
 2046               	/* frame size = 0 */
 2047               	/* stack size = 0 */
 2048               	.L__stack_usage = 0
 123:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 2049               		.loc 1 123 5 view .LVU456
 2050 0000 0E94 0000 		call clear_keyboard
 2051               	.LVL208:
 137:quantum/quantum.c ****     wait_ms(250);
 2052               		.loc 1 137 5 view .LVU457
 2053 0004 0E94 0000 		call shutdown_user
 2054               	.LVL209:
 138:quantum/quantum.c **** #endif
 2055               		.loc 1 138 5 view .LVU458
 2056               	.LBB52:
 2057               	.LBI52:
 166:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 2058               		.loc 2 166 1 view .LVU459
 2059               	.LBB53:
 168:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 2060               		.loc 2 168 2 view .LVU460
 172:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 2061               		.loc 2 172 2 view .LVU461
 173:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 2062               		.loc 2 173 2 view .LVU462
 174:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 2063               		.loc 2 174 2 view .LVU463
 184:c:\users\nonej\documents\keyboard\msys64\home\nonej\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 2064               		.loc 2 184 3 view .LVU464
 2065               		.loc 2 187 2 view .LVU465
 2066 0008 2FEF      		ldi r18,lo8(799999)
 2067 000a 84E3      		ldi r24,hi8(799999)
 2068 000c 9CE0      		ldi r25,hlo8(799999)
 2069 000e 2150      	1:	subi r18,1
 2070 0010 8040      		sbci r24,0
 2071 0012 9040      		sbci r25,0
 2072 0014 01F4      		brne 1b
 2073 0016 00C0      		rjmp .
 2074 0018 0000      		nop
 2075               	.LVL210:
 2076               		.loc 2 187 2 is_stmt 0 view .LVU466
 2077               	.LBE53:
 2078               	.LBE52:
 145:quantum/quantum.c **** #endif
 2079               		.loc 1 145 5 is_stmt 1 view .LVU467
 145:quantum/quantum.c **** #endif
 2080               		.loc 1 145 25 is_stmt 0 view .LVU468
 2081 001a 87E7      		ldi r24,lo8(119)
 2082 001c 97E7      		ldi r25,lo8(119)
 2083 001e 9093 0108 		sts 2048+1,r25
 2084 0022 8093 0008 		sts 2048,r24
 147:quantum/quantum.c **** }
 2085               		.loc 1 147 5 is_stmt 1 view .LVU469
 2086 0026 0C94 0000 		jmp bootloader_jump
 2087               	.LVL211:
 2088               		.cfi_endproc
 2089               	.LFE121:
 2091               		.section	.text.process_record_quantum,"ax",@progbits
 2092               	.global	process_record_quantum
 2094               	process_record_quantum:
 2095               	.LVL212:
 2096               	.LFB124:
 177:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2097               		.loc 1 177 50 view -0
 2098               		.cfi_startproc
 177:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2099               		.loc 1 177 50 is_stmt 0 view .LVU471
 2100 0000 0F93      		push r16
 2101               	.LCFI49:
 2102               		.cfi_def_cfa_offset 3
 2103               		.cfi_offset 16, -2
 2104 0002 1F93      		push r17
 2105               	.LCFI50:
 2106               		.cfi_def_cfa_offset 4
 2107               		.cfi_offset 17, -3
 2108 0004 CF93      		push r28
 2109               	.LCFI51:
 2110               		.cfi_def_cfa_offset 5
 2111               		.cfi_offset 28, -4
 2112 0006 DF93      		push r29
 2113               	.LCFI52:
 2114               		.cfi_def_cfa_offset 6
 2115               		.cfi_offset 29, -5
 2116               	/* prologue: function */
 2117               	/* frame size = 0 */
 2118               	/* stack size = 4 */
 2119               	.L__stack_usage = 4
 2120 0008 EC01      		movw r28,r24
 178:quantum/quantum.c **** 
 2121               		.loc 1 178 5 is_stmt 1 view .LVU472
 178:quantum/quantum.c **** 
 2122               		.loc 1 178 24 is_stmt 0 view .LVU473
 2123 000a 0E94 0000 		call get_record_keycode
 2124               	.LVL213:
 178:quantum/quantum.c **** 
 2125               		.loc 1 178 24 view .LVU474
 2126 000e 8C01      		movw r16,r24
 2127               	.LVL214:
 195:quantum/quantum.c **** #endif
 2128               		.loc 1 195 5 is_stmt 1 view .LVU475
 2129 0010 BE01      		movw r22,r28
 2130 0012 0E94 0000 		call preprocess_tap_dance
 2131               	.LVL215:
 198:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 2132               		.loc 1 198 5 view .LVU476
 219:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2133               		.loc 1 219 13 is_stmt 0 view .LVU477
 2134 0016 BE01      		movw r22,r28
 2135 0018 C801      		movw r24,r16
 2136 001a 0E94 0000 		call process_record_kb
 2137               	.LVL216:
 257:quantum/quantum.c **** #endif
 2138               		.loc 1 257 44 view .LVU478
 2139 001e 8823      		tst r24
 2140 0020 01F0      		breq .L134
 233:quantum/quantum.c **** #endif
 2141               		.loc 1 233 13 view .LVU479
 2142 0022 BE01      		movw r22,r28
 2143 0024 C801      		movw r24,r16
 2144 0026 0E94 0000 		call process_tap_dance
 2145               	.LVL217:
 219:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2146               		.loc 1 219 48 view .LVU480
 2147 002a 8823      		tst r24
 2148 002c 01F0      		breq .L134
 242:quantum/quantum.c **** #endif
 2149               		.loc 1 242 13 view .LVU481
 2150 002e BE01      		movw r22,r28
 2151 0030 C801      		movw r24,r16
 2152 0032 0E94 0000 		call process_combo
 2153               	.LVL218:
 233:quantum/quantum.c **** #endif
 2154               		.loc 1 233 48 view .LVU482
 2155 0036 8823      		tst r24
 2156 0038 01F0      		breq .L134
 254:quantum/quantum.c **** #endif
 2157               		.loc 1 254 13 view .LVU483
 2158 003a BE01      		movw r22,r28
 2159 003c C801      		movw r24,r16
 2160 003e 0E94 0000 		call process_space_cadet
 2161               	.LVL219:
 242:quantum/quantum.c **** #endif
 2162               		.loc 1 242 44 view .LVU484
 2163 0042 8823      		tst r24
 2164 0044 01F0      		breq .L134
 257:quantum/quantum.c **** #endif
 2165               		.loc 1 257 13 view .LVU485
 2166 0046 BE01      		movw r22,r28
 2167 0048 C801      		movw r24,r16
 2168 004a 0E94 0000 		call process_magic
 2169               	.LVL220:
 254:quantum/quantum.c **** #endif
 2170               		.loc 1 254 50 view .LVU486
 2171 004e 8823      		tst r24
 2172 0050 01F0      		breq .L134
 260:quantum/quantum.c **** #endif
 2173               		.loc 1 260 13 discriminator 2 view .LVU487
 2174 0052 BE01      		movw r22,r28
 2175 0054 C801      		movw r24,r16
 2176 0056 0E94 0000 		call process_grave_esc
 2177               	.LVL221:
 257:quantum/quantum.c **** #endif
 2178               		.loc 1 257 44 discriminator 2 view .LVU488
 2179 005a 8823      		tst r24
 2180 005c 01F0      		breq .L134
 269:quantum/quantum.c ****         switch (keycode) {
 2181               		.loc 1 269 5 is_stmt 1 view .LVU489
 269:quantum/quantum.c ****         switch (keycode) {
 2182               		.loc 1 269 8 is_stmt 0 view .LVU490
 2183 005e 8A81      		ldd r24,Y+2
 2184 0060 8823      		tst r24
 2185 0062 01F0      		breq .L138
 270:quantum/quantum.c ****             case RESET:
 2186               		.loc 1 270 9 is_stmt 1 view .LVU491
 2187 0064 0115      		cp r16,__zero_reg__
 2188 0066 8CE5      		ldi r24,92
 2189 0068 1807      		cpc r17,r24
 2190 006a 01F0      		breq .L139
 2191 006c 0E3D      		cpi r16,-34
 2192 006e 1C45      		sbci r17,92
 2193 0070 01F0      		breq .L140
 2194               	.L138:
 322:quantum/quantum.c **** }
 2195               		.loc 1 322 5 view .LVU492
 322:quantum/quantum.c **** }
 2196               		.loc 1 322 12 is_stmt 0 view .LVU493
 2197 0072 CE01      		movw r24,r28
 2198               	/* epilogue start */
 323:quantum/quantum.c **** 
 2199               		.loc 1 323 1 view .LVU494
 2200 0074 DF91      		pop r29
 2201 0076 CF91      		pop r28
 2202               	.LVL222:
 323:quantum/quantum.c **** 
 2203               		.loc 1 323 1 view .LVU495
 2204 0078 1F91      		pop r17
 2205 007a 0F91      		pop r16
 2206               	.LVL223:
 322:quantum/quantum.c **** }
 2207               		.loc 1 322 12 view .LVU496
 2208 007c 0C94 0000 		jmp process_action_kb
 2209               	.LVL224:
 2210               	.L139:
 272:quantum/quantum.c ****                 return false;
 2211               		.loc 1 272 17 is_stmt 1 view .LVU497
 2212 0080 0E94 0000 		call reset_keyboard
 2213               	.LVL225:
 273:quantum/quantum.c **** #ifndef NO_DEBUG
 2214               		.loc 1 273 17 view .LVU498
 2215               	.L134:
 323:quantum/quantum.c **** 
 2216               		.loc 1 323 1 is_stmt 0 view .LVU499
 2217 0084 80E0      		ldi r24,0
 2218               	/* epilogue start */
 2219 0086 DF91      		pop r29
 2220 0088 CF91      		pop r28
 2221               	.LVL226:
 323:quantum/quantum.c **** 
 2222               		.loc 1 323 1 view .LVU500
 2223 008a 1F91      		pop r17
 2224 008c 0F91      		pop r16
 2225               	.LVL227:
 323:quantum/quantum.c **** 
 2226               		.loc 1 323 1 view .LVU501
 2227 008e 0895      		ret
 2228               	.LVL228:
 2229               	.L140:
 285:quantum/quantum.c ****                 return false;
 2230               		.loc 1 285 17 is_stmt 1 view .LVU502
 2231 0090 0E94 0000 		call eeconfig_init
 2232               	.LVL229:
 286:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
 2233               		.loc 1 286 17 view .LVU503
 286:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
 2234               		.loc 1 286 24 is_stmt 0 view .LVU504
 2235 0094 00C0      		rjmp .L134
 2236               		.cfi_endproc
 2237               	.LFE124:
 2239               		.weak	ascii_to_keycode_lut
 2240               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 2243               	ascii_to_keycode_lut:
 2244 0000 00        		.byte	0
 2245 0001 00        		.byte	0
 2246 0002 00        		.byte	0
 2247 0003 00        		.byte	0
 2248 0004 00        		.byte	0
 2249 0005 00        		.byte	0
 2250 0006 00        		.byte	0
 2251 0007 00        		.byte	0
 2252 0008 2A        		.byte	42
 2253 0009 2B        		.byte	43
 2254 000a 28        		.byte	40
 2255 000b 00        		.byte	0
 2256 000c 00        		.byte	0
 2257 000d 00        		.byte	0
 2258 000e 00        		.byte	0
 2259 000f 00        		.byte	0
 2260 0010 00        		.byte	0
 2261 0011 00        		.byte	0
 2262 0012 00        		.byte	0
 2263 0013 00        		.byte	0
 2264 0014 00        		.byte	0
 2265 0015 00        		.byte	0
 2266 0016 00        		.byte	0
 2267 0017 00        		.byte	0
 2268 0018 00        		.byte	0
 2269 0019 00        		.byte	0
 2270 001a 00        		.byte	0
 2271 001b 29        		.byte	41
 2272 001c 00        		.byte	0
 2273 001d 00        		.byte	0
 2274 001e 00        		.byte	0
 2275 001f 00        		.byte	0
 2276 0020 2C        		.byte	44
 2277 0021 1E        		.byte	30
 2278 0022 34        		.byte	52
 2279 0023 20        		.byte	32
 2280 0024 21        		.byte	33
 2281 0025 22        		.byte	34
 2282 0026 24        		.byte	36
 2283 0027 34        		.byte	52
 2284 0028 26        		.byte	38
 2285 0029 27        		.byte	39
 2286 002a 25        		.byte	37
 2287 002b 2E        		.byte	46
 2288 002c 36        		.byte	54
 2289 002d 2D        		.byte	45
 2290 002e 37        		.byte	55
 2291 002f 38        		.byte	56
 2292 0030 27        		.byte	39
 2293 0031 1E        		.byte	30
 2294 0032 1F        		.byte	31
 2295 0033 20        		.byte	32
 2296 0034 21        		.byte	33
 2297 0035 22        		.byte	34
 2298 0036 23        		.byte	35
 2299 0037 24        		.byte	36
 2300 0038 25        		.byte	37
 2301 0039 26        		.byte	38
 2302 003a 33        		.byte	51
 2303 003b 33        		.byte	51
 2304 003c 36        		.byte	54
 2305 003d 2E        		.byte	46
 2306 003e 37        		.byte	55
 2307 003f 38        		.byte	56
 2308 0040 1F        		.byte	31
 2309 0041 04        		.byte	4
 2310 0042 05        		.byte	5
 2311 0043 06        		.byte	6
 2312 0044 07        		.byte	7
 2313 0045 08        		.byte	8
 2314 0046 09        		.byte	9
 2315 0047 0A        		.byte	10
 2316 0048 0B        		.byte	11
 2317 0049 0C        		.byte	12
 2318 004a 0D        		.byte	13
 2319 004b 0E        		.byte	14
 2320 004c 0F        		.byte	15
 2321 004d 10        		.byte	16
 2322 004e 11        		.byte	17
 2323 004f 12        		.byte	18
 2324 0050 13        		.byte	19
 2325 0051 14        		.byte	20
 2326 0052 15        		.byte	21
 2327 0053 16        		.byte	22
 2328 0054 17        		.byte	23
 2329 0055 18        		.byte	24
 2330 0056 19        		.byte	25
 2331 0057 1A        		.byte	26
 2332 0058 1B        		.byte	27
 2333 0059 1C        		.byte	28
 2334 005a 1D        		.byte	29
 2335 005b 2F        		.byte	47
 2336 005c 31        		.byte	49
 2337 005d 30        		.byte	48
 2338 005e 23        		.byte	35
 2339 005f 2D        		.byte	45
 2340 0060 35        		.byte	53
 2341 0061 04        		.byte	4
 2342 0062 05        		.byte	5
 2343 0063 06        		.byte	6
 2344 0064 07        		.byte	7
 2345 0065 08        		.byte	8
 2346 0066 09        		.byte	9
 2347 0067 0A        		.byte	10
 2348 0068 0B        		.byte	11
 2349 0069 0C        		.byte	12
 2350 006a 0D        		.byte	13
 2351 006b 0E        		.byte	14
 2352 006c 0F        		.byte	15
 2353 006d 10        		.byte	16
 2354 006e 11        		.byte	17
 2355 006f 12        		.byte	18
 2356 0070 13        		.byte	19
 2357 0071 14        		.byte	20
 2358 0072 15        		.byte	21
 2359 0073 16        		.byte	22
 2360 0074 17        		.byte	23
 2361 0075 18        		.byte	24
 2362 0076 19        		.byte	25
 2363 0077 1A        		.byte	26
 2364 0078 1B        		.byte	27
 2365 0079 1C        		.byte	28
 2366 007a 1D        		.byte	29
 2367 007b 2F        		.byte	47
 2368 007c 31        		.byte	49
 2369 007d 30        		.byte	48
 2370 007e 35        		.byte	53
 2371 007f 4C        		.byte	76
 2372               		.weak	ascii_to_altgr_lut
 2373               		.section	.progmem.data.ascii_to_altgr_lut,"a"
 2376               	ascii_to_altgr_lut:
 2377 0000 0000 0000 		.zero	128
 2377      0000 0000 
 2377      0000 0000 
 2377      0000 0000 
 2377      0000 0000 
 2378               		.weak	ascii_to_shift_lut
 2379               		.section	.progmem.data.ascii_to_shift_lut,"a"
 2382               	ascii_to_shift_lut:
 2383 0000 00        		.byte	0
 2384 0001 00        		.byte	0
 2385 0002 00        		.byte	0
 2386 0003 00        		.byte	0
 2387 0004 00        		.byte	0
 2388 0005 00        		.byte	0
 2389 0006 00        		.byte	0
 2390 0007 00        		.byte	0
 2391 0008 00        		.byte	0
 2392 0009 00        		.byte	0
 2393 000a 00        		.byte	0
 2394 000b 00        		.byte	0
 2395 000c 00        		.byte	0
 2396 000d 00        		.byte	0
 2397 000e 00        		.byte	0
 2398 000f 00        		.byte	0
 2399 0010 00        		.byte	0
 2400 0011 00        		.byte	0
 2401 0012 00        		.byte	0
 2402 0013 00        		.byte	0
 2403 0014 00        		.byte	0
 2404 0015 00        		.byte	0
 2405 0016 00        		.byte	0
 2406 0017 00        		.byte	0
 2407 0018 00        		.byte	0
 2408 0019 00        		.byte	0
 2409 001a 00        		.byte	0
 2410 001b 00        		.byte	0
 2411 001c 00        		.byte	0
 2412 001d 00        		.byte	0
 2413 001e 00        		.byte	0
 2414 001f 00        		.byte	0
 2415 0020 00        		.byte	0
 2416 0021 01        		.byte	1
 2417 0022 01        		.byte	1
 2418 0023 01        		.byte	1
 2419 0024 01        		.byte	1
 2420 0025 01        		.byte	1
 2421 0026 01        		.byte	1
 2422 0027 00        		.byte	0
 2423 0028 01        		.byte	1
 2424 0029 01        		.byte	1
 2425 002a 01        		.byte	1
 2426 002b 01        		.byte	1
 2427 002c 00        		.byte	0
 2428 002d 00        		.byte	0
 2429 002e 00        		.byte	0
 2430 002f 00        		.byte	0
 2431 0030 00        		.byte	0
 2432 0031 00        		.byte	0
 2433 0032 00        		.byte	0
 2434 0033 00        		.byte	0
 2435 0034 00        		.byte	0
 2436 0035 00        		.byte	0
 2437 0036 00        		.byte	0
 2438 0037 00        		.byte	0
 2439 0038 00        		.byte	0
 2440 0039 00        		.byte	0
 2441 003a 01        		.byte	1
 2442 003b 00        		.byte	0
 2443 003c 01        		.byte	1
 2444 003d 00        		.byte	0
 2445 003e 01        		.byte	1
 2446 003f 01        		.byte	1
 2447 0040 01        		.byte	1
 2448 0041 01        		.byte	1
 2449 0042 01        		.byte	1
 2450 0043 01        		.byte	1
 2451 0044 01        		.byte	1
 2452 0045 01        		.byte	1
 2453 0046 01        		.byte	1
 2454 0047 01        		.byte	1
 2455 0048 01        		.byte	1
 2456 0049 01        		.byte	1
 2457 004a 01        		.byte	1
 2458 004b 01        		.byte	1
 2459 004c 01        		.byte	1
 2460 004d 01        		.byte	1
 2461 004e 01        		.byte	1
 2462 004f 01        		.byte	1
 2463 0050 01        		.byte	1
 2464 0051 01        		.byte	1
 2465 0052 01        		.byte	1
 2466 0053 01        		.byte	1
 2467 0054 01        		.byte	1
 2468 0055 01        		.byte	1
 2469 0056 01        		.byte	1
 2470 0057 01        		.byte	1
 2471 0058 01        		.byte	1
 2472 0059 01        		.byte	1
 2473 005a 01        		.byte	1
 2474 005b 00        		.byte	0
 2475 005c 00        		.byte	0
 2476 005d 00        		.byte	0
 2477 005e 01        		.byte	1
 2478 005f 01        		.byte	1
 2479 0060 00        		.byte	0
 2480 0061 00        		.byte	0
 2481 0062 00        		.byte	0
 2482 0063 00        		.byte	0
 2483 0064 00        		.byte	0
 2484 0065 00        		.byte	0
 2485 0066 00        		.byte	0
 2486 0067 00        		.byte	0
 2487 0068 00        		.byte	0
 2488 0069 00        		.byte	0
 2489 006a 00        		.byte	0
 2490 006b 00        		.byte	0
 2491 006c 00        		.byte	0
 2492 006d 00        		.byte	0
 2493 006e 00        		.byte	0
 2494 006f 00        		.byte	0
 2495 0070 00        		.byte	0
 2496 0071 00        		.byte	0
 2497 0072 00        		.byte	0
 2498 0073 00        		.byte	0
 2499 0074 00        		.byte	0
 2500 0075 00        		.byte	0
 2501 0076 00        		.byte	0
 2502 0077 00        		.byte	0
 2503 0078 00        		.byte	0
 2504 0079 00        		.byte	0
 2505 007a 00        		.byte	0
 2506 007b 01        		.byte	1
 2507 007c 01        		.byte	1
 2508 007d 01        		.byte	1
 2509 007e 01        		.byte	1
 2510 007f 00        		.byte	0
 2511               		.text
 2512               	.Letext0:
 2513               		.file 3 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 2514               		.file 4 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 2515               		.file 5 "tmk_core/common/keyboard.h"
 2516               		.file 6 "tmk_core/common/action.h"
 2517               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2518               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2519               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 2520               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2521               		.file 11 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
 2522               		.file 12 "tmk_core/common/report.h"
 2523               		.file 13 "tmk_core/common/led.h"
 2524               		.file 14 "tmk_core/common/host.h"
 2525               		.file 15 "tmk_core/common/debug.h"
 2526               		.file 16 "quantum/keycode_config.h"
 2527               		.file 17 "tmk_core/common/keycode.h"
 2528               		.file 18 "quantum/quantum_keycodes.h"
 2529               		.file 19 "quantum/keymap.h"
 2530               		.file 20 "tmk_core/common/action_layer.h"
 2531               		.file 21 "tmk_core/common/timer.h"
 2532               		.file 22 "tmk_core/common/action_util.h"
 2533               		.file 23 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchai
 2534               		.file 24 "quantum/process_keycode/process_tap_dance.h"
 2535               		.file 25 "quantum/quantum.h"
 2536               		.file 26 "quantum/process_keycode/process_combo.h"
 2537               		.file 27 "tmk_core/common/eeconfig.h"
 2538               		.file 28 "tmk_core/common/matrix.h"
 2539               		.file 29 "tmk_core/common/bootloader.h"
 2540               		.file 30 "quantum/process_keycode/process_space_cadet.h"
 2541               		.file 31 "quantum/process_keycode/process_magic.h"
 2542               		.file 32 "quantum/process_keycode/process_grave_esc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 quantum.c
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:2      *ABS*:0000003e __SP_H__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:3      *ABS*:0000003d __SP_L__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:4      *ABS*:0000003f __SREG__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:6      *ABS*:00000001 __zero_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:12     .text.do_code16:00000000 do_code16
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:155    .text.register_code16:00000000 register_code16
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:213    .text.unregister_code16:00000000 unregister_code16
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:271    .text.tap_code16:00000000 tap_code16
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:310    .text.process_action_kb:00000000 process_action_kb
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:332    .text.process_record_user:00000000 process_record_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:354    .text.process_record_kb:00000000 process_record_kb
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:374    .text.get_event_keycode:00000000 get_event_keycode
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:481    .text.get_record_keycode:00000000 get_record_keycode
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:510    .text.send_char:00000000 send_char
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:2243   .progmem.data.ascii_to_keycode_lut:00000000 ascii_to_keycode_lut
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:2382   .progmem.data.ascii_to_shift_lut:00000000 ascii_to_shift_lut
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:2376   .progmem.data.ascii_to_altgr_lut:00000000 ascii_to_altgr_lut
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:669    .text.send_string_with_delay:00000000 send_string_with_delay
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:846    .text.send_string:00000000 send_string
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:866    .text.send_string_with_delay_P:00000000 send_string_with_delay_P
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1094   .text.send_string_P:00000000 send_string_P
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1114   .text.set_single_persistent_default_layer:00000000 set_single_persistent_default_layer
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1166   .text.update_tri_layer_state:00000000 update_tri_layer_state
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1339   .text.update_tri_layer:00000000 update_tri_layer
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1381   .text.tap_random_base64:00000000 tap_random_base64
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1516   .text.bootmagic_lite:00000000 bootmagic_lite
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1575   .text.matrix_init_quantum:00000000 matrix_init_quantum
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1603   .text.matrix_scan_quantum:00000000 matrix_scan_quantum
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1626   .text.send_nibble:00000000 send_nibble
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1691   .text.send_byte:00000000 send_byte
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1731   .text.send_word:00000000 send_word
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1768   .text.send_dword:00000000 send_dword
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1816   .text.hex_to_keycode:00000000 hex_to_keycode
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1861   .text.api_send_unicode:00000000 api_send_unicode
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1879   .text.led_set_user:00000000 led_set_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1898   .text.led_set_kb:00000000 led_set_kb
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1917   .text.led_update_user:00000000 led_update_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1939   .text.led_update_kb:00000000 led_update_kb
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1959   .text.led_init_ports:00000000 led_init_ports
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:1977   .text.led_set:00000000 led_set
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:2011   .text.startup_user:00000000 startup_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:2026   .text.shutdown_user:00000000 shutdown_user
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:2041   .text.reset_keyboard:00000000 reset_keyboard
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccP5zLz1.s:2094   .text.process_record_quantum:00000000 process_record_quantum

UNDEFINED SYMBOLS
register_weak_mods
register_mods
register_code
unregister_code
unregister_weak_mods
unregister_mods
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
read_source_layers_cache
tap_code
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
matrix_scan
matrix_get_row
eeconfig_disable
bootloader_jump
eeconfig_is_enabled
eeconfig_init
matrix_init_kb
matrix_scan_tap_dance
matrix_scan_combo
matrix_scan_kb
clear_keyboard
preprocess_tap_dance
process_tap_dance
process_combo
process_space_cadet
process_magic
process_grave_esc
