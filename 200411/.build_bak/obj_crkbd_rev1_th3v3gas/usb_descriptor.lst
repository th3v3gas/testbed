   1               		.file	"usb_descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_usb_descriptor,"ax",@progbits
  11               	.global	get_usb_descriptor
  13               	get_usb_descriptor:
  14               	.LVL0:
  15               	.LFB102:
  16               		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****                          LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****          Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****     dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****                      www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****     Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****     Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****     Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****     software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****     without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****     all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****     permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****     documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****     advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****     software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****     The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****     software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****     and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****     special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****     whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****     in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****     arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****     this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** 
  43:tmk_core/protocol/usb_descriptor.c **** // clang-format off
  44:tmk_core/protocol/usb_descriptor.c **** 
  45:tmk_core/protocol/usb_descriptor.c **** /*
  46:tmk_core/protocol/usb_descriptor.c ****  * HID report descriptors
  47:tmk_core/protocol/usb_descriptor.c ****  */
  48:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  49:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
  50:tmk_core/protocol/usb_descriptor.c **** #    define SHARED_REPORT_STARTED
  51:tmk_core/protocol/usb_descriptor.c **** #else
  52:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] = {
  53:tmk_core/protocol/usb_descriptor.c **** #endif
  54:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
  55:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
  56:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
  57:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  58:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_KEYBOARD),
  59:tmk_core/protocol/usb_descriptor.c **** #endif
  60:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
  61:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  62:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
  63:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
  64:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  65:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  66:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  67:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  68:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  69:tmk_core/protocol/usb_descriptor.c ****         // Reserved (1 byte)
  70:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  71:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  72:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),
  73:tmk_core/protocol/usb_descriptor.c ****         // Keycodes (6 bytes)
  74:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  75:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
  76:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF),
  77:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  78:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  79:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  80:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  81:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  82:tmk_core/protocol/usb_descriptor.c **** 
  83:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
  84:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
  85:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
  86:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
  87:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  88:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  89:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  90:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
  91:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  92:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  93:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  94:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
  95:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
  96:tmk_core/protocol/usb_descriptor.c **** };
  97:tmk_core/protocol/usb_descriptor.c **** #endif
  98:tmk_core/protocol/usb_descriptor.c **** 
  99:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 100:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 101:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] = {
 102:tmk_core/protocol/usb_descriptor.c **** #    elif !defined(SHARED_REPORT_STARTED)
 103:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 104:tmk_core/protocol/usb_descriptor.c **** #        define SHARED_REPORT_STARTED
 105:tmk_core/protocol/usb_descriptor.c **** #    endif
 106:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),            // Generic Desktop
 107:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02),                 // Mouse
 108:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),            // Application
 109:tmk_core/protocol/usb_descriptor.c **** #    ifdef MOUSE_SHARED_EP
 110:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_MOUSE),
 111:tmk_core/protocol/usb_descriptor.c **** #    endif
 112:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x01),             // Pointer
 113:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00),        // Physical
 114:tmk_core/protocol/usb_descriptor.c ****             // Buttons (5 bits)
 115:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09),    // Button
 116:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01), // Button 1
 117:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05), // Button 5
 118:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 119:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 120:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 121:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 122:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 123:tmk_core/protocol/usb_descriptor.c ****             // Button padding (3 bits)
 124:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 125:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 126:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 127:tmk_core/protocol/usb_descriptor.c **** 
 128:tmk_core/protocol/usb_descriptor.c ****             // X/Y position (2 bytes)
 129:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01),    // Generic Desktop
 130:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30),         // X
 131:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31),         // Y
 132:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 133:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 134:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 135:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 136:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 137:tmk_core/protocol/usb_descriptor.c **** 
 138:tmk_core/protocol/usb_descriptor.c ****             // Vertical wheel (1 byte)
 139:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x38),         // Wheel
 140:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 141:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 142:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 143:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 144:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 145:tmk_core/protocol/usb_descriptor.c ****             // Horizontal wheel (1 byte)
 146:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C),    // Consumer
 147:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(16, 0x0238),      // AC Pan
 148:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 149:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 150:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 151:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 152:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 153:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 154:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 155:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 156:tmk_core/protocol/usb_descriptor.c **** };
 157:tmk_core/protocol/usb_descriptor.c **** #    endif
 158:tmk_core/protocol/usb_descriptor.c **** #endif
 159:tmk_core/protocol/usb_descriptor.c **** 
 160:tmk_core/protocol/usb_descriptor.c **** #if defined(SHARED_EP_ENABLE) && !defined(SHARED_REPORT_STARTED)
 161:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 162:tmk_core/protocol/usb_descriptor.c **** #endif
 163:tmk_core/protocol/usb_descriptor.c **** 
 164:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 165:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),           // Generic Desktop
 166:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80),                // System Control
 167:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 168:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 169:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0081), // System Power Down
 170:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x0083), // System Wake Up
 171:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 172:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x0003),
 173:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 174:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 175:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 176:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 177:tmk_core/protocol/usb_descriptor.c **** 
 178:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),           // Consumer
 179:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),                // Consumer Control
 180:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 181:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 182:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), // Consumer Control
 183:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x029C), // AC Distribute Vertically
 184:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 185:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 186:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 187:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 188:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 189:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 190:tmk_core/protocol/usb_descriptor.c **** #endif
 191:tmk_core/protocol/usb_descriptor.c **** 
 192:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 193:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
 194:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
 195:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
 196:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_NKRO),
 197:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
 198:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 199:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
 200:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
 201:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 202:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 203:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 204:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 205:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 206:tmk_core/protocol/usb_descriptor.c ****         // Keycodes
 207:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 208:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
 209:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, KEYBOARD_REPORT_BITS * 8 - 1),
 210:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 211:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 212:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, KEYBOARD_REPORT_BITS * 8),
 213:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 214:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 215:tmk_core/protocol/usb_descriptor.c **** 
 216:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
 217:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
 218:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
 219:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
 220:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 221:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 222:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 223:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
 224:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 225:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 226:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 227:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 228:tmk_core/protocol/usb_descriptor.c **** #endif
 229:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 230:tmk_core/protocol/usb_descriptor.c **** };
 231:tmk_core/protocol/usb_descriptor.c **** #endif
 232:tmk_core/protocol/usb_descriptor.c **** 
 233:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 234:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] = {
 235:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF60), // Vendor Defined
 236:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x61),         // Vendor Defined
 237:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 238:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 239:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x62),     // Vendor Defined
 240:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 241:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 242:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 243:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 244:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 245:tmk_core/protocol/usb_descriptor.c **** 
 246:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 247:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x63),     // Vendor Defined
 248:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 249:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 250:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 251:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 252:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 253:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 254:tmk_core/protocol/usb_descriptor.c **** };
 255:tmk_core/protocol/usb_descriptor.c **** #endif
 256:tmk_core/protocol/usb_descriptor.c **** 
 257:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 258:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] = {
 259:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), // Vendor Defined (PJRC Teensy compatible)
 260:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74),         // Vendor Defined (PJRC Teensy compatible)
 261:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 262:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 263:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x75),     // Vendor Defined
 264:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 265:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 266:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 267:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 268:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 269:tmk_core/protocol/usb_descriptor.c **** 
 270:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 271:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x76),     // Vendor Defined
 272:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 273:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 274:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 275:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 276:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 277:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 278:tmk_core/protocol/usb_descriptor.c **** };
 279:tmk_core/protocol/usb_descriptor.c **** #endif
 280:tmk_core/protocol/usb_descriptor.c **** 
 281:tmk_core/protocol/usb_descriptor.c **** /*
 282:tmk_core/protocol/usb_descriptor.c ****  * Device descriptor
 283:tmk_core/protocol/usb_descriptor.c ****  */
 284:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor = {
 285:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 286:tmk_core/protocol/usb_descriptor.c ****         .Size                   = sizeof(USB_Descriptor_Device_t),
 287:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_Device
 288:tmk_core/protocol/usb_descriptor.c ****     },
 289:tmk_core/protocol/usb_descriptor.c ****     .USBSpecification           = VERSION_BCD(1, 1, 0),
 290:tmk_core/protocol/usb_descriptor.c **** 
 291:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 292:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_IADDeviceClass,
 293:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_IADDeviceSubclass,
 294:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_IADDeviceProtocol,
 295:tmk_core/protocol/usb_descriptor.c **** #else
 296:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_NoDeviceClass,
 297:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_NoDeviceSubclass,
 298:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_NoDeviceProtocol,
 299:tmk_core/protocol/usb_descriptor.c **** #endif
 300:tmk_core/protocol/usb_descriptor.c **** 
 301:tmk_core/protocol/usb_descriptor.c ****     .Endpoint0Size              = FIXED_CONTROL_ENDPOINT_SIZE,
 302:tmk_core/protocol/usb_descriptor.c ****     // Specified in config.h
 303:tmk_core/protocol/usb_descriptor.c ****     .VendorID                   = VENDOR_ID,
 304:tmk_core/protocol/usb_descriptor.c ****     .ProductID                  = PRODUCT_ID,
 305:tmk_core/protocol/usb_descriptor.c ****     .ReleaseNumber              = DEVICE_VER,
 306:tmk_core/protocol/usb_descriptor.c ****     .ManufacturerStrIndex       = 0x01,
 307:tmk_core/protocol/usb_descriptor.c ****     .ProductStrIndex            = 0x02,
 308:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex          = 0x03,
 309:tmk_core/protocol/usb_descriptor.c ****     .NumberOfConfigurations     = FIXED_NUM_CONFIGURATIONS
 310:tmk_core/protocol/usb_descriptor.c **** };
 311:tmk_core/protocol/usb_descriptor.c **** 
 312:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
 313:tmk_core/protocol/usb_descriptor.c **** #    define USB_MAX_POWER_CONSUMPTION 500
 314:tmk_core/protocol/usb_descriptor.c **** #endif
 315:tmk_core/protocol/usb_descriptor.c **** 
 316:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_POLLING_INTERVAL_MS
 317:tmk_core/protocol/usb_descriptor.c **** #    define USB_POLLING_INTERVAL_MS 10
 318:tmk_core/protocol/usb_descriptor.c **** #endif
 319:tmk_core/protocol/usb_descriptor.c **** 
 320:tmk_core/protocol/usb_descriptor.c **** /*
 321:tmk_core/protocol/usb_descriptor.c ****  * Configuration descriptors
 322:tmk_core/protocol/usb_descriptor.c ****  */
 323:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor = {
 324:tmk_core/protocol/usb_descriptor.c ****     .Config = {
 325:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 326:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Configuration_Header_t),
 327:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Configuration
 328:tmk_core/protocol/usb_descriptor.c ****         },
 329:tmk_core/protocol/usb_descriptor.c ****         .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 330:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = TOTAL_INTERFACES,
 331:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationNumber    = 1,
 332:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationStrIndex  = NO_DESCRIPTOR,
 333:tmk_core/protocol/usb_descriptor.c ****         .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 334:tmk_core/protocol/usb_descriptor.c ****         .MaxPowerConsumption    = USB_CONFIG_POWER_MA(USB_MAX_POWER_CONSUMPTION)
 335:tmk_core/protocol/usb_descriptor.c ****     },
 336:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 337:tmk_core/protocol/usb_descriptor.c ****     /*
 338:tmk_core/protocol/usb_descriptor.c ****      * Keyboard
 339:tmk_core/protocol/usb_descriptor.c ****      */
 340:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_Interface = {
 341:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 342:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 343:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 344:tmk_core/protocol/usb_descriptor.c ****         },
 345:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = KEYBOARD_INTERFACE,
 346:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 347:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 348:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 349:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 350:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 351:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 352:tmk_core/protocol/usb_descriptor.c ****     },
 353:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_HID = {
 354:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 355:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 356:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 357:tmk_core/protocol/usb_descriptor.c ****         },
 358:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 359:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 360:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 361:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 362:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(KeyboardReport)
 363:tmk_core/protocol/usb_descriptor.c ****     },
 364:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_INEndpoint = {
 365:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 366:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 367:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 368:tmk_core/protocol/usb_descriptor.c ****         },
 369:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 370:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 371:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = KEYBOARD_EPSIZE,
 372:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 373:tmk_core/protocol/usb_descriptor.c ****     },
 374:tmk_core/protocol/usb_descriptor.c **** #endif
 375:tmk_core/protocol/usb_descriptor.c **** 
 376:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 377:tmk_core/protocol/usb_descriptor.c ****     /*
 378:tmk_core/protocol/usb_descriptor.c ****      * Raw HID
 379:tmk_core/protocol/usb_descriptor.c ****      */
 380:tmk_core/protocol/usb_descriptor.c ****     .Raw_Interface = {
 381:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 382:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 383:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 384:tmk_core/protocol/usb_descriptor.c ****         },
 385:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = RAW_INTERFACE,
 386:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 387:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 388:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 389:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 390:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 391:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 392:tmk_core/protocol/usb_descriptor.c ****     },
 393:tmk_core/protocol/usb_descriptor.c ****     .Raw_HID = {
 394:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 395:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 396:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 397:tmk_core/protocol/usb_descriptor.c ****         },
 398:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 399:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 400:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 401:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 402:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(RawReport)
 403:tmk_core/protocol/usb_descriptor.c ****     },
 404:tmk_core/protocol/usb_descriptor.c ****     .Raw_INEndpoint = {
 405:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 406:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 407:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 408:tmk_core/protocol/usb_descriptor.c ****         },
 409:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | RAW_IN_EPNUM),
 410:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 411:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 412:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 413:tmk_core/protocol/usb_descriptor.c ****     },
 414:tmk_core/protocol/usb_descriptor.c ****     .Raw_OUTEndpoint = {
 415:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 416:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 417:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 418:tmk_core/protocol/usb_descriptor.c ****         },
 419:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | RAW_OUT_EPNUM),
 420:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 421:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 422:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 423:tmk_core/protocol/usb_descriptor.c ****     },
 424:tmk_core/protocol/usb_descriptor.c **** #endif
 425:tmk_core/protocol/usb_descriptor.c **** 
 426:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 427:tmk_core/protocol/usb_descriptor.c ****     /*
 428:tmk_core/protocol/usb_descriptor.c ****      * Mouse
 429:tmk_core/protocol/usb_descriptor.c ****      */
 430:tmk_core/protocol/usb_descriptor.c ****     .Mouse_Interface  = {
 431:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 432:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 433:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 434:tmk_core/protocol/usb_descriptor.c ****         },
 435:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = MOUSE_INTERFACE,
 436:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 437:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 438:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 439:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 440:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_MouseBootProtocol,
 441:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 442:tmk_core/protocol/usb_descriptor.c ****     },
 443:tmk_core/protocol/usb_descriptor.c ****     .Mouse_HID = {
 444:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 445:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 446:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 447:tmk_core/protocol/usb_descriptor.c ****         },
 448:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 449:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 450:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 451:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 452:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(MouseReport)
 453:tmk_core/protocol/usb_descriptor.c ****     },
 454:tmk_core/protocol/usb_descriptor.c ****     .Mouse_INEndpoint = {
 455:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 456:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 457:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 458:tmk_core/protocol/usb_descriptor.c ****         },
 459:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 460:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 461:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = MOUSE_EPSIZE,
 462:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 463:tmk_core/protocol/usb_descriptor.c ****     },
 464:tmk_core/protocol/usb_descriptor.c **** #endif
 465:tmk_core/protocol/usb_descriptor.c **** 
 466:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 467:tmk_core/protocol/usb_descriptor.c ****     /*
 468:tmk_core/protocol/usb_descriptor.c ****      * Shared
 469:tmk_core/protocol/usb_descriptor.c ****      */
 470:tmk_core/protocol/usb_descriptor.c ****     .Shared_Interface = {
 471:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 472:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 473:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 474:tmk_core/protocol/usb_descriptor.c ****         },
 475:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = SHARED_INTERFACE,
 476:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 477:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 478:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 479:tmk_core/protocol/usb_descriptor.c **** #    ifdef KEYBOARD_SHARED_EP
 480:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 481:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 482:tmk_core/protocol/usb_descriptor.c **** #    else
 483:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 484:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 485:tmk_core/protocol/usb_descriptor.c **** #    endif
 486:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 487:tmk_core/protocol/usb_descriptor.c ****     },
 488:tmk_core/protocol/usb_descriptor.c ****     .Shared_HID = {
 489:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 490:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 491:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 492:tmk_core/protocol/usb_descriptor.c ****         },
 493:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 494:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 495:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 496:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 497:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(SharedReport)
 498:tmk_core/protocol/usb_descriptor.c ****     },
 499:tmk_core/protocol/usb_descriptor.c ****     .Shared_INEndpoint = {
 500:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 501:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 502:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 503:tmk_core/protocol/usb_descriptor.c ****         },
 504:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | SHARED_IN_EPNUM),
 505:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 506:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = SHARED_EPSIZE,
 507:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 508:tmk_core/protocol/usb_descriptor.c ****     },
 509:tmk_core/protocol/usb_descriptor.c **** #endif
 510:tmk_core/protocol/usb_descriptor.c **** 
 511:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 512:tmk_core/protocol/usb_descriptor.c ****     /*
 513:tmk_core/protocol/usb_descriptor.c ****      * Console
 514:tmk_core/protocol/usb_descriptor.c ****      */
 515:tmk_core/protocol/usb_descriptor.c ****     .Console_Interface = {
 516:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 517:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 518:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 519:tmk_core/protocol/usb_descriptor.c ****         },
 520:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CONSOLE_INTERFACE,
 521:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 522:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 523:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 524:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 525:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 526:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 527:tmk_core/protocol/usb_descriptor.c ****     },
 528:tmk_core/protocol/usb_descriptor.c ****     .Console_HID = {
 529:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 530:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 531:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 532:tmk_core/protocol/usb_descriptor.c ****         },
 533:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 534:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 535:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 536:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 537:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(ConsoleReport)
 538:tmk_core/protocol/usb_descriptor.c ****     },
 539:tmk_core/protocol/usb_descriptor.c ****     .Console_INEndpoint = {
 540:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 541:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 542:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 543:tmk_core/protocol/usb_descriptor.c ****         },
 544:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 545:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 546:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 547:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 548:tmk_core/protocol/usb_descriptor.c ****     },
 549:tmk_core/protocol/usb_descriptor.c ****     .Console_OUTEndpoint = {
 550:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 551:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 552:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 553:tmk_core/protocol/usb_descriptor.c ****         },
 554:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 555:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 556:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 557:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 558:tmk_core/protocol/usb_descriptor.c ****     },
 559:tmk_core/protocol/usb_descriptor.c **** #endif
 560:tmk_core/protocol/usb_descriptor.c **** 
 561:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 562:tmk_core/protocol/usb_descriptor.c ****     /*
 563:tmk_core/protocol/usb_descriptor.c ****      * MIDI
 564:tmk_core/protocol/usb_descriptor.c ****      */
 565:tmk_core/protocol/usb_descriptor.c ****     .Audio_Interface_Association = {
 566:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 567:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 568:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 569:tmk_core/protocol/usb_descriptor.c ****         },
 570:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = AC_INTERFACE,
 571:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 572:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 573:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 574:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 575:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 576:tmk_core/protocol/usb_descriptor.c ****     },
 577:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface = {
 578:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 579:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 580:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 581:tmk_core/protocol/usb_descriptor.c ****         },
 582:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AC_INTERFACE,
 583:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 584:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 0,
 585:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 586:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 587:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 588:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 589:tmk_core/protocol/usb_descriptor.c ****     },
 590:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface_SPC = {
 591:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 592:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 593:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 594:tmk_core/protocol/usb_descriptor.c ****         },
 595:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_Header,
 596:tmk_core/protocol/usb_descriptor.c ****         .ACSpecification        = VERSION_BCD(1, 0, 0),
 597:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 598:tmk_core/protocol/usb_descriptor.c ****         .InCollection           = 1,
 599:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 600:tmk_core/protocol/usb_descriptor.c ****     },
 601:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface = {
 602:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 603:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 604:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 605:tmk_core/protocol/usb_descriptor.c ****         },
 606:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 607:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 608:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 609:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 610:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_MIDIStreamingSubclass,
 611:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_StreamingProtocol,
 612:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 613:tmk_core/protocol/usb_descriptor.c ****     },
 614:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface_SPC = {
 615:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 616:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_AudioInterface_AS_t),
 617:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 618:tmk_core/protocol/usb_descriptor.c ****         },
 619:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_General,
 620:tmk_core/protocol/usb_descriptor.c ****         .AudioSpecification     = VERSION_BCD(1, 0, 0),
 621:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = offsetof(USB_Descriptor_Configuration_t, MIDI_Out_Jack_Endpoint_S
 622:tmk_core/protocol/usb_descriptor.c ****     },
 623:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Emb = {
 624:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 625:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 626:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 627:tmk_core/protocol/usb_descriptor.c ****         },
 628:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 629:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 630:tmk_core/protocol/usb_descriptor.c ****         .JackID = 0x01,
 631:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 632:tmk_core/protocol/usb_descriptor.c ****     },
 633:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Ext = {
 634:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 635:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 636:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 637:tmk_core/protocol/usb_descriptor.c ****         },
 638:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 639:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 640:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x02,
 641:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 642:tmk_core/protocol/usb_descriptor.c ****     },
 643:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Emb = {
 644:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 645:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 646:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 647:tmk_core/protocol/usb_descriptor.c ****         },
 648:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 649:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 650:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x03,
 651:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 652:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x02},
 653:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 654:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 655:tmk_core/protocol/usb_descriptor.c ****     },
 656:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Ext = {
 657:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 658:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 659:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 660:tmk_core/protocol/usb_descriptor.c ****         },
 661:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 662:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 663:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x04,
 664:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 665:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x01},
 666:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 667:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 668:tmk_core/protocol/usb_descriptor.c ****     },
 669:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint = {
 670:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 671:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 672:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 673:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 674:tmk_core/protocol/usb_descriptor.c ****             },
 675:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = MIDI_STREAM_OUT_EPADDR,
 676:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 677:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 678:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 679:tmk_core/protocol/usb_descriptor.c ****         },
 680:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 681:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 682:tmk_core/protocol/usb_descriptor.c ****     },
 683:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint_SPC = {
 684:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 685:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 686:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 687:tmk_core/protocol/usb_descriptor.c ****         },
 688:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 689:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 690:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x01}
 691:tmk_core/protocol/usb_descriptor.c ****     },
 692:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint = {
 693:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 694:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 695:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 696:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 697:tmk_core/protocol/usb_descriptor.c ****             },
 698:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = MIDI_STREAM_IN_EPADDR,
 699:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 700:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 701:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 702:tmk_core/protocol/usb_descriptor.c ****         },
 703:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 704:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 705:tmk_core/protocol/usb_descriptor.c ****     },
 706:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint_SPC = {
 707:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 708:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 709:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 710:tmk_core/protocol/usb_descriptor.c ****         },
 711:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 712:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 713:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x03}
 714:tmk_core/protocol/usb_descriptor.c ****     },
 715:tmk_core/protocol/usb_descriptor.c **** #endif
 716:tmk_core/protocol/usb_descriptor.c **** 
 717:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 718:tmk_core/protocol/usb_descriptor.c ****     /*
 719:tmk_core/protocol/usb_descriptor.c ****      * Virtual Serial
 720:tmk_core/protocol/usb_descriptor.c ****      */
 721:tmk_core/protocol/usb_descriptor.c ****     .CDC_Interface_Association = {
 722:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 723:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 724:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 725:tmk_core/protocol/usb_descriptor.c ****         },
 726:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = CCI_INTERFACE,
 727:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 728:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 729:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 730:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 731:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 732:tmk_core/protocol/usb_descriptor.c ****     },
 733:tmk_core/protocol/usb_descriptor.c ****     .CDC_CCI_Interface = {
 734:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 735:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 736:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 737:tmk_core/protocol/usb_descriptor.c ****         },
 738:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CCI_INTERFACE,
 739:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 740:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 741:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 742:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 743:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 744:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 745:tmk_core/protocol/usb_descriptor.c ****     },
 746:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Header = {
 747:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 748:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalHeader_t),
 749:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 750:tmk_core/protocol/usb_descriptor.c ****         },
 751:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x00,
 752:tmk_core/protocol/usb_descriptor.c ****         .CDCSpecification       = VERSION_BCD(1, 1, 0),
 753:tmk_core/protocol/usb_descriptor.c ****     },
 754:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_ACM = {
 755:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 756:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalACM_t),
 757:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 758:tmk_core/protocol/usb_descriptor.c ****         },
 759:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x02,
 760:tmk_core/protocol/usb_descriptor.c ****         .Capabilities           = 0x02,
 761:tmk_core/protocol/usb_descriptor.c ****     },
 762:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Union = {
 763:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 764:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalUnion_t),
 765:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 766:tmk_core/protocol/usb_descriptor.c ****         },
 767:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x06,
 768:tmk_core/protocol/usb_descriptor.c ****         .MasterInterfaceNumber  = CCI_INTERFACE,
 769:tmk_core/protocol/usb_descriptor.c ****         .SlaveInterfaceNumber   = CDI_INTERFACE,
 770:tmk_core/protocol/usb_descriptor.c ****     },
 771:tmk_core/protocol/usb_descriptor.c ****     .CDC_NotificationEndpoint = {
 772:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 773:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 774:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 775:tmk_core/protocol/usb_descriptor.c ****         },
 776:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = CDC_NOTIFICATION_EPADDR,
 777:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 778:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 779:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0xFF
 780:tmk_core/protocol/usb_descriptor.c ****     },
 781:tmk_core/protocol/usb_descriptor.c ****     .CDC_DCI_Interface = {
 782:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 783:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 784:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 785:tmk_core/protocol/usb_descriptor.c ****         },
 786:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CDI_INTERFACE,
 787:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 788:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 789:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCDataClass,
 790:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_NoDataSubclass,
 791:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_NoDataProtocol,
 792:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 793:tmk_core/protocol/usb_descriptor.c ****     },
 794:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataOutEndpoint = {
 795:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 796:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 797:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 798:tmk_core/protocol/usb_descriptor.c ****         },
 799:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = CDC_OUT_EPADDR,
 800:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 801:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 802:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 803:tmk_core/protocol/usb_descriptor.c ****     },
 804:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataInEndpoint = {
 805:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 806:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 807:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 808:tmk_core/protocol/usb_descriptor.c ****         },
 809:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = CDC_IN_EPADDR,
 810:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 811:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 812:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 813:tmk_core/protocol/usb_descriptor.c ****     },
 814:tmk_core/protocol/usb_descriptor.c **** #endif
 815:tmk_core/protocol/usb_descriptor.c **** };
 816:tmk_core/protocol/usb_descriptor.c **** 
 817:tmk_core/protocol/usb_descriptor.c **** /*
 818:tmk_core/protocol/usb_descriptor.c ****  * String descriptors
 819:tmk_core/protocol/usb_descriptor.c ****  */
 820:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString = {
 821:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 822:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(1),
 823:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 824:tmk_core/protocol/usb_descriptor.c ****     },
 825:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = {LANGUAGE_ID_ENG}
 826:tmk_core/protocol/usb_descriptor.c **** };
 827:tmk_core/protocol/usb_descriptor.c **** 
 828:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString = {
 829:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 830:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(MANUFACTURER)) - 1), // Subtract 1 for 
 831:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 832:tmk_core/protocol/usb_descriptor.c ****     },
 833:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(MANUFACTURER)
 834:tmk_core/protocol/usb_descriptor.c **** };
 835:tmk_core/protocol/usb_descriptor.c **** 
 836:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString = {
 837:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 838:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(PRODUCT)) - 1), // Subtract 1 for null 
 839:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 840:tmk_core/protocol/usb_descriptor.c ****     },
 841:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(PRODUCT)
 842:tmk_core/protocol/usb_descriptor.c **** };
 843:tmk_core/protocol/usb_descriptor.c **** 
 844:tmk_core/protocol/usb_descriptor.c **** #ifndef SERIAL_NUMBER
 845:tmk_core/protocol/usb_descriptor.c **** #    define SERIAL_NUMBER 0
 846:tmk_core/protocol/usb_descriptor.c **** #endif
 847:tmk_core/protocol/usb_descriptor.c **** 
 848:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString = {
 849:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 850:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(SERIAL_NUMBER)) - 1), // Subtract 1 for
 851:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 852:tmk_core/protocol/usb_descriptor.c ****     },
 853:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(SERIAL_NUMBER)
 854:tmk_core/protocol/usb_descriptor.c **** };
 855:tmk_core/protocol/usb_descriptor.c **** 
 856:tmk_core/protocol/usb_descriptor.c **** // clang-format on
 857:tmk_core/protocol/usb_descriptor.c **** 
 858:tmk_core/protocol/usb_descriptor.c **** /**
 859:tmk_core/protocol/usb_descriptor.c ****  * This function is called by the library when in device mode, and must be overridden (see library 
 860:tmk_core/protocol/usb_descriptor.c ****  * documentation) by the application code so that the address and size of a requested descriptor ca
 861:tmk_core/protocol/usb_descriptor.c ****  * to the USB library. When the device receives a Get Descriptor request on the control endpoint, t
 862:tmk_core/protocol/usb_descriptor.c ****  * is called so that the descriptor details can be passed back and the appropriate descriptor sent 
 863:tmk_core/protocol/usb_descriptor.c ****  * USB host.
 864:tmk_core/protocol/usb_descriptor.c ****  */
 865:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const void** const Descri
  17               		.loc 1 865 113 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 866:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorType  = (wValue >> 8);
  23               		.loc 1 866 5 view .LVU1
  24               		.loc 1 866 45 is_stmt 0 view .LVU2
  25 0000 292F      		mov r18,r25
  26 0002 3327      		clr r19
  27               	.LVL1:
 867:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorIndex = (wValue & 0xFF);
  28               		.loc 1 867 5 is_stmt 1 view .LVU3
 868:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
  29               		.loc 1 868 5 view .LVU4
 869:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  30               		.loc 1 869 5 view .LVU5
 870:tmk_core/protocol/usb_descriptor.c **** 
 871:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType) {
  31               		.loc 1 871 5 view .LVU6
  32 0004 2330      		cpi r18,3
  33 0006 3105      		cpc r19,__zero_reg__
  34 0008 01F0      		breq .L2
  35 000a 00F4      		brsh .L3
  36 000c 2130      		cpi r18,1
  37 000e 3105      		cpc r19,__zero_reg__
  38 0010 01F4      		brne .+2
  39 0012 00C0      		rjmp .L11
  40 0014 2230      		cpi r18,2
  41 0016 3105      		cpc r19,__zero_reg__
  42 0018 01F4      		brne .+2
  43 001a 00C0      		rjmp .L12
  44               	.LVL2:
  45               	.L17:
 869:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  46               		.loc 1 869 19 is_stmt 0 view .LVU7
  47 001c 90E0      		ldi r25,0
  48 001e 80E0      		ldi r24,0
 868:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  49               		.loc 1 868 19 view .LVU8
  50 0020 30E0      		ldi r19,0
  51 0022 20E0      		ldi r18,0
  52 0024 00C0      		rjmp .L4
  53               	.LVL3:
  54               	.L3:
  55               		.loc 1 871 5 view .LVU9
  56 0026 2132      		cpi r18,33
  57 0028 3105      		cpc r19,__zero_reg__
  58 002a 01F0      		breq .L5
  59 002c 2232      		cpi r18,34
  60 002e 3105      		cpc r19,__zero_reg__
  61 0030 01F4      		brne .L17
 872:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 873:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 874:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 875:tmk_core/protocol/usb_descriptor.c **** 
 876:tmk_core/protocol/usb_descriptor.c ****             break;
 877:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 878:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 879:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 880:tmk_core/protocol/usb_descriptor.c **** 
 881:tmk_core/protocol/usb_descriptor.c ****             break;
 882:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 883:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex) {
 884:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 885:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 886:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 887:tmk_core/protocol/usb_descriptor.c **** 
 888:tmk_core/protocol/usb_descriptor.c ****                     break;
 889:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
 890:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
 891:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 892:tmk_core/protocol/usb_descriptor.c **** 
 893:tmk_core/protocol/usb_descriptor.c ****                     break;
 894:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
 895:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
 896:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 897:tmk_core/protocol/usb_descriptor.c **** 
 898:tmk_core/protocol/usb_descriptor.c ****                     break;
 899:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
 900:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
 901:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 902:tmk_core/protocol/usb_descriptor.c **** 
 903:tmk_core/protocol/usb_descriptor.c ****                     break;
 904:tmk_core/protocol/usb_descriptor.c ****             }
 905:tmk_core/protocol/usb_descriptor.c **** 
 906:tmk_core/protocol/usb_descriptor.c ****             break;
 907:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
 908:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 909:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 910:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 911:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Keyboard_HID;
 912:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 913:tmk_core/protocol/usb_descriptor.c ****                     break;
 914:tmk_core/protocol/usb_descriptor.c **** #endif
 915:tmk_core/protocol/usb_descriptor.c **** 
 916:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 917:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 918:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Mouse_HID;
 919:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 920:tmk_core/protocol/usb_descriptor.c **** 
 921:tmk_core/protocol/usb_descriptor.c ****                     break;
 922:tmk_core/protocol/usb_descriptor.c **** #endif
 923:tmk_core/protocol/usb_descriptor.c **** 
 924:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 925:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 926:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Shared_HID;
 927:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 928:tmk_core/protocol/usb_descriptor.c **** 
 929:tmk_core/protocol/usb_descriptor.c ****                     break;
 930:tmk_core/protocol/usb_descriptor.c **** #endif
 931:tmk_core/protocol/usb_descriptor.c **** 
 932:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 933:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 934:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Raw_HID;
 935:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 936:tmk_core/protocol/usb_descriptor.c **** 
 937:tmk_core/protocol/usb_descriptor.c ****                     break;
 938:tmk_core/protocol/usb_descriptor.c **** #endif
 939:tmk_core/protocol/usb_descriptor.c **** 
 940:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 941:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 942:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Console_HID;
 943:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 944:tmk_core/protocol/usb_descriptor.c **** 
 945:tmk_core/protocol/usb_descriptor.c ****                     break;
 946:tmk_core/protocol/usb_descriptor.c **** #endif
 947:tmk_core/protocol/usb_descriptor.c ****             }
 948:tmk_core/protocol/usb_descriptor.c **** 
 949:tmk_core/protocol/usb_descriptor.c ****             break;
 950:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
 951:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
  62               		.loc 1 951 13 is_stmt 1 view .LVU10
 952:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 953:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 954:tmk_core/protocol/usb_descriptor.c ****                     Address = &KeyboardReport;
 955:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  63               		.loc 1 955 29 is_stmt 0 view .LVU11
  64 0032 80E4      		ldi r24,lo8(64)
  65 0034 90E0      		ldi r25,0
  66               	.LVL4:
 954:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  67               		.loc 1 954 29 view .LVU12
  68 0036 20E0      		ldi r18,lo8(KeyboardReport)
  69 0038 30E0      		ldi r19,hi8(KeyboardReport)
  70               	.LVL5:
 954:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  71               		.loc 1 954 29 view .LVU13
  72 003a 6115      		cp r22,__zero_reg__
  73 003c 7105      		cpc r23,__zero_reg__
  74 003e 01F0      		breq .L4
 956:tmk_core/protocol/usb_descriptor.c **** 
 957:tmk_core/protocol/usb_descriptor.c ****                     break;
 958:tmk_core/protocol/usb_descriptor.c **** #endif
 959:tmk_core/protocol/usb_descriptor.c **** 
 960:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 961:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 962:tmk_core/protocol/usb_descriptor.c ****                     Address = &MouseReport;
 963:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(MouseReport);
 964:tmk_core/protocol/usb_descriptor.c **** 
 965:tmk_core/protocol/usb_descriptor.c ****                     break;
 966:tmk_core/protocol/usb_descriptor.c **** #endif
 967:tmk_core/protocol/usb_descriptor.c **** 
 968:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 969:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 970:tmk_core/protocol/usb_descriptor.c ****                     Address = &SharedReport;
 971:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
  75               		.loc 1 971 29 view .LVU14
  76 0040 8BE3      		ldi r24,lo8(59)
  77 0042 90E0      		ldi r25,0
 970:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
  78               		.loc 1 970 29 view .LVU15
  79 0044 20E0      		ldi r18,lo8(SharedReport)
  80 0046 30E0      		ldi r19,hi8(SharedReport)
  81 0048 6130      		cpi r22,1
  82 004a 7105      		cpc r23,__zero_reg__
  83 004c 01F0      		breq .L4
  84 004e 00C0      		rjmp .L17
  85               	.LVL6:
  86               	.L2:
 883:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  87               		.loc 1 883 13 is_stmt 1 view .LVU16
  88 0050 9927      		clr r25
  89               	.LVL7:
 883:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  90               		.loc 1 883 13 is_stmt 0 view .LVU17
  91 0052 8130      		cpi r24,1
  92 0054 9105      		cpc r25,__zero_reg__
  93 0056 01F0      		breq .L7
  94 0058 0097      		sbiw r24,0
  95 005a 01F0      		breq .L8
  96 005c 8230      		cpi r24,2
  97 005e 9105      		cpc r25,__zero_reg__
  98 0060 01F0      		breq .L9
  99 0062 0397      		sbiw r24,3
 100 0064 01F4      		brne .L17
 900:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 101               		.loc 1 900 21 is_stmt 1 view .LVU18
 102               	.LVL8:
 901:tmk_core/protocol/usb_descriptor.c **** 
 103               		.loc 1 901 21 view .LVU19
 104               	.LBB2:
 901:tmk_core/protocol/usb_descriptor.c **** 
 105               		.loc 1 901 31 view .LVU20
 901:tmk_core/protocol/usb_descriptor.c **** 
 106               		.loc 1 901 31 view .LVU21
 901:tmk_core/protocol/usb_descriptor.c **** 
 107               		.loc 1 901 31 view .LVU22
 108 0066 E0E0      		ldi r30,lo8(SerialNumberString)
 109 0068 F0E0      		ldi r31,hi8(SerialNumberString)
 110 006a 00C0      		rjmp .L18
 111               	.LVL9:
 112               	.L8:
 901:tmk_core/protocol/usb_descriptor.c **** 
 113               		.loc 1 901 31 is_stmt 0 view .LVU23
 114               	.LBE2:
 885:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 115               		.loc 1 885 21 is_stmt 1 view .LVU24
 886:tmk_core/protocol/usb_descriptor.c **** 
 116               		.loc 1 886 21 view .LVU25
 117               	.LBB3:
 886:tmk_core/protocol/usb_descriptor.c **** 
 118               		.loc 1 886 31 view .LVU26
 886:tmk_core/protocol/usb_descriptor.c **** 
 119               		.loc 1 886 31 view .LVU27
 886:tmk_core/protocol/usb_descriptor.c **** 
 120               		.loc 1 886 31 view .LVU28
 121 006c E0E0      		ldi r30,lo8(LanguageString)
 122 006e F0E0      		ldi r31,hi8(LanguageString)
 123               	.LVL10:
 124               	.L18:
 886:tmk_core/protocol/usb_descriptor.c **** 
 125               		.loc 1 886 31 is_stmt 0 view .LVU29
 126               	.LBE3:
 127               	.LBB4:
 901:tmk_core/protocol/usb_descriptor.c **** 
 128               		.loc 1 901 31 view .LVU30
 129               	/* #APP */
 130               	 ;  901 "tmk_core/protocol/usb_descriptor.c" 1
 131 0070 8491      		lpm r24, Z
 132               		
 133               	 ;  0 "" 2
 134               	.LVL11:
 901:tmk_core/protocol/usb_descriptor.c **** 
 135               		.loc 1 901 31 is_stmt 1 view .LVU31
 136               	/* #NOAPP */
 137               	.LBE4:
 901:tmk_core/protocol/usb_descriptor.c **** 
 138               		.loc 1 901 29 is_stmt 0 view .LVU32
 139 0072 90E0      		ldi r25,0
 140               	.LVL12:
 903:tmk_core/protocol/usb_descriptor.c ****             }
 141               		.loc 1 903 21 is_stmt 1 view .LVU33
 900:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 142               		.loc 1 900 29 is_stmt 0 view .LVU34
 143 0074 9F01      		movw r18,r30
 144               	.LVL13:
 145               	.L4:
 972:tmk_core/protocol/usb_descriptor.c **** 
 973:tmk_core/protocol/usb_descriptor.c ****                     break;
 974:tmk_core/protocol/usb_descriptor.c **** #endif
 975:tmk_core/protocol/usb_descriptor.c **** 
 976:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 977:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 978:tmk_core/protocol/usb_descriptor.c ****                     Address = &RawReport;
 979:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(RawReport);
 980:tmk_core/protocol/usb_descriptor.c **** 
 981:tmk_core/protocol/usb_descriptor.c ****                     break;
 982:tmk_core/protocol/usb_descriptor.c **** #endif
 983:tmk_core/protocol/usb_descriptor.c **** 
 984:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 985:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 986:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConsoleReport;
 987:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(ConsoleReport);
 988:tmk_core/protocol/usb_descriptor.c **** 
 989:tmk_core/protocol/usb_descriptor.c ****                     break;
 990:tmk_core/protocol/usb_descriptor.c **** #endif
 991:tmk_core/protocol/usb_descriptor.c ****             }
 992:tmk_core/protocol/usb_descriptor.c **** 
 993:tmk_core/protocol/usb_descriptor.c ****             break;
 994:tmk_core/protocol/usb_descriptor.c ****     }
 995:tmk_core/protocol/usb_descriptor.c **** 
 996:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
 146               		.loc 1 996 5 is_stmt 1 view .LVU35
 147               		.loc 1 996 24 is_stmt 0 view .LVU36
 148 0076 FA01      		movw r30,r20
 149 0078 3183      		std Z+1,r19
 150 007a 2083      		st Z,r18
 997:tmk_core/protocol/usb_descriptor.c **** 
 998:tmk_core/protocol/usb_descriptor.c ****     return Size;
 151               		.loc 1 998 5 is_stmt 1 view .LVU37
 152               	/* epilogue start */
 999:tmk_core/protocol/usb_descriptor.c **** }
 153               		.loc 1 999 1 is_stmt 0 view .LVU38
 154 007c 0895      		ret
 155               	.LVL14:
 156               	.L7:
 890:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 157               		.loc 1 890 21 is_stmt 1 view .LVU39
 891:tmk_core/protocol/usb_descriptor.c **** 
 158               		.loc 1 891 21 view .LVU40
 159               	.LBB5:
 891:tmk_core/protocol/usb_descriptor.c **** 
 160               		.loc 1 891 31 view .LVU41
 891:tmk_core/protocol/usb_descriptor.c **** 
 161               		.loc 1 891 31 view .LVU42
 891:tmk_core/protocol/usb_descriptor.c **** 
 162               		.loc 1 891 31 view .LVU43
 163 007e E0E0      		ldi r30,lo8(ManufacturerString)
 164 0080 F0E0      		ldi r31,hi8(ManufacturerString)
 165 0082 00C0      		rjmp .L18
 166               	.LVL15:
 167               	.L9:
 891:tmk_core/protocol/usb_descriptor.c **** 
 168               		.loc 1 891 31 is_stmt 0 view .LVU44
 169               	.LBE5:
 895:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 170               		.loc 1 895 21 is_stmt 1 view .LVU45
 896:tmk_core/protocol/usb_descriptor.c **** 
 171               		.loc 1 896 21 view .LVU46
 172               	.LBB6:
 896:tmk_core/protocol/usb_descriptor.c **** 
 173               		.loc 1 896 31 view .LVU47
 896:tmk_core/protocol/usb_descriptor.c **** 
 174               		.loc 1 896 31 view .LVU48
 896:tmk_core/protocol/usb_descriptor.c **** 
 175               		.loc 1 896 31 view .LVU49
 176 0084 E0E0      		ldi r30,lo8(ProductString)
 177 0086 F0E0      		ldi r31,hi8(ProductString)
 178 0088 00C0      		rjmp .L18
 179               	.LVL16:
 180               	.L5:
 896:tmk_core/protocol/usb_descriptor.c **** 
 181               		.loc 1 896 31 is_stmt 0 view .LVU50
 182               	.LBE6:
 908:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 183               		.loc 1 908 13 is_stmt 1 view .LVU51
 912:tmk_core/protocol/usb_descriptor.c ****                     break;
 184               		.loc 1 912 29 is_stmt 0 view .LVU52
 185 008a 89E0      		ldi r24,lo8(9)
 186 008c 90E0      		ldi r25,0
 187               	.LVL17:
 911:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 188               		.loc 1 911 29 view .LVU53
 189 008e 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 190 0090 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 191               	.LVL18:
 911:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 192               		.loc 1 911 29 view .LVU54
 193 0092 6115      		cp r22,__zero_reg__
 194 0094 7105      		cpc r23,__zero_reg__
 195 0096 01F0      		breq .L4
 927:tmk_core/protocol/usb_descriptor.c **** 
 196               		.loc 1 927 29 view .LVU55
 197 0098 89E0      		ldi r24,lo8(9)
 198 009a 90E0      		ldi r25,0
 926:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 199               		.loc 1 926 29 view .LVU56
 200 009c 20E0      		ldi r18,lo8(ConfigurationDescriptor+43)
 201 009e 30E0      		ldi r19,hi8(ConfigurationDescriptor+43)
 202 00a0 6130      		cpi r22,1
 203 00a2 7105      		cpc r23,__zero_reg__
 204 00a4 01F0      		breq .L4
 205 00a6 00C0      		rjmp .L17
 206               	.LVL19:
 207               	.L11:
 874:tmk_core/protocol/usb_descriptor.c **** 
 208               		.loc 1 874 21 view .LVU57
 209 00a8 82E1      		ldi r24,lo8(18)
 210 00aa 90E0      		ldi r25,0
 211               	.LVL20:
 873:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 212               		.loc 1 873 21 view .LVU58
 213 00ac 20E0      		ldi r18,lo8(DeviceDescriptor)
 214 00ae 30E0      		ldi r19,hi8(DeviceDescriptor)
 215               	.LVL21:
 873:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 216               		.loc 1 873 21 view .LVU59
 217 00b0 00C0      		rjmp .L4
 218               	.LVL22:
 219               	.L12:
 879:tmk_core/protocol/usb_descriptor.c **** 
 220               		.loc 1 879 21 view .LVU60
 221 00b2 8BE3      		ldi r24,lo8(59)
 222 00b4 90E0      		ldi r25,0
 223               	.LVL23:
 878:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 224               		.loc 1 878 21 view .LVU61
 225 00b6 20E0      		ldi r18,lo8(ConfigurationDescriptor)
 226 00b8 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 227               	.LVL24:
 878:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 228               		.loc 1 878 21 view .LVU62
 229 00ba 00C0      		rjmp .L4
 230               		.cfi_endproc
 231               	.LFE102:
 233               	.global	SerialNumberString
 234               		.section	.progmem.data.SerialNumberString,"a"
 237               	SerialNumberString:
 238 0000 04        		.byte	4
 239 0001 03        		.byte	3
 240 0002 3000      		.string	"0"
 241 0004 00        		.string	""
 242 0005 00        		.string	""
 243               	.global	ProductString
 244               		.section	.progmem.data.ProductString,"a"
 247               	ProductString:
 248 0000 2E        		.byte	46
 249 0001 03        		.byte	3
 250 0002 4300      		.string	"C"
 251 0004 6F00      		.string	"o"
 252 0006 7200      		.string	"r"
 253 0008 6E00      		.string	"n"
 254 000a 6500      		.string	"e"
 255 000c 2000      		.string	" "
 256 000e 4B00      		.string	"K"
 257 0010 6500      		.string	"e"
 258 0012 7900      		.string	"y"
 259 0014 6200      		.string	"b"
 260 0016 6F00      		.string	"o"
 261 0018 6100      		.string	"a"
 262 001a 7200      		.string	"r"
 263 001c 6400      		.string	"d"
 264 001e 2000      		.string	" "
 265 0020 2800      		.string	"("
 266 0022 6300      		.string	"c"
 267 0024 7200      		.string	"r"
 268 0026 6B00      		.string	"k"
 269 0028 6200      		.string	"b"
 270 002a 6400      		.string	"d"
 271 002c 2900      		.string	")"
 272 002e 00        		.string	""
 273 002f 00        		.string	""
 274               	.global	ManufacturerString
 275               		.section	.progmem.data.ManufacturerString,"a"
 278               	ManufacturerString:
 279 0000 10        		.byte	16
 280 0001 03        		.byte	3
 281 0002 6600      		.string	"f"
 282 0004 6F00      		.string	"o"
 283 0006 6F00      		.string	"o"
 284 0008 7300      		.string	"s"
 285 000a 7400      		.string	"t"
 286 000c 6100      		.string	"a"
 287 000e 6E00      		.string	"n"
 288 0010 00        		.string	""
 289 0011 00        		.string	""
 290               	.global	LanguageString
 291               		.section	.progmem.data.LanguageString,"a"
 294               	LanguageString:
 295 0000 04        		.byte	4
 296 0001 03        		.byte	3
 297 0002 0904      		.word	1033
 298               	.global	ConfigurationDescriptor
 299               		.section	.progmem.data.ConfigurationDescriptor,"a"
 302               	ConfigurationDescriptor:
 303 0000 09        		.byte	9
 304 0001 02        		.byte	2
 305 0002 3B00      		.word	59
 306 0004 02        		.byte	2
 307 0005 01        		.byte	1
 308 0006 00        		.byte	0
 309 0007 A0        		.byte	-96
 310 0008 FA        		.byte	-6
 311 0009 09        		.byte	9
 312 000a 04        		.byte	4
 313 000b 00        		.byte	0
 314 000c 00        		.byte	0
 315 000d 01        		.byte	1
 316 000e 03        		.byte	3
 317 000f 01        		.byte	1
 318 0010 01        		.byte	1
 319 0011 00        		.byte	0
 320 0012 09        		.byte	9
 321 0013 21        		.byte	33
 322 0014 1101      		.word	273
 323 0016 00        		.byte	0
 324 0017 01        		.byte	1
 325 0018 22        		.byte	34
 326 0019 4000      		.word	64
 327 001b 07        		.byte	7
 328 001c 05        		.byte	5
 329 001d 81        		.byte	-127
 330 001e 03        		.byte	3
 331 001f 0800      		.word	8
 332 0021 0A        		.byte	10
 333 0022 09        		.byte	9
 334 0023 04        		.byte	4
 335 0024 01        		.byte	1
 336 0025 00        		.byte	0
 337 0026 01        		.byte	1
 338 0027 03        		.byte	3
 339 0028 00        		.byte	0
 340 0029 00        		.byte	0
 341 002a 00        		.byte	0
 342 002b 09        		.byte	9
 343 002c 21        		.byte	33
 344 002d 1101      		.word	273
 345 002f 00        		.byte	0
 346 0030 01        		.byte	1
 347 0031 22        		.byte	34
 348 0032 3B00      		.word	59
 349 0034 07        		.byte	7
 350 0035 05        		.byte	5
 351 0036 82        		.byte	-126
 352 0037 03        		.byte	3
 353 0038 2000      		.word	32
 354 003a 0A        		.byte	10
 355               	.global	DeviceDescriptor
 356               		.section	.progmem.data.DeviceDescriptor,"a"
 359               	DeviceDescriptor:
 360 0000 12        		.byte	18
 361 0001 01        		.byte	1
 362 0002 1001      		.word	272
 363 0004 00        		.byte	0
 364 0005 00        		.byte	0
 365 0006 00        		.byte	0
 366 0007 08        		.byte	8
 367 0008 EDFE      		.word	-275
 368 000a 6030      		.word	12384
 369 000c 0100      		.word	1
 370 000e 01        		.byte	1
 371 000f 02        		.byte	2
 372 0010 03        		.byte	3
 373 0011 01        		.byte	1
 374               	.global	SharedReport
 375               		.section	.progmem.data.SharedReport,"a"
 378               	SharedReport:
 379 0000 05        		.byte	5
 380 0001 01        		.byte	1
 381 0002 09        		.byte	9
 382 0003 06        		.byte	6
 383 0004 A1        		.byte	-95
 384 0005 01        		.byte	1
 385 0006 85        		.byte	-123
 386 0007 05        		.byte	5
 387 0008 05        		.byte	5
 388 0009 07        		.byte	7
 389 000a 19        		.byte	25
 390 000b E0        		.byte	-32
 391 000c 29        		.byte	41
 392 000d E7        		.byte	-25
 393 000e 15        		.byte	21
 394 000f 00        		.byte	0
 395 0010 25        		.byte	37
 396 0011 01        		.byte	1
 397 0012 95        		.byte	-107
 398 0013 08        		.byte	8
 399 0014 75        		.byte	117
 400 0015 01        		.byte	1
 401 0016 81        		.byte	-127
 402 0017 02        		.byte	2
 403 0018 05        		.byte	5
 404 0019 07        		.byte	7
 405 001a 19        		.byte	25
 406 001b 00        		.byte	0
 407 001c 29        		.byte	41
 408 001d EF        		.byte	-17
 409 001e 15        		.byte	21
 410 001f 00        		.byte	0
 411 0020 25        		.byte	37
 412 0021 01        		.byte	1
 413 0022 95        		.byte	-107
 414 0023 F0        		.byte	-16
 415 0024 75        		.byte	117
 416 0025 01        		.byte	1
 417 0026 81        		.byte	-127
 418 0027 02        		.byte	2
 419 0028 05        		.byte	5
 420 0029 08        		.byte	8
 421 002a 19        		.byte	25
 422 002b 01        		.byte	1
 423 002c 29        		.byte	41
 424 002d 05        		.byte	5
 425 002e 95        		.byte	-107
 426 002f 05        		.byte	5
 427 0030 75        		.byte	117
 428 0031 01        		.byte	1
 429 0032 91        		.byte	-111
 430 0033 02        		.byte	2
 431 0034 95        		.byte	-107
 432 0035 01        		.byte	1
 433 0036 75        		.byte	117
 434 0037 03        		.byte	3
 435 0038 91        		.byte	-111
 436 0039 01        		.byte	1
 437 003a C0        		.byte	-64
 438               	.global	KeyboardReport
 439               		.section	.progmem.data.KeyboardReport,"a"
 442               	KeyboardReport:
 443 0000 05        		.byte	5
 444 0001 01        		.byte	1
 445 0002 09        		.byte	9
 446 0003 06        		.byte	6
 447 0004 A1        		.byte	-95
 448 0005 01        		.byte	1
 449 0006 05        		.byte	5
 450 0007 07        		.byte	7
 451 0008 19        		.byte	25
 452 0009 E0        		.byte	-32
 453 000a 29        		.byte	41
 454 000b E7        		.byte	-25
 455 000c 15        		.byte	21
 456 000d 00        		.byte	0
 457 000e 25        		.byte	37
 458 000f 01        		.byte	1
 459 0010 95        		.byte	-107
 460 0011 08        		.byte	8
 461 0012 75        		.byte	117
 462 0013 01        		.byte	1
 463 0014 81        		.byte	-127
 464 0015 02        		.byte	2
 465 0016 95        		.byte	-107
 466 0017 01        		.byte	1
 467 0018 75        		.byte	117
 468 0019 08        		.byte	8
 469 001a 81        		.byte	-127
 470 001b 01        		.byte	1
 471 001c 05        		.byte	5
 472 001d 07        		.byte	7
 473 001e 19        		.byte	25
 474 001f 00        		.byte	0
 475 0020 29        		.byte	41
 476 0021 FF        		.byte	-1
 477 0022 15        		.byte	21
 478 0023 00        		.byte	0
 479 0024 26        		.byte	38
 480 0025 FF        		.byte	-1
 481 0026 00        		.byte	0
 482 0027 95        		.byte	-107
 483 0028 06        		.byte	6
 484 0029 75        		.byte	117
 485 002a 08        		.byte	8
 486 002b 81        		.byte	-127
 487 002c 00        		.byte	0
 488 002d 05        		.byte	5
 489 002e 08        		.byte	8
 490 002f 19        		.byte	25
 491 0030 01        		.byte	1
 492 0031 29        		.byte	41
 493 0032 05        		.byte	5
 494 0033 95        		.byte	-107
 495 0034 05        		.byte	5
 496 0035 75        		.byte	117
 497 0036 01        		.byte	1
 498 0037 91        		.byte	-111
 499 0038 02        		.byte	2
 500 0039 95        		.byte	-107
 501 003a 01        		.byte	1
 502 003b 75        		.byte	117
 503 003c 03        		.byte	3
 504 003d 91        		.byte	-111
 505 003e 01        		.byte	1
 506 003f C0        		.byte	-64
 507               		.text
 508               	.Letext0:
 509               		.file 2 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 510               		.file 3 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 511               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 512               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 513               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 514               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 515               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 516               		.file 9 "c:\\users\\nonej\\documents\\keyboard\\msys64\\home\\nonej\\qmk_utils\\avr8-gnu-toolchain
 517               		.file 10 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 518               		.file 11 "tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb_descriptor.c
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:2      *ABS*:0000003e __SP_H__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:3      *ABS*:0000003d __SP_L__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:4      *ABS*:0000003f __SREG__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:6      *ABS*:00000001 __zero_reg__
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:13     .text.get_usb_descriptor:00000000 get_usb_descriptor
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:442    .progmem.data.KeyboardReport:00000000 KeyboardReport
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:378    .progmem.data.SharedReport:00000000 SharedReport
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:237    .progmem.data.SerialNumberString:00000000 SerialNumberString
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:294    .progmem.data.LanguageString:00000000 LanguageString
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:278    .progmem.data.ManufacturerString:00000000 ManufacturerString
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:247    .progmem.data.ProductString:00000000 ProductString
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:302    .progmem.data.ConfigurationDescriptor:00000000 ConfigurationDescriptor
C:\Users\nonej\Documents\Keyboard\msys64\tmp\ccVYfFa7.s:359    .progmem.data.DeviceDescriptor:00000000 DeviceDescriptor

NO UNDEFINED SYMBOLS
